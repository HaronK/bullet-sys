/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                val |= 1 << i;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            self.set_bit(i + bit_offset, val_bit_is_set);
        }
    }
}
pub const btVector3DataName: &'static [u8; 19usize] = b"btVector3FloatData\0";
pub const btQuaternionDataName: &'static [u8; 22usize] = b"btQuaternionFloatData\0";
pub const btPersistentManifoldDataName: &'static [u8; 30usize] = b"btPersistentManifoldFloatData\0";
pub const btCollisionObjectDataName: &'static [u8; 27usize] = b"btCollisionObjectFloatData\0";
pub const btQuantizedBvhDataName: &'static [u8; 24usize] = b"btQuantizedBvhFloatData\0";
pub const btRigidBodyDataName: &'static [u8; 21usize] = b"btRigidBodyFloatData\0";
pub const btTypedConstraintDataName: &'static [u8; 27usize] = b"btTypedConstraintFloatData\0";
pub const btMultiBodyDataName: &'static [u8; 21usize] = b"btMultiBodyFloatData\0";
pub const btMultiBodyLinkDataName: &'static [u8; 25usize] = b"btMultiBodyLinkFloatData\0";
pub const btMultiBodyLinkColliderDataName: &'static [u8; 33usize] =
    b"btMultiBodyLinkColliderFloatData\0";
pub const btSoftBodyDataName: &'static [u8; 20usize] = b"btSoftBodyFloatData\0";
pub const btPoint2PointConstraintDataName: &'static [u8; 33usize] =
    b"btPoint2PointConstraintFloatData\0";
pub const btHingeConstraintDataName: &'static [u8; 27usize] = b"btHingeConstraintFloatData\0";
pub const btConeTwistConstraintDataName: &'static [u8; 26usize] = b"btConeTwistConstraintData\0";
pub const btGeneric6DofConstraintDataName: &'static [u8; 28usize] =
    b"btGeneric6DofConstraintData\0";
pub const btSliderConstraintDataName: &'static [u8; 23usize] = b"btSliderConstraintData\0";
pub const btGeneric6DofSpringConstraintDataName: &'static [u8; 34usize] =
    b"btGeneric6DofSpringConstraintData\0";
pub const btGeneric6DofSpring2ConstraintDataName: &'static [u8; 35usize] =
    b"btGeneric6DofSpring2ConstraintData\0";
pub const btGearConstraintDataName: &'static [u8; 26usize] = b"btGearConstraintFloatData\0";
pub type btScalar = f32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btInfMaskConverter {
    pub __bindgen_anon_1: btInfMaskConverter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btInfMaskConverter__bindgen_ty_1 {
    pub mask: f32,
    pub intmask: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
extern "C" {
    #[link_name = "\u{1}_ZL14btInfinityMask"]
    pub static mut btInfinityMask: btInfMaskConverter;
}
/// rudimentary class to provide type info
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTypedObject {
    pub m_objectType: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_Z22btAlignedAllocInternalmi"]
    pub fn btAlignedAllocInternal(
        size: usize,
        alignment: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z21btAlignedFreeInternalPv"]
    pub fn btAlignedFreeInternal(ptr: *mut ::std::os::raw::c_void);
}
pub type btAlignedAllocFunc = ::std::option::Option<
    unsafe extern "C" fn(size: usize, alignment: ::std::os::raw::c_int)
        -> *mut ::std::os::raw::c_void,
>;
pub type btAlignedFreeFunc =
    ::std::option::Option<unsafe extern "C" fn(memblock: *mut ::std::os::raw::c_void)>;
pub type btAllocFunc =
    ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void>;
pub type btFreeFunc =
    ::std::option::Option<unsafe extern "C" fn(memblock: *mut ::std::os::raw::c_void)>;
extern "C" {
    /// The developer can let all Bullet memory allocations go through a custom memory allocator, using btAlignedAllocSetCustom
    #[link_name = "\u{1}_Z23btAlignedAllocSetCustomPFPvmEPFvS_E"]
    pub fn btAlignedAllocSetCustom(allocFunc: btAllocFunc, freeFunc: btFreeFunc);
}
extern "C" {
    /// If the developer has already an custom aligned allocator, then btAlignedAllocSetCustomAligned can be used. The default aligned allocator pre-allocates extra memory using the non-aligned allocator, and instruments it.
    #[link_name = "\u{1}_Z30btAlignedAllocSetCustomAlignedPFPvmiEPFvS_E"]
    pub fn btAlignedAllocSetCustomAligned(
        allocFunc: btAlignedAllocFunc,
        freeFunc: btAlignedFreeFunc,
    );
}
pub type btAlignedAllocator_self_type = u8;
pub type btAlignedAllocator_const_pointer<T> = *mut T;
pub type btAlignedAllocator_const_reference<T> = *mut T;
pub type btAlignedAllocator_pointer<T> = *mut T;
pub type btAlignedAllocator_reference<T> = *mut T;
pub type btAlignedAllocator_value_type<T> = T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btAlignedAllocator_rebind {
    pub _address: u8,
}
pub type btAlignedAllocator_rebind_other = u8;
/// @brief btVector3 can be used to represent 3D points and vectors.
/// It has an un-used w component to suit 16-byte alignment when btVector3 is stored in containers. This extra component can be used by derived classes (Quaternion?) or by user
/// Ideally, this class should be replaced by a platform optimized SIMD version that keeps the data in registers
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btVector3 {
    pub m_floats: [btScalar; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btVector4 {
    pub _base: btVector3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btVector3FloatData {
    pub m_floats: [f32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btVector3DoubleData {
    pub m_floats: [f64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btQuadWord {
    pub m_floats: [btScalar; 4usize],
}
/// @brief The btQuaternion implements quaternion to perform linear algebra rotations in combination with btMatrix3x3, btVector3 and btTransform.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btQuaternion {
    pub _base: btQuadWord,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btQuaternionFloatData {
    pub m_floats: [f32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btQuaternionDoubleData {
    pub m_floats: [f64; 4usize],
}
/// @brief The btMatrix3x3 class implements a 3x3 rotation matrix, to perform linear algebra in combination with btQuaternion, btTransform and btVector3.
/// Make sure to only include a pure orthogonal matrix without scaling.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMatrix3x3 {
    /// Data storage for the matrix, each vector is a row of the matrix
    pub m_el: [btVector3; 3usize],
}
extern "C" {
    /// @brief Return the determinant of the matrix
    #[link_name = "\u{1}_ZNK11btMatrix3x311determinantEv"]
    pub fn btMatrix3x3_determinant(this: *const btMatrix3x3) -> btScalar;
}
extern "C" {
    /// @brief Return the adjoint of the matrix
    #[link_name = "\u{1}_ZNK11btMatrix3x37adjointEv"]
    pub fn btMatrix3x3_adjoint(this: *const btMatrix3x3) -> btMatrix3x3;
}
extern "C" {
    /// @brief Return the matrix with all values non negative
    #[link_name = "\u{1}_ZNK11btMatrix3x38absoluteEv"]
    pub fn btMatrix3x3_absolute(this: *const btMatrix3x3) -> btMatrix3x3;
}
extern "C" {
    /// @brief Return the transpose of the matrix
    #[link_name = "\u{1}_ZNK11btMatrix3x39transposeEv"]
    pub fn btMatrix3x3_transpose(this: *const btMatrix3x3) -> btMatrix3x3;
}
extern "C" {
    /// @brief Return the inverse of the matrix
    #[link_name = "\u{1}_ZNK11btMatrix3x37inverseEv"]
    pub fn btMatrix3x3_inverse(this: *const btMatrix3x3) -> btMatrix3x3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMatrix3x314transposeTimesERKS_"]
    pub fn btMatrix3x3_transposeTimes(
        this: *const btMatrix3x3,
        m: *const btMatrix3x3,
    ) -> btMatrix3x3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMatrix3x314timesTransposeERKS_"]
    pub fn btMatrix3x3_timesTranspose(
        this: *const btMatrix3x3,
        m: *const btMatrix3x3,
    ) -> btMatrix3x3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMatrix3x39serializeER20btMatrix3x3FloatData"]
    pub fn btMatrix3x3_serialize(this: *const btMatrix3x3, dataOut: *mut btMatrix3x3FloatData);
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMatrix3x314serializeFloatER20btMatrix3x3FloatData"]
    pub fn btMatrix3x3_serializeFloat(this: *const btMatrix3x3, dataOut: *mut btMatrix3x3FloatData);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMatrix3x311deSerializeERK20btMatrix3x3FloatData"]
    pub fn btMatrix3x3_deSerialize(this: *mut btMatrix3x3, dataIn: *const btMatrix3x3FloatData);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMatrix3x316deSerializeFloatERK20btMatrix3x3FloatData"]
    pub fn btMatrix3x3_deSerializeFloat(
        this: *mut btMatrix3x3,
        dataIn: *const btMatrix3x3FloatData,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMatrix3x317deSerializeDoubleERK21btMatrix3x3DoubleData"]
    pub fn btMatrix3x3_deSerializeDouble(
        this: *mut btMatrix3x3,
        dataIn: *const btMatrix3x3DoubleData,
    );
}
impl btMatrix3x3 {
    #[inline]
    pub unsafe fn determinant(&self) -> btScalar {
        btMatrix3x3_determinant(self)
    }
    #[inline]
    pub unsafe fn adjoint(&self) -> btMatrix3x3 {
        btMatrix3x3_adjoint(self)
    }
    #[inline]
    pub unsafe fn absolute(&self) -> btMatrix3x3 {
        btMatrix3x3_absolute(self)
    }
    #[inline]
    pub unsafe fn transpose(&self) -> btMatrix3x3 {
        btMatrix3x3_transpose(self)
    }
    #[inline]
    pub unsafe fn inverse(&self) -> btMatrix3x3 {
        btMatrix3x3_inverse(self)
    }
    #[inline]
    pub unsafe fn transposeTimes(&self, m: *const btMatrix3x3) -> btMatrix3x3 {
        btMatrix3x3_transposeTimes(self, m)
    }
    #[inline]
    pub unsafe fn timesTranspose(&self, m: *const btMatrix3x3) -> btMatrix3x3 {
        btMatrix3x3_timesTranspose(self, m)
    }
    #[inline]
    pub unsafe fn serialize(&self, dataOut: *mut btMatrix3x3FloatData) {
        btMatrix3x3_serialize(self, dataOut)
    }
    #[inline]
    pub unsafe fn serializeFloat(&self, dataOut: *mut btMatrix3x3FloatData) {
        btMatrix3x3_serializeFloat(self, dataOut)
    }
    #[inline]
    pub unsafe fn deSerialize(&mut self, dataIn: *const btMatrix3x3FloatData) {
        btMatrix3x3_deSerialize(self, dataIn)
    }
    #[inline]
    pub unsafe fn deSerializeFloat(&mut self, dataIn: *const btMatrix3x3FloatData) {
        btMatrix3x3_deSerializeFloat(self, dataIn)
    }
    #[inline]
    pub unsafe fn deSerializeDouble(&mut self, dataIn: *const btMatrix3x3DoubleData) {
        btMatrix3x3_deSerializeDouble(self, dataIn)
    }
}
/// for serialization
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMatrix3x3FloatData {
    pub m_el: [btVector3FloatData; 3usize],
}
/// for serialization
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMatrix3x3DoubleData {
    pub m_el: [btVector3DoubleData; 3usize],
}
/// @brief The btTransform class supports rigid transforms with only translation and rotation and no scaling/shear.
/// It can be used in combination with btVector3, btQuaternion and btMatrix3x3 linear algebra classes.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTransform {
    /// Storage for the rotation
    pub m_basis: btMatrix3x3,
    /// Storage for the translation
    pub m_origin: btVector3,
}
extern "C" {
    /// @brief Return the inverse of this transform times the other transform
    /// @param t The other transform
    /// return this.inverse() * the other
    #[link_name = "\u{1}_ZNK11btTransform12inverseTimesERKS_"]
    pub fn btTransform_inverseTimes(this: *const btTransform, t: *const btTransform)
        -> btTransform;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btTransform9serializeER20btTransformFloatData"]
    pub fn btTransform_serialize(this: *const btTransform, dataOut: *mut btTransformFloatData);
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btTransform14serializeFloatER20btTransformFloatData"]
    pub fn btTransform_serializeFloat(this: *const btTransform, dataOut: *mut btTransformFloatData);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btTransform11deSerializeERK20btTransformFloatData"]
    pub fn btTransform_deSerialize(this: *mut btTransform, dataIn: *const btTransformFloatData);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btTransform17deSerializeDoubleERK21btTransformDoubleData"]
    pub fn btTransform_deSerializeDouble(
        this: *mut btTransform,
        dataIn: *const btTransformDoubleData,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btTransform16deSerializeFloatERK20btTransformFloatData"]
    pub fn btTransform_deSerializeFloat(
        this: *mut btTransform,
        dataIn: *const btTransformFloatData,
    );
}
impl btTransform {
    #[inline]
    pub unsafe fn inverseTimes(&self, t: *const btTransform) -> btTransform {
        btTransform_inverseTimes(self, t)
    }
    #[inline]
    pub unsafe fn serialize(&self, dataOut: *mut btTransformFloatData) {
        btTransform_serialize(self, dataOut)
    }
    #[inline]
    pub unsafe fn serializeFloat(&self, dataOut: *mut btTransformFloatData) {
        btTransform_serializeFloat(self, dataOut)
    }
    #[inline]
    pub unsafe fn deSerialize(&mut self, dataIn: *const btTransformFloatData) {
        btTransform_deSerialize(self, dataIn)
    }
    #[inline]
    pub unsafe fn deSerializeDouble(&mut self, dataIn: *const btTransformDoubleData) {
        btTransform_deSerializeDouble(self, dataIn)
    }
    #[inline]
    pub unsafe fn deSerializeFloat(&mut self, dataIn: *const btTransformFloatData) {
        btTransform_deSerializeFloat(self, dataIn)
    }
}
/// for serialization
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTransformFloatData {
    pub m_basis: btMatrix3x3FloatData,
    pub m_origin: btVector3FloatData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTransformDoubleData {
    pub m_basis: btMatrix3x3DoubleData,
    pub m_origin: btVector3DoubleData,
}
#[repr(C)]
pub struct btDiscreteCollisionDetectorInterface__bindgen_vtable(::std::os::raw::c_void);
/// This interface is made to be used by an iterative approach to do TimeOfImpact calculations
/// This interface allows to query for closest points and penetration depth between two (convex) objects
/// the closest point is on the second object (B), and the normal points from the surface on B towards A.
/// distance is between closest points on B and closest point on A. So you can calculate closest point on A
/// by taking closestPointInA = closestPointInB + m_distance * m_normalOnSurfaceB
#[repr(C)]
#[derive(Debug)]
pub struct btDiscreteCollisionDetectorInterface {
    pub vtable_: *const btDiscreteCollisionDetectorInterface__bindgen_vtable,
}
#[repr(C)]
pub struct btDiscreteCollisionDetectorInterface_Result__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btDiscreteCollisionDetectorInterface_Result {
    pub vtable_: *const btDiscreteCollisionDetectorInterface_Result__bindgen_vtable,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btDiscreteCollisionDetectorInterface_ClosestPointInput {
    pub m_transformA: btTransform,
    pub m_transformB: btTransform,
    pub m_maximumDistanceSquared: btScalar,
}
#[repr(C)]
#[derive(Debug)]
pub struct btStorageResult {
    pub _base: btDiscreteCollisionDetectorInterface_Result,
    pub m_normalOnSurfaceB: btVector3,
    pub m_closestPointInB: btVector3,
    pub m_distance: btScalar,
}
/// The btAlignedObjectArray template class uses a subset of the stl::vector interface for its methods
/// It is developed to replace stl::vector to avoid portability issues, including STL alignment issues to add SIMD/SSE data
#[repr(C)]
#[derive(Debug)]
pub struct btAlignedObjectArray<T> {
    pub m_allocator: u8,
    pub m_size: ::std::os::raw::c_int,
    pub m_capacity: ::std::os::raw::c_int,
    pub m_data: *mut T,
    pub m_ownsMemory: bool,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btAlignedObjectArray_less {
    pub _address: u8,
}
pub type btManifoldArray = btAlignedObjectArray<*mut btPersistentManifold>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCollisionAlgorithmConstructionInfo {
    pub m_dispatcher1: *mut btDispatcher,
    pub m_manifold: *mut btPersistentManifold,
}
#[repr(C)]
pub struct btCollisionAlgorithm__bindgen_vtable(::std::os::raw::c_void);
/// btCollisionAlgorithm is an collision interface that is compatible with the Broadphase and btDispatcher.
/// It is persistent over frames
#[repr(C)]
#[derive(Debug)]
pub struct btCollisionAlgorithm {
    pub vtable_: *const btCollisionAlgorithm__bindgen_vtable,
    pub m_dispatcher: *mut btDispatcher,
}
extern "C" {
    #[link_name = "\u{1}_ZN20btCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfo"]
    pub fn btCollisionAlgorithm_btCollisionAlgorithm(
        this: *mut btCollisionAlgorithm,
        ci: *const btCollisionAlgorithmConstructionInfo,
    );
}
impl btCollisionAlgorithm {
    #[inline]
    pub unsafe fn new(ci: *const btCollisionAlgorithmConstructionInfo) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btCollisionAlgorithm_btCollisionAlgorithm(&mut __bindgen_tmp, ci);
        __bindgen_tmp
    }
}
/// This class is not enabled yet (work-in-progress) to more aggressively activate objects.
#[repr(C)]
#[derive(Debug)]
pub struct btActivatingCollisionAlgorithm {
    pub _base: btCollisionAlgorithm,
}
extern "C" {
    #[link_name = "\u{1}_ZN30btActivatingCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfo"]
    pub fn btActivatingCollisionAlgorithm_btActivatingCollisionAlgorithm(
        this: *mut btActivatingCollisionAlgorithm,
        ci: *const btCollisionAlgorithmConstructionInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btActivatingCollisionAlgorithmC2ERK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_"]
    pub fn btActivatingCollisionAlgorithm_btActivatingCollisionAlgorithm1(
        this: *mut btActivatingCollisionAlgorithm,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
    );
}
impl btActivatingCollisionAlgorithm {
    #[inline]
    pub unsafe fn new(ci: *const btCollisionAlgorithmConstructionInfo) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btActivatingCollisionAlgorithm_btActivatingCollisionAlgorithm(&mut __bindgen_tmp, ci);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btActivatingCollisionAlgorithm_btActivatingCollisionAlgorithm1(
            &mut __bindgen_tmp,
            ci,
            body0Wrap,
            body1Wrap,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN30btActivatingCollisionAlgorithmD1Ev"]
    pub fn btActivatingCollisionAlgorithm_btActivatingCollisionAlgorithm_destructor(
        this: *mut btActivatingCollisionAlgorithm,
    );
}
/// The btBroadphaseProxy is the main class that can be used with the Bullet broadphases.
/// It stores collision shape type information, collision filter information and a client object, typically a btCollisionObject or btRigidBody.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btBroadphaseProxy {
    pub m_clientObject: *mut ::std::os::raw::c_void,
    pub m_collisionFilterGroup: ::std::os::raw::c_int,
    pub m_collisionFilterMask: ::std::os::raw::c_int,
    pub m_uniqueId: ::std::os::raw::c_int,
    pub m_aabbMin: btVector3,
    pub m_aabbMax: btVector3,
}
pub const btBroadphaseProxy_CollisionFilterGroups_DefaultFilter:
    btBroadphaseProxy_CollisionFilterGroups = 1;
pub const btBroadphaseProxy_CollisionFilterGroups_StaticFilter:
    btBroadphaseProxy_CollisionFilterGroups = 2;
pub const btBroadphaseProxy_CollisionFilterGroups_KinematicFilter:
    btBroadphaseProxy_CollisionFilterGroups = 4;
pub const btBroadphaseProxy_CollisionFilterGroups_DebrisFilter:
    btBroadphaseProxy_CollisionFilterGroups = 8;
pub const btBroadphaseProxy_CollisionFilterGroups_SensorTrigger:
    btBroadphaseProxy_CollisionFilterGroups = 16;
pub const btBroadphaseProxy_CollisionFilterGroups_CharacterFilter:
    btBroadphaseProxy_CollisionFilterGroups = 32;
pub const btBroadphaseProxy_CollisionFilterGroups_AllFilter:
    btBroadphaseProxy_CollisionFilterGroups = -1;
/// optional filtering to cull potential collisions
pub type btBroadphaseProxy_CollisionFilterGroups = i32;
/// The btBroadphasePair class contains a pair of aabb-overlapping objects.
/// A btDispatcher can search a btCollisionAlgorithm that performs exact/narrowphase collision detection on the actual collision shapes.
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btBroadphasePair {
    pub m_pProxy0: *mut btBroadphaseProxy,
    pub m_pProxy1: *mut btBroadphaseProxy,
    pub m_algorithm: *mut btCollisionAlgorithm,
    pub __bindgen_anon_1: btBroadphasePair__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btBroadphasePair__bindgen_ty_1 {
    pub m_internalInfo1: *mut ::std::os::raw::c_void,
    pub m_internalTmpValue: ::std::os::raw::c_int,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btBroadphasePairSortPredicate {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btDispatcherInfo {
    pub m_timeStep: btScalar,
    pub m_stepCount: ::std::os::raw::c_int,
    pub m_dispatchFunc: ::std::os::raw::c_int,
    pub m_timeOfImpact: btScalar,
    pub m_useContinuous: bool,
    pub m_debugDraw: *mut btIDebugDraw,
    pub m_enableSatConvex: bool,
    pub m_enableSPU: bool,
    pub m_useEpa: bool,
    pub m_allowedCcdPenetration: btScalar,
    pub m_useConvexConservativeDistanceUtil: bool,
    pub m_convexConservativeDistanceThreshold: btScalar,
    pub m_deterministicOverlappingPairs: bool,
}
pub const btDispatcherInfo_DispatchFunc_DISPATCH_DISCRETE: btDispatcherInfo_DispatchFunc = 1;
pub const btDispatcherInfo_DispatchFunc_DISPATCH_CONTINUOUS: btDispatcherInfo_DispatchFunc = 2;
pub type btDispatcherInfo_DispatchFunc = u32;
pub const ebtDispatcherQueryType_BT_CONTACT_POINT_ALGORITHMS: ebtDispatcherQueryType = 1;
pub const ebtDispatcherQueryType_BT_CLOSEST_POINT_ALGORITHMS: ebtDispatcherQueryType = 2;
pub type ebtDispatcherQueryType = u32;
#[repr(C)]
pub struct btDispatcher__bindgen_vtable(::std::os::raw::c_void);
/// The btDispatcher interface class can be used in combination with broadphase to dispatch calculations for overlapping pairs.
/// For example for pairwise collision detection, calculating contact points stored in btPersistentManifold or user callbacks (game logic).
#[repr(C)]
#[derive(Debug)]
pub struct btDispatcher {
    pub vtable_: *const btDispatcher__bindgen_vtable,
}
extern "C" {
    #[link_name = "\u{1}_ZN12btDispatcherD1Ev"]
    pub fn btDispatcher_btDispatcher_destructor(this: *mut btDispatcher);
}
#[repr(C)]
pub struct btCollisionAlgorithmCreateFunc__bindgen_vtable(::std::os::raw::c_void);
/// Used by the btCollisionDispatcher to register and create instances for btCollisionAlgorithm
#[repr(C)]
#[derive(Debug)]
pub struct btCollisionAlgorithmCreateFunc {
    pub vtable_: *const btCollisionAlgorithmCreateFunc__bindgen_vtable,
    pub m_swapped: bool,
}
/// box-box collision detection
#[repr(C)]
#[derive(Debug)]
pub struct btBox2dBox2dCollisionAlgorithm {
    pub _base: btActivatingCollisionAlgorithm,
    pub m_ownManifold: bool,
    pub m_manifoldPtr: *mut btPersistentManifold,
}
#[repr(C)]
#[derive(Debug)]
pub struct btBox2dBox2dCollisionAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
extern "C" {
    #[link_name = "\u{1}_ZN30btBox2dBox2dCollisionAlgorithmC1EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS7_"]
    pub fn btBox2dBox2dCollisionAlgorithm_btBox2dBox2dCollisionAlgorithm(
        this: *mut btBox2dBox2dCollisionAlgorithm,
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
    );
}
impl btBox2dBox2dCollisionAlgorithm {
    #[inline]
    pub unsafe fn new(
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btBox2dBox2dCollisionAlgorithm_btBox2dBox2dCollisionAlgorithm(
            &mut __bindgen_tmp,
            mf,
            ci,
            body0Wrap,
            body1Wrap,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN30btBox2dBox2dCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btBox2dBox2dCollisionAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btBox2dBox2dCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btBox2dBox2dCollisionAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btBox2dBox2dCollisionAlgorithmD1Ev"]
    pub fn btBox2dBox2dCollisionAlgorithm_btBox2dBox2dCollisionAlgorithm_destructor(
        this: *mut btBox2dBox2dCollisionAlgorithm,
    );
}
/// box-box collision detection
#[repr(C)]
#[derive(Debug)]
pub struct btBoxBoxCollisionAlgorithm {
    pub _base: btActivatingCollisionAlgorithm,
    pub m_ownManifold: bool,
    pub m_manifoldPtr: *mut btPersistentManifold,
}
#[repr(C)]
#[derive(Debug)]
pub struct btBoxBoxCollisionAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
extern "C" {
    #[link_name = "\u{1}_ZN26btBoxBoxCollisionAlgorithmC1EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS7_"]
    pub fn btBoxBoxCollisionAlgorithm_btBoxBoxCollisionAlgorithm(
        this: *mut btBoxBoxCollisionAlgorithm,
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
    );
}
impl btBoxBoxCollisionAlgorithm {
    #[inline]
    pub unsafe fn new(
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btBoxBoxCollisionAlgorithm_btBoxBoxCollisionAlgorithm(
            &mut __bindgen_tmp,
            mf,
            ci,
            body0Wrap,
            body1Wrap,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN26btBoxBoxCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btBoxBoxCollisionAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN26btBoxBoxCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btBoxBoxCollisionAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN26btBoxBoxCollisionAlgorithmD1Ev"]
    pub fn btBoxBoxCollisionAlgorithm_btBoxBoxCollisionAlgorithm_destructor(
        this: *mut btBoxBoxCollisionAlgorithm,
    );
}
/// btBoxBoxDetector wraps the ODE box-box collision detector
/// re-distributed under the Zlib license with permission from Russell L. Smith
#[repr(C)]
#[derive(Debug)]
pub struct btBoxBoxDetector {
    pub _base: btDiscreteCollisionDetectorInterface,
    pub m_box1: *const btBoxShape,
    pub m_box2: *const btBoxShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN16btBoxBoxDetectorC1EPK10btBoxShapeS2_"]
    pub fn btBoxBoxDetector_btBoxBoxDetector(
        this: *mut btBoxBoxDetector,
        box1: *const btBoxShape,
        box2: *const btBoxShape,
    );
}
impl btBoxBoxDetector {
    #[inline]
    pub unsafe fn new(box1: *const btBoxShape, box2: *const btBoxShape) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btBoxBoxDetector_btBoxBoxDetector(&mut __bindgen_tmp, box1, box2);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN16btBoxBoxDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb"]
    pub fn btBoxBoxDetector_getClosestPoints(
        this: *mut ::std::os::raw::c_void,
        input: *const btDiscreteCollisionDetectorInterface_ClosestPointInput,
        output: *mut btDiscreteCollisionDetectorInterface_Result,
        debugDraw: *mut btIDebugDraw,
        swapResults: bool,
    );
}
/// Utils related to temporal transforms
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTransformUtil {
    pub _address: u8,
}
/// The btConvexSeparatingDistanceUtil can help speed up convex collision detection
/// by conservatively updating a cached separating distance/vector instead of re-calculating the closest distance
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btConvexSeparatingDistanceUtil {
    pub m_ornA: btQuaternion,
    pub m_ornB: btQuaternion,
    pub m_posA: btVector3,
    pub m_posB: btVector3,
    pub m_separatingNormal: btVector3,
    pub m_boundingRadiusA: btScalar,
    pub m_boundingRadiusB: btScalar,
    pub m_separatingDistance: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btConstraintRow {
    pub m_normal: [btScalar; 3usize],
    pub m_rhs: btScalar,
    pub m_jacDiagInv: btScalar,
    pub m_lowerLimit: btScalar,
    pub m_upperLimit: btScalar,
    pub m_accumImpulse: btScalar,
}
pub const btContactPointFlags_BT_CONTACT_FLAG_LATERAL_FRICTION_INITIALIZED: btContactPointFlags = 1;
pub const btContactPointFlags_BT_CONTACT_FLAG_HAS_CONTACT_CFM: btContactPointFlags = 2;
pub const btContactPointFlags_BT_CONTACT_FLAG_HAS_CONTACT_ERP: btContactPointFlags = 4;
pub const btContactPointFlags_BT_CONTACT_FLAG_CONTACT_STIFFNESS_DAMPING: btContactPointFlags = 8;
pub const btContactPointFlags_BT_CONTACT_FLAG_FRICTION_ANCHOR: btContactPointFlags = 16;
pub type btContactPointFlags = u32;
/// ManifoldContactPoint collects and maintains persistent contactpoints.
/// used to improve stability and performance of rigidbody dynamics response.
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btManifoldPoint {
    pub m_localPointA: btVector3,
    pub m_localPointB: btVector3,
    pub m_positionWorldOnB: btVector3,
    /// m_positionWorldOnA is redundant information, see getPositionWorldOnA(), but for clarity
    pub m_positionWorldOnA: btVector3,
    pub m_normalWorldOnB: btVector3,
    pub m_distance1: btScalar,
    pub m_combinedFriction: btScalar,
    pub m_combinedRollingFriction: btScalar,
    pub m_combinedSpinningFriction: btScalar,
    pub m_combinedRestitution: btScalar,
    pub m_partId0: ::std::os::raw::c_int,
    pub m_partId1: ::std::os::raw::c_int,
    pub m_index0: ::std::os::raw::c_int,
    pub m_index1: ::std::os::raw::c_int,
    pub m_userPersistentData: *mut ::std::os::raw::c_void,
    pub m_contactPointFlags: ::std::os::raw::c_int,
    pub m_appliedImpulse: btScalar,
    pub m_appliedImpulseLateral1: btScalar,
    pub m_appliedImpulseLateral2: btScalar,
    pub m_contactMotion1: btScalar,
    pub m_contactMotion2: btScalar,
    pub __bindgen_anon_1: btManifoldPoint__bindgen_ty_1,
    pub __bindgen_anon_2: btManifoldPoint__bindgen_ty_2,
    pub m_frictionCFM: btScalar,
    pub m_lifeTime: ::std::os::raw::c_int,
    pub m_lateralFrictionDir1: btVector3,
    pub m_lateralFrictionDir2: btVector3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btManifoldPoint__bindgen_ty_1 {
    pub m_contactCFM: btScalar,
    pub m_combinedContactStiffness1: btScalar,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btManifoldPoint__bindgen_ty_2 {
    pub m_contactERP: btScalar,
    pub m_combinedContactDamping1: btScalar,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCollisionResult {
    _unused: [u8; 0],
}
pub const btContactManifoldTypes_MIN_CONTACT_MANIFOLD_TYPE: btContactManifoldTypes = 1024;
pub const btContactManifoldTypes_BT_PERSISTENT_MANIFOLD_TYPE: btContactManifoldTypes = 1025;
pub type btContactManifoldTypes = u32;
/// btPersistentManifold is a contact point cache, it stays persistent as long as objects are overlapping in the broadphase.
/// Those contact points are created by the collision narrow phase.
/// The cache can be empty, or hold 1,2,3 or 4 points. Some collision algorithms (GJK) might only add one point at a time.
/// updates/refreshes old contact points, and throw them away if necessary (distance becomes too large)
/// reduces the cache to 4 points, when more then 4 points are added, using following rules:
/// the contact point with deepest penetration is always kept, and it tries to maximuze the area covered by the points
/// note that some pairs of objects might have more then one contact manifold.
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btPersistentManifold {
    pub _base: btTypedObject,
    pub m_pointCache: [btManifoldPoint; 4usize],
    /// this two body pointers can point to the physics rigidbody class.
    pub m_body0: *const btCollisionObject,
    pub m_body1: *const btCollisionObject,
    pub m_cachedPoints: ::std::os::raw::c_int,
    pub m_contactBreakingThreshold: btScalar,
    pub m_contactProcessingThreshold: btScalar,
    pub m_companionIdA: ::std::os::raw::c_int,
    pub m_companionIdB: ::std::os::raw::c_int,
    pub m_index1a: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN20btPersistentManifold14clearUserCacheER15btManifoldPoint"]
    pub fn btPersistentManifold_clearUserCache(
        this: *mut btPersistentManifold,
        pt: *mut btManifoldPoint,
    );
}
extern "C" {
    /// @todo: get this margin from the current physics / collision environment
    #[link_name = "\u{1}_ZNK20btPersistentManifold27getContactBreakingThresholdEv"]
    pub fn btPersistentManifold_getContactBreakingThreshold(
        this: *const btPersistentManifold,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20btPersistentManifold13getCacheEntryERK15btManifoldPoint"]
    pub fn btPersistentManifold_getCacheEntry(
        this: *const btPersistentManifold,
        newPoint: *const btManifoldPoint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN20btPersistentManifold16addManifoldPointERK15btManifoldPointb"]
    pub fn btPersistentManifold_addManifoldPoint(
        this: *mut btPersistentManifold,
        newPoint: *const btManifoldPoint,
        isPredictive: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// calculated new worldspace coordinates and depth, and reject points that exceed the collision margin
    #[link_name = "\u{1}_ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_"]
    pub fn btPersistentManifold_refreshContactPoints(
        this: *mut btPersistentManifold,
        trA: *const btTransform,
        trB: *const btTransform,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK20btPersistentManifold28calculateSerializeBufferSizeEv"]
    pub fn btPersistentManifold_calculateSerializeBufferSize(
        this: *const btPersistentManifold,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20btPersistentManifold9serializeEPKS_PvP12btSerializer"]
    pub fn btPersistentManifold_serialize(
        this: *const btPersistentManifold,
        manifold: *const btPersistentManifold,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN20btPersistentManifold11deSerializeEPK30btPersistentManifoldDoubleData"]
    pub fn btPersistentManifold_deSerialize(
        this: *mut btPersistentManifold,
        manifoldDataPtr: *const btPersistentManifoldDoubleData,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20btPersistentManifold11deSerializeEPK29btPersistentManifoldFloatData"]
    pub fn btPersistentManifold_deSerialize1(
        this: *mut btPersistentManifold,
        manifoldDataPtr: *const btPersistentManifoldFloatData,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20btPersistentManifoldC1Ev"]
    pub fn btPersistentManifold_btPersistentManifold(this: *mut btPersistentManifold);
}
impl btPersistentManifold {
    #[inline]
    pub unsafe fn clearUserCache(&mut self, pt: *mut btManifoldPoint) {
        btPersistentManifold_clearUserCache(self, pt)
    }
    #[inline]
    pub unsafe fn getContactBreakingThreshold(&self) -> btScalar {
        btPersistentManifold_getContactBreakingThreshold(self)
    }
    #[inline]
    pub unsafe fn getCacheEntry(&self, newPoint: *const btManifoldPoint) -> ::std::os::raw::c_int {
        btPersistentManifold_getCacheEntry(self, newPoint)
    }
    #[inline]
    pub unsafe fn addManifoldPoint(
        &mut self,
        newPoint: *const btManifoldPoint,
        isPredictive: bool,
    ) -> ::std::os::raw::c_int {
        btPersistentManifold_addManifoldPoint(self, newPoint, isPredictive)
    }
    #[inline]
    pub unsafe fn refreshContactPoints(
        &mut self,
        trA: *const btTransform,
        trB: *const btTransform,
    ) {
        btPersistentManifold_refreshContactPoints(self, trA, trB)
    }
    #[inline]
    pub unsafe fn calculateSerializeBufferSize(&self) -> ::std::os::raw::c_int {
        btPersistentManifold_calculateSerializeBufferSize(self)
    }
    #[inline]
    pub unsafe fn serialize(
        &self,
        manifold: *const btPersistentManifold,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char {
        btPersistentManifold_serialize(self, manifold, dataBuffer, serializer)
    }
    #[inline]
    pub unsafe fn deSerialize(&mut self, manifoldDataPtr: *const btPersistentManifoldDoubleData) {
        btPersistentManifold_deSerialize(self, manifoldDataPtr)
    }
    #[inline]
    pub unsafe fn deSerialize1(&mut self, manifoldDataPtr: *const btPersistentManifoldFloatData) {
        btPersistentManifold_deSerialize1(self, manifoldDataPtr)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btPersistentManifold_btPersistentManifold(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btPersistentManifoldDoubleData {
    pub m_pointCacheLocalPointA: [btVector3DoubleData; 4usize],
    pub m_pointCacheLocalPointB: [btVector3DoubleData; 4usize],
    pub m_pointCachePositionWorldOnA: [btVector3DoubleData; 4usize],
    pub m_pointCachePositionWorldOnB: [btVector3DoubleData; 4usize],
    pub m_pointCacheNormalWorldOnB: [btVector3DoubleData; 4usize],
    pub m_pointCacheLateralFrictionDir1: [btVector3DoubleData; 4usize],
    pub m_pointCacheLateralFrictionDir2: [btVector3DoubleData; 4usize],
    pub m_pointCacheDistance: [f64; 4usize],
    pub m_pointCacheAppliedImpulse: [f64; 4usize],
    pub m_pointCacheCombinedFriction: [f64; 4usize],
    pub m_pointCacheCombinedRollingFriction: [f64; 4usize],
    pub m_pointCacheCombinedSpinningFriction: [f64; 4usize],
    pub m_pointCacheCombinedRestitution: [f64; 4usize],
    pub m_pointCachePartId0: [::std::os::raw::c_int; 4usize],
    pub m_pointCachePartId1: [::std::os::raw::c_int; 4usize],
    pub m_pointCacheIndex0: [::std::os::raw::c_int; 4usize],
    pub m_pointCacheIndex1: [::std::os::raw::c_int; 4usize],
    pub m_pointCacheContactPointFlags: [::std::os::raw::c_int; 4usize],
    pub m_pointCacheAppliedImpulseLateral1: [f64; 4usize],
    pub m_pointCacheAppliedImpulseLateral2: [f64; 4usize],
    pub m_pointCacheContactMotion1: [f64; 4usize],
    pub m_pointCacheContactMotion2: [f64; 4usize],
    pub m_pointCacheContactCFM: [f64; 4usize],
    pub m_pointCacheCombinedContactStiffness1: [f64; 4usize],
    pub m_pointCacheContactERP: [f64; 4usize],
    pub m_pointCacheCombinedContactDamping1: [f64; 4usize],
    pub m_pointCacheFrictionCFM: [f64; 4usize],
    pub m_pointCacheLifeTime: [::std::os::raw::c_int; 4usize],
    pub m_numCachedPoints: ::std::os::raw::c_int,
    pub m_companionIdA: ::std::os::raw::c_int,
    pub m_companionIdB: ::std::os::raw::c_int,
    pub m_index1a: ::std::os::raw::c_int,
    pub m_objectType: ::std::os::raw::c_int,
    pub m_contactBreakingThreshold: f64,
    pub m_contactProcessingThreshold: f64,
    pub m_padding: ::std::os::raw::c_int,
    pub m_body0: *mut btCollisionObjectDoubleData,
    pub m_body1: *mut btCollisionObjectDoubleData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btPersistentManifoldFloatData {
    pub m_pointCacheLocalPointA: [btVector3FloatData; 4usize],
    pub m_pointCacheLocalPointB: [btVector3FloatData; 4usize],
    pub m_pointCachePositionWorldOnA: [btVector3FloatData; 4usize],
    pub m_pointCachePositionWorldOnB: [btVector3FloatData; 4usize],
    pub m_pointCacheNormalWorldOnB: [btVector3FloatData; 4usize],
    pub m_pointCacheLateralFrictionDir1: [btVector3FloatData; 4usize],
    pub m_pointCacheLateralFrictionDir2: [btVector3FloatData; 4usize],
    pub m_pointCacheDistance: [f32; 4usize],
    pub m_pointCacheAppliedImpulse: [f32; 4usize],
    pub m_pointCacheCombinedFriction: [f32; 4usize],
    pub m_pointCacheCombinedRollingFriction: [f32; 4usize],
    pub m_pointCacheCombinedSpinningFriction: [f32; 4usize],
    pub m_pointCacheCombinedRestitution: [f32; 4usize],
    pub m_pointCachePartId0: [::std::os::raw::c_int; 4usize],
    pub m_pointCachePartId1: [::std::os::raw::c_int; 4usize],
    pub m_pointCacheIndex0: [::std::os::raw::c_int; 4usize],
    pub m_pointCacheIndex1: [::std::os::raw::c_int; 4usize],
    pub m_pointCacheContactPointFlags: [::std::os::raw::c_int; 4usize],
    pub m_pointCacheAppliedImpulseLateral1: [f32; 4usize],
    pub m_pointCacheAppliedImpulseLateral2: [f32; 4usize],
    pub m_pointCacheContactMotion1: [f32; 4usize],
    pub m_pointCacheContactMotion2: [f32; 4usize],
    pub m_pointCacheContactCFM: [f32; 4usize],
    pub m_pointCacheCombinedContactStiffness1: [f32; 4usize],
    pub m_pointCacheContactERP: [f32; 4usize],
    pub m_pointCacheCombinedContactDamping1: [f32; 4usize],
    pub m_pointCacheFrictionCFM: [f32; 4usize],
    pub m_pointCacheLifeTime: [::std::os::raw::c_int; 4usize],
    pub m_numCachedPoints: ::std::os::raw::c_int,
    pub m_companionIdA: ::std::os::raw::c_int,
    pub m_companionIdB: ::std::os::raw::c_int,
    pub m_index1a: ::std::os::raw::c_int,
    pub m_objectType: ::std::os::raw::c_int,
    pub m_contactBreakingThreshold: f32,
    pub m_contactProcessingThreshold: f32,
    pub m_padding: ::std::os::raw::c_int,
    pub m_body0: *mut btCollisionObjectFloatData,
    pub m_body1: *mut btCollisionObjectFloatData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCollisionObjectWrapper {
    pub m_parent: *const btCollisionObjectWrapper,
    pub m_shape: *const btCollisionShape,
    pub m_collisionObject: *const btCollisionObject,
    pub m_worldTransform: *const btTransform,
    pub m_partId: ::std::os::raw::c_int,
    pub m_index: ::std::os::raw::c_int,
}
#[repr(C)]
pub struct btMotionState__bindgen_vtable(::std::os::raw::c_void);
/// The btMotionState interface class allows the dynamics world to synchronize and interpolate the updated world transforms with graphics
/// For optimizations, potentially only moving objects get synchronized (using setWorldPosition/setWorldOrientation)
#[repr(C)]
#[derive(Debug)]
pub struct btMotionState {
    pub vtable_: *const btMotionState__bindgen_vtable,
}
pub type btCollisionObjectArray = btAlignedObjectArray<*mut btCollisionObject>;
#[repr(C)]
pub struct btCollisionObject__bindgen_vtable(::std::os::raw::c_void);
/// btCollisionObject can be used to manage collision detection objects.
/// btCollisionObject maintains all information that is needed for a collision detection: Shape, Transform and AABB proxy.
/// They can be added to the btCollisionWorld.
#[repr(C)]
#[derive(Debug)]
pub struct btCollisionObject {
    pub vtable_: *const btCollisionObject__bindgen_vtable,
    pub m_worldTransform: btTransform,
    /// m_interpolationWorldTransform is used for CCD and interpolation
    /// ///it can be either previous or future (predicted) transform
    pub m_interpolationWorldTransform: btTransform,
    pub m_interpolationLinearVelocity: btVector3,
    pub m_interpolationAngularVelocity: btVector3,
    pub m_anisotropicFriction: btVector3,
    pub m_hasAnisotropicFriction: ::std::os::raw::c_int,
    pub m_contactProcessingThreshold: btScalar,
    pub m_broadphaseHandle: *mut btBroadphaseProxy,
    pub m_collisionShape: *mut btCollisionShape,
    /// m_extensionPointer is used by some internal low-level Bullet extensions.
    pub m_extensionPointer: *mut ::std::os::raw::c_void,
    /// m_rootCollisionShape is temporarily used to store the original collision shape
    /// ///The m_collisionShape might be temporarily replaced by a child collision shape during collision detection purposes
    /// ///If it is NULL, the m_collisionShape is not temporarily replaced.
    pub m_rootCollisionShape: *mut btCollisionShape,
    pub m_collisionFlags: ::std::os::raw::c_int,
    pub m_islandTag1: ::std::os::raw::c_int,
    pub m_companionId: ::std::os::raw::c_int,
    pub m_worldArrayIndex: ::std::os::raw::c_int,
    pub m_activationState1: ::std::os::raw::c_int,
    pub m_deactivationTime: btScalar,
    pub m_friction: btScalar,
    pub m_restitution: btScalar,
    pub m_rollingFriction: btScalar,
    pub m_spinningFriction: btScalar,
    pub m_contactDamping: btScalar,
    pub m_contactStiffness: btScalar,
    /// m_internalType is reserved to distinguish Bullet's btCollisionObject, btRigidBody, btSoftBody, btGhostObject etc.
    /// ///do not assign your own m_internalType unless you write a new dynamics object class.
    pub m_internalType: ::std::os::raw::c_int,
    /// users can point to their objects, m_userPointer is not used by Bullet, see setUserPointer/getUserPointer
    pub m_userObjectPointer: *mut ::std::os::raw::c_void,
    pub m_userIndex2: ::std::os::raw::c_int,
    pub m_userIndex: ::std::os::raw::c_int,
    /// time of impact calculation
    pub m_hitFraction: btScalar,
    /// Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
    pub m_ccdSweptSphereRadius: btScalar,
    /// Don't do continuous collision detection if the motion (in one step) is less then m_ccdMotionThreshold
    pub m_ccdMotionThreshold: btScalar,
    /// If some object should have elaborate collision filtering by sub-classes
    pub m_checkCollideWith: ::std::os::raw::c_int,
    pub m_objectsWithoutCollisionCheck: btAlignedObjectArray<*const btCollisionObject>,
    /// internal update revision number. It will be increased when the object changes. This allows some subsystems to perform lazy evaluation.
    pub m_updateRevision: ::std::os::raw::c_int,
    pub m_customDebugColorRGB: btVector3,
}
pub const btCollisionObject_CollisionFlags_CF_STATIC_OBJECT: btCollisionObject_CollisionFlags = 1;
pub const btCollisionObject_CollisionFlags_CF_KINEMATIC_OBJECT: btCollisionObject_CollisionFlags =
    2;
pub const btCollisionObject_CollisionFlags_CF_NO_CONTACT_RESPONSE:
    btCollisionObject_CollisionFlags = 4;
pub const btCollisionObject_CollisionFlags_CF_CUSTOM_MATERIAL_CALLBACK:
    btCollisionObject_CollisionFlags = 8;
pub const btCollisionObject_CollisionFlags_CF_CHARACTER_OBJECT: btCollisionObject_CollisionFlags =
    16;
pub const btCollisionObject_CollisionFlags_CF_DISABLE_VISUALIZE_OBJECT:
    btCollisionObject_CollisionFlags = 32;
pub const btCollisionObject_CollisionFlags_CF_DISABLE_SPU_COLLISION_PROCESSING:
    btCollisionObject_CollisionFlags = 64;
pub const btCollisionObject_CollisionFlags_CF_HAS_CONTACT_STIFFNESS_DAMPING:
    btCollisionObject_CollisionFlags = 128;
pub const btCollisionObject_CollisionFlags_CF_HAS_CUSTOM_DEBUG_RENDERING_COLOR:
    btCollisionObject_CollisionFlags = 256;
pub const btCollisionObject_CollisionFlags_CF_HAS_FRICTION_ANCHOR:
    btCollisionObject_CollisionFlags = 512;
pub const btCollisionObject_CollisionFlags_CF_HAS_COLLISION_SOUND_TRIGGER:
    btCollisionObject_CollisionFlags = 1024;
pub type btCollisionObject_CollisionFlags = u32;
pub const btCollisionObject_CollisionObjectTypes_CO_COLLISION_OBJECT:
    btCollisionObject_CollisionObjectTypes = 1;
pub const btCollisionObject_CollisionObjectTypes_CO_RIGID_BODY:
    btCollisionObject_CollisionObjectTypes = 2;
/// CO_GHOST_OBJECT keeps track of all objects overlapping its AABB and that pass its collision filter
/// ///It is useful for collision sensors, explosion objects, character controller etc.
pub const btCollisionObject_CollisionObjectTypes_CO_GHOST_OBJECT:
    btCollisionObject_CollisionObjectTypes = 4;
/// CO_GHOST_OBJECT keeps track of all objects overlapping its AABB and that pass its collision filter
/// ///It is useful for collision sensors, explosion objects, character controller etc.
pub const btCollisionObject_CollisionObjectTypes_CO_SOFT_BODY:
    btCollisionObject_CollisionObjectTypes = 8;
/// CO_GHOST_OBJECT keeps track of all objects overlapping its AABB and that pass its collision filter
/// ///It is useful for collision sensors, explosion objects, character controller etc.
pub const btCollisionObject_CollisionObjectTypes_CO_HF_FLUID:
    btCollisionObject_CollisionObjectTypes = 16;
/// CO_GHOST_OBJECT keeps track of all objects overlapping its AABB and that pass its collision filter
/// ///It is useful for collision sensors, explosion objects, character controller etc.
pub const btCollisionObject_CollisionObjectTypes_CO_USER_TYPE:
    btCollisionObject_CollisionObjectTypes = 32;
/// CO_GHOST_OBJECT keeps track of all objects overlapping its AABB and that pass its collision filter
/// ///It is useful for collision sensors, explosion objects, character controller etc.
pub const btCollisionObject_CollisionObjectTypes_CO_FEATHERSTONE_LINK:
    btCollisionObject_CollisionObjectTypes = 64;
pub type btCollisionObject_CollisionObjectTypes = u32;
pub const btCollisionObject_AnisotropicFrictionFlags_CF_ANISOTROPIC_FRICTION_DISABLED:
    btCollisionObject_AnisotropicFrictionFlags = 0;
pub const btCollisionObject_AnisotropicFrictionFlags_CF_ANISOTROPIC_FRICTION:
    btCollisionObject_AnisotropicFrictionFlags = 1;
pub const btCollisionObject_AnisotropicFrictionFlags_CF_ANISOTROPIC_ROLLING_FRICTION:
    btCollisionObject_AnisotropicFrictionFlags = 2;
pub type btCollisionObject_AnisotropicFrictionFlags = u32;
extern "C" {
    #[link_name = "\u{1}_ZNK17btCollisionObject18setActivationStateEi"]
    pub fn btCollisionObject_setActivationState(
        this: *const btCollisionObject,
        newState: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btCollisionObject20forceActivationStateEi"]
    pub fn btCollisionObject_forceActivationState(
        this: *const btCollisionObject,
        newState: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btCollisionObject8activateEb"]
    pub fn btCollisionObject_activate(this: *const btCollisionObject, forceActivation: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN17btCollisionObjectC1Ev"]
    pub fn btCollisionObject_btCollisionObject(this: *mut btCollisionObject);
}
impl btCollisionObject {
    #[inline]
    pub unsafe fn setActivationState(&self, newState: ::std::os::raw::c_int) {
        btCollisionObject_setActivationState(self, newState)
    }
    #[inline]
    pub unsafe fn forceActivationState(&self, newState: ::std::os::raw::c_int) {
        btCollisionObject_forceActivationState(self, newState)
    }
    #[inline]
    pub unsafe fn activate(&self, forceActivation: bool) {
        btCollisionObject_activate(self, forceActivation)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btCollisionObject_btCollisionObject(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN17btCollisionObjectD1Ev"]
    pub fn btCollisionObject_btCollisionObject_destructor(this: *mut btCollisionObject);
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btCollisionObject28calculateSerializeBufferSizeEv"]
    pub fn btCollisionObject_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK17btCollisionObject9serializeEPvP12btSerializer"]
    pub fn btCollisionObject_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btCollisionObject21serializeSingleObjectEP12btSerializer"]
    pub fn btCollisionObject_serializeSingleObject(
        this: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    );
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCollisionObjectDoubleData {
    pub m_broadphaseHandle: *mut ::std::os::raw::c_void,
    pub m_collisionShape: *mut ::std::os::raw::c_void,
    pub m_rootCollisionShape: *mut btCollisionShapeData,
    pub m_name: *mut ::std::os::raw::c_char,
    pub m_worldTransform: btTransformDoubleData,
    pub m_interpolationWorldTransform: btTransformDoubleData,
    pub m_interpolationLinearVelocity: btVector3DoubleData,
    pub m_interpolationAngularVelocity: btVector3DoubleData,
    pub m_anisotropicFriction: btVector3DoubleData,
    pub m_contactProcessingThreshold: f64,
    pub m_deactivationTime: f64,
    pub m_friction: f64,
    pub m_rollingFriction: f64,
    pub m_contactDamping: f64,
    pub m_contactStiffness: f64,
    pub m_restitution: f64,
    pub m_hitFraction: f64,
    pub m_ccdSweptSphereRadius: f64,
    pub m_ccdMotionThreshold: f64,
    pub m_hasAnisotropicFriction: ::std::os::raw::c_int,
    pub m_collisionFlags: ::std::os::raw::c_int,
    pub m_islandTag1: ::std::os::raw::c_int,
    pub m_companionId: ::std::os::raw::c_int,
    pub m_activationState1: ::std::os::raw::c_int,
    pub m_internalType: ::std::os::raw::c_int,
    pub m_checkCollideWith: ::std::os::raw::c_int,
    pub m_collisionFilterGroup: ::std::os::raw::c_int,
    pub m_collisionFilterMask: ::std::os::raw::c_int,
    pub m_uniqueId: ::std::os::raw::c_int,
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCollisionObjectFloatData {
    pub m_broadphaseHandle: *mut ::std::os::raw::c_void,
    pub m_collisionShape: *mut ::std::os::raw::c_void,
    pub m_rootCollisionShape: *mut btCollisionShapeData,
    pub m_name: *mut ::std::os::raw::c_char,
    pub m_worldTransform: btTransformFloatData,
    pub m_interpolationWorldTransform: btTransformFloatData,
    pub m_interpolationLinearVelocity: btVector3FloatData,
    pub m_interpolationAngularVelocity: btVector3FloatData,
    pub m_anisotropicFriction: btVector3FloatData,
    pub m_contactProcessingThreshold: f32,
    pub m_deactivationTime: f32,
    pub m_friction: f32,
    pub m_rollingFriction: f32,
    pub m_contactDamping: f32,
    pub m_contactStiffness: f32,
    pub m_restitution: f32,
    pub m_hitFraction: f32,
    pub m_ccdSweptSphereRadius: f32,
    pub m_ccdMotionThreshold: f32,
    pub m_hasAnisotropicFriction: ::std::os::raw::c_int,
    pub m_collisionFlags: ::std::os::raw::c_int,
    pub m_islandTag1: ::std::os::raw::c_int,
    pub m_companionId: ::std::os::raw::c_int,
    pub m_activationState1: ::std::os::raw::c_int,
    pub m_internalType: ::std::os::raw::c_int,
    pub m_checkCollideWith: ::std::os::raw::c_int,
    pub m_collisionFilterGroup: ::std::os::raw::c_int,
    pub m_collisionFilterMask: ::std::os::raw::c_int,
    pub m_uniqueId: ::std::os::raw::c_int,
}
/// btManifoldResult is a helper class to manage  contact results.
#[repr(C)]
#[derive(Debug)]
pub struct btManifoldResult {
    pub _base: btDiscreteCollisionDetectorInterface_Result,
    pub m_manifoldPtr: *mut btPersistentManifold,
    pub m_body0Wrap: *const btCollisionObjectWrapper,
    pub m_body1Wrap: *const btCollisionObjectWrapper,
    pub m_partId0: ::std::os::raw::c_int,
    pub m_partId1: ::std::os::raw::c_int,
    pub m_index0: ::std::os::raw::c_int,
    pub m_index1: ::std::os::raw::c_int,
    pub m_closestPointDistanceThreshold: btScalar,
}
extern "C" {
    /// in the future we can let the user override the methods to combine restitution and friction
    #[link_name = "\u{1}_ZN16btManifoldResult28calculateCombinedRestitutionEPK17btCollisionObjectS2_"]
    pub fn btManifoldResult_calculateCombinedRestitution(
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btManifoldResult25calculateCombinedFrictionEPK17btCollisionObjectS2_"]
    pub fn btManifoldResult_calculateCombinedFriction(
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btManifoldResult32calculateCombinedRollingFrictionEPK17btCollisionObjectS2_"]
    pub fn btManifoldResult_calculateCombinedRollingFriction(
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btManifoldResult33calculateCombinedSpinningFrictionEPK17btCollisionObjectS2_"]
    pub fn btManifoldResult_calculateCombinedSpinningFriction(
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btManifoldResult31calculateCombinedContactDampingEPK17btCollisionObjectS2_"]
    pub fn btManifoldResult_calculateCombinedContactDamping(
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btManifoldResult33calculateCombinedContactStiffnessEPK17btCollisionObjectS2_"]
    pub fn btManifoldResult_calculateCombinedContactStiffness(
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btManifoldResultC1EPK24btCollisionObjectWrapperS2_"]
    pub fn btManifoldResult_btManifoldResult(
        this: *mut btManifoldResult,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
    );
}
impl btManifoldResult {
    #[inline]
    pub unsafe fn calculateCombinedRestitution(
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> btScalar {
        btManifoldResult_calculateCombinedRestitution(body0, body1)
    }
    #[inline]
    pub unsafe fn calculateCombinedFriction(
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> btScalar {
        btManifoldResult_calculateCombinedFriction(body0, body1)
    }
    #[inline]
    pub unsafe fn calculateCombinedRollingFriction(
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> btScalar {
        btManifoldResult_calculateCombinedRollingFriction(body0, body1)
    }
    #[inline]
    pub unsafe fn calculateCombinedSpinningFriction(
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> btScalar {
        btManifoldResult_calculateCombinedSpinningFriction(body0, body1)
    }
    #[inline]
    pub unsafe fn calculateCombinedContactDamping(
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> btScalar {
        btManifoldResult_calculateCombinedContactDamping(body0, body1)
    }
    #[inline]
    pub unsafe fn calculateCombinedContactStiffness(
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> btScalar {
        btManifoldResult_calculateCombinedContactStiffness(body0, body1)
    }
    #[inline]
    pub unsafe fn new(
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btManifoldResult_btManifoldResult(&mut __bindgen_tmp, body0Wrap, body1Wrap);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN16btManifoldResult15addContactPointERK9btVector3S2_f"]
    pub fn btManifoldResult_addContactPoint(
        this: *mut ::std::os::raw::c_void,
        normalOnBInWorld: *const btVector3,
        pointInWorld: *const btVector3,
        depth: btScalar,
    );
}
/// user can override this nearcallback for collision filtering and more finegrained control over collision detection
pub type btNearCallback = ::std::option::Option<
    unsafe extern "C" fn(
        collisionPair: *mut btBroadphasePair,
        dispatcher: *mut btCollisionDispatcher,
        dispatchInfo: *const btDispatcherInfo,
    ),
>;
/// btCollisionDispatcher supports algorithms that handle ConvexConvex and ConvexConcave collision pairs.
/// Time of Impact, Closest Points and Penetration Depth.
#[repr(C)]
pub struct btCollisionDispatcher {
    pub _base: btDispatcher,
    pub m_dispatcherFlags: ::std::os::raw::c_int,
    pub m_manifoldsPtr: btAlignedObjectArray<*mut btPersistentManifold>,
    pub m_defaultManifoldResult: btManifoldResult,
    pub m_nearCallback: btNearCallback,
    pub m_collisionAlgorithmPoolAllocator: *mut btPoolAllocator,
    pub m_persistentManifoldPoolAllocator: *mut btPoolAllocator,
    pub m_doubleDispatchContactPoints: [[*mut btCollisionAlgorithmCreateFunc; 36usize]; 36usize],
    pub m_doubleDispatchClosestPoints: [[*mut btCollisionAlgorithmCreateFunc; 36usize]; 36usize],
    pub m_collisionConfiguration: *mut btCollisionConfiguration,
}
pub const btCollisionDispatcher_DispatcherFlags_CD_STATIC_STATIC_REPORTED:
    btCollisionDispatcher_DispatcherFlags = 1;
pub const btCollisionDispatcher_DispatcherFlags_CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD:
    btCollisionDispatcher_DispatcherFlags = 2;
pub const btCollisionDispatcher_DispatcherFlags_CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION:
    btCollisionDispatcher_DispatcherFlags = 4;
pub type btCollisionDispatcher_DispatcherFlags = u32;
extern "C" {
    /// registerCollisionCreateFunc allows registration of custom/alternative collision create functions
    #[link_name = "\u{1}_ZN21btCollisionDispatcher27registerCollisionCreateFuncEiiP30btCollisionAlgorithmCreateFunc"]
    pub fn btCollisionDispatcher_registerCollisionCreateFunc(
        this: *mut btCollisionDispatcher,
        proxyType0: ::std::os::raw::c_int,
        proxyType1: ::std::os::raw::c_int,
        createFunc: *mut btCollisionAlgorithmCreateFunc,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btCollisionDispatcher31registerClosestPointsCreateFuncEiiP30btCollisionAlgorithmCreateFunc"]
    pub fn btCollisionDispatcher_registerClosestPointsCreateFunc(
        this: *mut btCollisionDispatcher,
        proxyType0: ::std::os::raw::c_int,
        proxyType1: ::std::os::raw::c_int,
        createFunc: *mut btCollisionAlgorithmCreateFunc,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btCollisionDispatcher19defaultNearCallbackER16btBroadphasePairRS_RK16btDispatcherInfo"]
    pub fn btCollisionDispatcher_defaultNearCallback(
        collisionPair: *mut btBroadphasePair,
        dispatcher: *mut btCollisionDispatcher,
        dispatchInfo: *const btDispatcherInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btCollisionDispatcherC1EP24btCollisionConfiguration"]
    pub fn btCollisionDispatcher_btCollisionDispatcher(
        this: *mut btCollisionDispatcher,
        collisionConfiguration: *mut btCollisionConfiguration,
    );
}
impl btCollisionDispatcher {
    #[inline]
    pub unsafe fn registerCollisionCreateFunc(
        &mut self,
        proxyType0: ::std::os::raw::c_int,
        proxyType1: ::std::os::raw::c_int,
        createFunc: *mut btCollisionAlgorithmCreateFunc,
    ) {
        btCollisionDispatcher_registerCollisionCreateFunc(self, proxyType0, proxyType1, createFunc)
    }
    #[inline]
    pub unsafe fn registerClosestPointsCreateFunc(
        &mut self,
        proxyType0: ::std::os::raw::c_int,
        proxyType1: ::std::os::raw::c_int,
        createFunc: *mut btCollisionAlgorithmCreateFunc,
    ) {
        btCollisionDispatcher_registerClosestPointsCreateFunc(
            self, proxyType0, proxyType1, createFunc,
        )
    }
    #[inline]
    pub unsafe fn defaultNearCallback(
        collisionPair: *mut btBroadphasePair,
        dispatcher: *mut btCollisionDispatcher,
        dispatchInfo: *const btDispatcherInfo,
    ) {
        btCollisionDispatcher_defaultNearCallback(collisionPair, dispatcher, dispatchInfo)
    }
    #[inline]
    pub unsafe fn new(collisionConfiguration: *mut btCollisionConfiguration) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btCollisionDispatcher_btCollisionDispatcher(&mut __bindgen_tmp, collisionConfiguration);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN21btCollisionDispatcherD1Ev"]
    pub fn btCollisionDispatcher_btCollisionDispatcher_destructor(this: *mut btCollisionDispatcher);
}
extern "C" {
    #[link_name = "\u{1}_ZN21btCollisionDispatcher14getNewManifoldEPK17btCollisionObjectS2_"]
    pub fn btCollisionDispatcher_getNewManifold(
        this: *mut ::std::os::raw::c_void,
        b0: *const btCollisionObject,
        b1: *const btCollisionObject,
    ) -> *mut btPersistentManifold;
}
extern "C" {
    #[link_name = "\u{1}_ZN21btCollisionDispatcher15releaseManifoldEP20btPersistentManifold"]
    pub fn btCollisionDispatcher_releaseManifold(
        this: *mut ::std::os::raw::c_void,
        manifold: *mut btPersistentManifold,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btCollisionDispatcher13clearManifoldEP20btPersistentManifold"]
    pub fn btCollisionDispatcher_clearManifold(
        this: *mut ::std::os::raw::c_void,
        manifold: *mut btPersistentManifold,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btCollisionDispatcher13findAlgorithmEPK24btCollisionObjectWrapperS2_P20btPersistentManifold22ebtDispatcherQueryType"]
    pub fn btCollisionDispatcher_findAlgorithm(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        sharedManifold: *mut btPersistentManifold,
        queryType: ebtDispatcherQueryType,
    ) -> *mut btCollisionAlgorithm;
}
extern "C" {
    #[link_name = "\u{1}_ZN21btCollisionDispatcher14needsCollisionEPK17btCollisionObjectS2_"]
    pub fn btCollisionDispatcher_needsCollision(
        this: *mut ::std::os::raw::c_void,
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN21btCollisionDispatcher13needsResponseEPK17btCollisionObjectS2_"]
    pub fn btCollisionDispatcher_needsResponse(
        this: *mut ::std::os::raw::c_void,
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN21btCollisionDispatcher25dispatchAllCollisionPairsEP22btOverlappingPairCacheRK16btDispatcherInfoP12btDispatcher"]
    pub fn btCollisionDispatcher_dispatchAllCollisionPairs(
        this: *mut ::std::os::raw::c_void,
        pairCache: *mut btOverlappingPairCache,
        dispatchInfo: *const btDispatcherInfo,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btCollisionDispatcher26allocateCollisionAlgorithmEi"]
    pub fn btCollisionDispatcher_allocateCollisionAlgorithm(
        this: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN21btCollisionDispatcher22freeCollisionAlgorithmEPv"]
    pub fn btCollisionDispatcher_freeCollisionAlgorithm(
        this: *mut ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z14btIsMainThreadv"]
    pub fn btIsMainThread() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z19btThreadsAreRunningv"]
    pub fn btThreadsAreRunning() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z23btGetCurrentThreadIndexv"]
    pub fn btGetCurrentThreadIndex() -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_Z25btResetThreadIndexCounterv"]
    pub fn btResetThreadIndexCounter();
}
///
/// btSpinMutex -- lightweight spin-mutex implemented with atomic ops, never puts
/// a thread to sleep because it is designed to be used with a task scheduler
/// which has one thread per core and the threads don't sleep until they
/// run out of tasks. Not good for general purpose use.
///
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSpinMutex {
    pub mLock: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN11btSpinMutex4lockEv"]
    pub fn btSpinMutex_lock(this: *mut btSpinMutex);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btSpinMutex6unlockEv"]
    pub fn btSpinMutex_unlock(this: *mut btSpinMutex);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btSpinMutex7tryLockEv"]
    pub fn btSpinMutex_tryLock(this: *mut btSpinMutex) -> bool;
}
impl btSpinMutex {
    #[inline]
    pub unsafe fn lock(&mut self) {
        btSpinMutex_lock(self)
    }
    #[inline]
    pub unsafe fn unlock(&mut self) {
        btSpinMutex_unlock(self)
    }
    #[inline]
    pub unsafe fn tryLock(&mut self) -> bool {
        btSpinMutex_tryLock(self)
    }
}
#[repr(C)]
pub struct btIParallelForBody__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btIParallelForBody {
    pub vtable_: *const btIParallelForBody__bindgen_vtable,
}
#[repr(C)]
pub struct btIParallelSumBody__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btIParallelSumBody {
    pub vtable_: *const btIParallelSumBody__bindgen_vtable,
}
#[repr(C)]
pub struct btITaskScheduler__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btITaskScheduler {
    pub vtable_: *const btITaskScheduler__bindgen_vtable,
    pub m_name: *const ::std::os::raw::c_char,
    pub m_savedThreadCounter: ::std::os::raw::c_uint,
    pub m_isActive: bool,
}
extern "C" {
    #[link_name = "\u{1}_ZN16btITaskSchedulerC2EPKc"]
    pub fn btITaskScheduler_btITaskScheduler(
        this: *mut btITaskScheduler,
        name: *const ::std::os::raw::c_char,
    );
}
impl btITaskScheduler {
    #[inline]
    pub unsafe fn new(name: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btITaskScheduler_btITaskScheduler(&mut __bindgen_tmp, name);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN16btITaskScheduler8activateEv"]
    pub fn btITaskScheduler_activate(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN16btITaskScheduler10deactivateEv"]
    pub fn btITaskScheduler_deactivate(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_Z18btSetTaskSchedulerP16btITaskScheduler"]
    pub fn btSetTaskScheduler(ts: *mut btITaskScheduler);
}
extern "C" {
    #[link_name = "\u{1}_Z18btGetTaskSchedulerv"]
    pub fn btGetTaskScheduler() -> *mut btITaskScheduler;
}
extern "C" {
    #[link_name = "\u{1}_Z28btGetSequentialTaskSchedulerv"]
    pub fn btGetSequentialTaskScheduler() -> *mut btITaskScheduler;
}
extern "C" {
    #[link_name = "\u{1}_Z28btCreateDefaultTaskSchedulerv"]
    pub fn btCreateDefaultTaskScheduler() -> *mut btITaskScheduler;
}
extern "C" {
    #[link_name = "\u{1}_Z24btGetOpenMPTaskSchedulerv"]
    pub fn btGetOpenMPTaskScheduler() -> *mut btITaskScheduler;
}
extern "C" {
    #[link_name = "\u{1}_Z21btGetTBBTaskSchedulerv"]
    pub fn btGetTBBTaskScheduler() -> *mut btITaskScheduler;
}
extern "C" {
    #[link_name = "\u{1}_Z21btGetPPLTaskSchedulerv"]
    pub fn btGetPPLTaskScheduler() -> *mut btITaskScheduler;
}
extern "C" {
    #[link_name = "\u{1}_Z13btParallelForiiiRK18btIParallelForBody"]
    pub fn btParallelFor(
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        grainSize: ::std::os::raw::c_int,
        body: *const btIParallelForBody,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z13btParallelSumiiiRK18btIParallelSumBody"]
    pub fn btParallelSum(
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        grainSize: ::std::os::raw::c_int,
        body: *const btIParallelSumBody,
    ) -> btScalar;
}
#[repr(C)]
pub struct btCollisionDispatcherMt {
    pub _base: btCollisionDispatcher,
    pub m_batchUpdating: bool,
    pub m_grainSize: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN23btCollisionDispatcherMtC1EP24btCollisionConfigurationi"]
    pub fn btCollisionDispatcherMt_btCollisionDispatcherMt(
        this: *mut btCollisionDispatcherMt,
        config: *mut btCollisionConfiguration,
        grainSize: ::std::os::raw::c_int,
    );
}
impl btCollisionDispatcherMt {
    #[inline]
    pub unsafe fn new(
        config: *mut btCollisionConfiguration,
        grainSize: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btCollisionDispatcherMt_btCollisionDispatcherMt(&mut __bindgen_tmp, config, grainSize);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN23btCollisionDispatcherMt14getNewManifoldEPK17btCollisionObjectS2_"]
    pub fn btCollisionDispatcherMt_getNewManifold(
        this: *mut ::std::os::raw::c_void,
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> *mut btPersistentManifold;
}
extern "C" {
    #[link_name = "\u{1}_ZN23btCollisionDispatcherMt15releaseManifoldEP20btPersistentManifold"]
    pub fn btCollisionDispatcherMt_releaseManifold(
        this: *mut ::std::os::raw::c_void,
        manifold: *mut btPersistentManifold,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btCollisionDispatcherMt25dispatchAllCollisionPairsEP22btOverlappingPairCacheRK16btDispatcherInfoP12btDispatcher"]
    pub fn btCollisionDispatcherMt_dispatchAllCollisionPairs(
        this: *mut ::std::os::raw::c_void,
        pairCache: *mut btOverlappingPairCache,
        info: *const btDispatcherInfo,
        dispatcher: *mut btDispatcher,
    );
}
/// very basic hashable string implementation, compatible with btHashMap
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btHashString {
    pub m_string: *const ::std::os::raw::c_char,
    pub m_hash: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btHashInt {
    pub m_uid: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btHashPtr {
    pub __bindgen_anon_1: btHashPtr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btHashPtr__bindgen_ty_1 {
    pub m_pointer: *const ::std::os::raw::c_void,
    pub m_hashValues: [::std::os::raw::c_uint; 2usize],
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btHashKeyPtr {
    pub m_uid: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btHashKey {
    pub m_uid: ::std::os::raw::c_int,
}
/// The btHashMap template class implements a generic and lightweight hashmap.
/// A basic sample of how to use btHashMap is located in Demos\BasicDemo\main.cpp
#[repr(C)]
#[derive(Debug)]
pub struct btHashMap<Key, Value> {
    pub m_hashTable: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_next: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_valueArray: btAlignedObjectArray<Value>,
    pub m_keyArray: btAlignedObjectArray<Key>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Key>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<Value>>,
}
#[repr(C)]
pub struct btCollisionWorldImporter__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
pub struct btCollisionWorldImporter {
    pub vtable_: *const btCollisionWorldImporter__bindgen_vtable,
    pub m_collisionWorld: *mut btCollisionWorld,
    pub m_verboseMode: ::std::os::raw::c_int,
    pub m_allocatedCollisionShapes: btAlignedObjectArray<*mut btCollisionShape>,
    pub m_allocatedRigidBodies: btAlignedObjectArray<*mut btCollisionObject>,
    pub m_allocatedBvhs: btAlignedObjectArray<*mut btOptimizedBvh>,
    pub m_allocatedTriangleInfoMaps: btAlignedObjectArray<*mut btTriangleInfoMap>,
    pub m_allocatedTriangleIndexArrays: btAlignedObjectArray<*mut btTriangleIndexVertexArray>,
    pub m_allocatedbtStridingMeshInterfaceDatas:
        btAlignedObjectArray<*mut btStridingMeshInterfaceData>,
    pub m_allocatedCollisionObjects: btAlignedObjectArray<*mut btCollisionObject>,
    pub m_allocatedNames: btAlignedObjectArray<*mut ::std::os::raw::c_char>,
    pub m_indexArrays: btAlignedObjectArray<*mut ::std::os::raw::c_int>,
    pub m_shortIndexArrays: btAlignedObjectArray<*mut ::std::os::raw::c_short>,
    pub m_charIndexArrays: btAlignedObjectArray<*mut ::std::os::raw::c_uchar>,
    pub m_floatVertexArrays: btAlignedObjectArray<*mut btVector3FloatData>,
    pub m_doubleVertexArrays: btAlignedObjectArray<*mut btVector3DoubleData>,
    pub m_bvhMap: btHashMap<btHashPtr, *mut btOptimizedBvh>,
    pub m_timMap: btHashMap<btHashPtr, *mut btTriangleInfoMap>,
    pub m_nameShapeMap: btHashMap<btHashString, *mut btCollisionShape>,
    pub m_nameColObjMap: btHashMap<btHashString, *mut btCollisionObject>,
    pub m_objectNameMap: btHashMap<btHashPtr, *const ::std::os::raw::c_char>,
    pub m_shapeMap: btHashMap<btHashPtr, *mut btCollisionShape>,
    pub m_bodyMap: btHashMap<btHashPtr, *mut btCollisionObject>,
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter13duplicateNameEPKc"]
    pub fn btCollisionWorldImporter_duplicateName(
        this: *mut btCollisionWorldImporter,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter21convertCollisionShapeEP20btCollisionShapeData"]
    pub fn btCollisionWorldImporter_convertCollisionShape(
        this: *mut btCollisionWorldImporter,
        shapeData: *mut btCollisionShapeData,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter17convertAllObjectsEP24btBulletSerializedArrays"]
    pub fn btCollisionWorldImporter_convertAllObjects(
        this: *mut btCollisionWorldImporter,
        arrays: *mut btBulletSerializedArrays,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK24btCollisionWorldImporter21getNumCollisionShapesEv"]
    pub fn btCollisionWorldImporter_getNumCollisionShapes(
        this: *const btCollisionWorldImporter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter24getCollisionShapeByIndexEi"]
    pub fn btCollisionWorldImporter_getCollisionShapeByIndex(
        this: *mut btCollisionWorldImporter,
        index: ::std::os::raw::c_int,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZNK24btCollisionWorldImporter17getNumRigidBodiesEv"]
    pub fn btCollisionWorldImporter_getNumRigidBodies(
        this: *const btCollisionWorldImporter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK24btCollisionWorldImporter19getRigidBodyByIndexEi"]
    pub fn btCollisionWorldImporter_getRigidBodyByIndex(
        this: *const btCollisionWorldImporter,
        index: ::std::os::raw::c_int,
    ) -> *mut btCollisionObject;
}
extern "C" {
    #[link_name = "\u{1}_ZNK24btCollisionWorldImporter10getNumBvhsEv"]
    pub fn btCollisionWorldImporter_getNumBvhs(
        this: *const btCollisionWorldImporter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK24btCollisionWorldImporter13getBvhByIndexEi"]
    pub fn btCollisionWorldImporter_getBvhByIndex(
        this: *const btCollisionWorldImporter,
        index: ::std::os::raw::c_int,
    ) -> *mut btOptimizedBvh;
}
extern "C" {
    #[link_name = "\u{1}_ZNK24btCollisionWorldImporter22getNumTriangleInfoMapsEv"]
    pub fn btCollisionWorldImporter_getNumTriangleInfoMaps(
        this: *const btCollisionWorldImporter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK24btCollisionWorldImporter25getTriangleInfoMapByIndexEi"]
    pub fn btCollisionWorldImporter_getTriangleInfoMapByIndex(
        this: *const btCollisionWorldImporter,
        index: ::std::os::raw::c_int,
    ) -> *mut btTriangleInfoMap;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter23getCollisionShapeByNameEPKc"]
    pub fn btCollisionWorldImporter_getCollisionShapeByName(
        this: *mut btCollisionWorldImporter,
        name: *const ::std::os::raw::c_char,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter24getCollisionObjectByNameEPKc"]
    pub fn btCollisionWorldImporter_getCollisionObjectByName(
        this: *mut btCollisionWorldImporter,
        name: *const ::std::os::raw::c_char,
    ) -> *mut btCollisionObject;
}
extern "C" {
    #[link_name = "\u{1}_ZNK24btCollisionWorldImporter17getNameForPointerEPKv"]
    pub fn btCollisionWorldImporter_getNameForPointer(
        this: *const btCollisionWorldImporter,
        ptr: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporterC1EP16btCollisionWorld"]
    pub fn btCollisionWorldImporter_btCollisionWorldImporter(
        this: *mut btCollisionWorldImporter,
        world: *mut btCollisionWorld,
    );
}
impl btCollisionWorldImporter {
    #[inline]
    pub unsafe fn duplicateName(
        &mut self,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        btCollisionWorldImporter_duplicateName(self, name)
    }
    #[inline]
    pub unsafe fn convertCollisionShape(
        &mut self,
        shapeData: *mut btCollisionShapeData,
    ) -> *mut btCollisionShape {
        btCollisionWorldImporter_convertCollisionShape(self, shapeData)
    }
    #[inline]
    pub unsafe fn convertAllObjects(&mut self, arrays: *mut btBulletSerializedArrays) -> bool {
        btCollisionWorldImporter_convertAllObjects(self, arrays)
    }
    #[inline]
    pub unsafe fn getNumCollisionShapes(&self) -> ::std::os::raw::c_int {
        btCollisionWorldImporter_getNumCollisionShapes(self)
    }
    #[inline]
    pub unsafe fn getCollisionShapeByIndex(
        &mut self,
        index: ::std::os::raw::c_int,
    ) -> *mut btCollisionShape {
        btCollisionWorldImporter_getCollisionShapeByIndex(self, index)
    }
    #[inline]
    pub unsafe fn getNumRigidBodies(&self) -> ::std::os::raw::c_int {
        btCollisionWorldImporter_getNumRigidBodies(self)
    }
    #[inline]
    pub unsafe fn getRigidBodyByIndex(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *mut btCollisionObject {
        btCollisionWorldImporter_getRigidBodyByIndex(self, index)
    }
    #[inline]
    pub unsafe fn getNumBvhs(&self) -> ::std::os::raw::c_int {
        btCollisionWorldImporter_getNumBvhs(self)
    }
    #[inline]
    pub unsafe fn getBvhByIndex(&self, index: ::std::os::raw::c_int) -> *mut btOptimizedBvh {
        btCollisionWorldImporter_getBvhByIndex(self, index)
    }
    #[inline]
    pub unsafe fn getNumTriangleInfoMaps(&self) -> ::std::os::raw::c_int {
        btCollisionWorldImporter_getNumTriangleInfoMaps(self)
    }
    #[inline]
    pub unsafe fn getTriangleInfoMapByIndex(
        &self,
        index: ::std::os::raw::c_int,
    ) -> *mut btTriangleInfoMap {
        btCollisionWorldImporter_getTriangleInfoMapByIndex(self, index)
    }
    #[inline]
    pub unsafe fn getCollisionShapeByName(
        &mut self,
        name: *const ::std::os::raw::c_char,
    ) -> *mut btCollisionShape {
        btCollisionWorldImporter_getCollisionShapeByName(self, name)
    }
    #[inline]
    pub unsafe fn getCollisionObjectByName(
        &mut self,
        name: *const ::std::os::raw::c_char,
    ) -> *mut btCollisionObject {
        btCollisionWorldImporter_getCollisionObjectByName(self, name)
    }
    #[inline]
    pub unsafe fn getNameForPointer(
        &self,
        ptr: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char {
        btCollisionWorldImporter_getNameForPointer(self, ptr)
    }
    #[inline]
    pub unsafe fn new(world: *mut btCollisionWorld) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btCollisionWorldImporter_btCollisionWorldImporter(&mut __bindgen_tmp, world);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporterD1Ev"]
    pub fn btCollisionWorldImporter_btCollisionWorldImporter_destructor(
        this: *mut btCollisionWorldImporter,
    );
}
extern "C" {
    /// delete all memory collision shapes, rigid bodies, constraints etc. allocated during the load.
    /// ///make sure you don't use the dynamics world containing objects after you call this method
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter13deleteAllDataEv"]
    pub fn btCollisionWorldImporter_deleteAllData(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    /// those virtuals are called by load and can be overridden by the user
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter21createCollisionObjectERK11btTransformP16btCollisionShapePKc"]
    pub fn btCollisionWorldImporter_createCollisionObject(
        this: *mut ::std::os::raw::c_void,
        startTransform: *const btTransform,
        shape: *mut btCollisionShape,
        bodyName: *const ::std::os::raw::c_char,
    ) -> *mut btCollisionObject;
}
extern "C" {
    /// shapes
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter16createPlaneShapeERK9btVector3f"]
    pub fn btCollisionWorldImporter_createPlaneShape(
        this: *mut ::std::os::raw::c_void,
        planeNormal: *const btVector3,
        planeConstant: btScalar,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter14createBoxShapeERK9btVector3"]
    pub fn btCollisionWorldImporter_createBoxShape(
        this: *mut ::std::os::raw::c_void,
        halfExtents: *const btVector3,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter17createSphereShapeEf"]
    pub fn btCollisionWorldImporter_createSphereShape(
        this: *mut ::std::os::raw::c_void,
        radius: btScalar,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter19createCapsuleShapeXEff"]
    pub fn btCollisionWorldImporter_createCapsuleShapeX(
        this: *mut ::std::os::raw::c_void,
        radius: btScalar,
        height: btScalar,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter19createCapsuleShapeYEff"]
    pub fn btCollisionWorldImporter_createCapsuleShapeY(
        this: *mut ::std::os::raw::c_void,
        radius: btScalar,
        height: btScalar,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter19createCapsuleShapeZEff"]
    pub fn btCollisionWorldImporter_createCapsuleShapeZ(
        this: *mut ::std::os::raw::c_void,
        radius: btScalar,
        height: btScalar,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter20createCylinderShapeXEff"]
    pub fn btCollisionWorldImporter_createCylinderShapeX(
        this: *mut ::std::os::raw::c_void,
        radius: btScalar,
        height: btScalar,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter20createCylinderShapeYEff"]
    pub fn btCollisionWorldImporter_createCylinderShapeY(
        this: *mut ::std::os::raw::c_void,
        radius: btScalar,
        height: btScalar,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter20createCylinderShapeZEff"]
    pub fn btCollisionWorldImporter_createCylinderShapeZ(
        this: *mut ::std::os::raw::c_void,
        radius: btScalar,
        height: btScalar,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter16createConeShapeXEff"]
    pub fn btCollisionWorldImporter_createConeShapeX(
        this: *mut ::std::os::raw::c_void,
        radius: btScalar,
        height: btScalar,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter16createConeShapeYEff"]
    pub fn btCollisionWorldImporter_createConeShapeY(
        this: *mut ::std::os::raw::c_void,
        radius: btScalar,
        height: btScalar,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter16createConeShapeZEff"]
    pub fn btCollisionWorldImporter_createConeShapeZ(
        this: *mut ::std::os::raw::c_void,
        radius: btScalar,
        height: btScalar,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter27createTriangleMeshContainerEv"]
    pub fn btCollisionWorldImporter_createTriangleMeshContainer(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut btTriangleIndexVertexArray;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter26createBvhTriangleMeshShapeEP23btStridingMeshInterfaceP14btOptimizedBvh"]
    pub fn btCollisionWorldImporter_createBvhTriangleMeshShape(
        this: *mut ::std::os::raw::c_void,
        trimesh: *mut btStridingMeshInterface,
        bvh: *mut btOptimizedBvh,
    ) -> *mut btBvhTriangleMeshShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter29createConvexTriangleMeshShapeEP23btStridingMeshInterface"]
    pub fn btCollisionWorldImporter_createConvexTriangleMeshShape(
        this: *mut ::std::os::raw::c_void,
        trimesh: *mut btStridingMeshInterface,
    ) -> *mut btCollisionShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter31createStridingMeshInterfaceDataEP27btStridingMeshInterfaceData"]
    pub fn btCollisionWorldImporter_createStridingMeshInterfaceData(
        this: *mut ::std::os::raw::c_void,
        interfaceData: *mut btStridingMeshInterfaceData,
    ) -> *mut btStridingMeshInterfaceData;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter21createConvexHullShapeEv"]
    pub fn btCollisionWorldImporter_createConvexHullShape(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut btConvexHullShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter19createCompoundShapeEv"]
    pub fn btCollisionWorldImporter_createCompoundShape(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut btCompoundShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter28createScaledTrangleMeshShapeEP22btBvhTriangleMeshShapeRK9btVector3"]
    pub fn btCollisionWorldImporter_createScaledTrangleMeshShape(
        this: *mut ::std::os::raw::c_void,
        meshShape: *mut btBvhTriangleMeshShape,
        localScalingbtBvhTriangleMeshShape: *const btVector3,
    ) -> *mut btScaledBvhTriangleMeshShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter22createMultiSphereShapeEPK9btVector3PKfi"]
    pub fn btCollisionWorldImporter_createMultiSphereShape(
        this: *mut ::std::os::raw::c_void,
        positions: *const btVector3,
        radi: *const btScalar,
        numSpheres: ::std::os::raw::c_int,
    ) -> *mut btMultiSphereShape;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter19createMeshInterfaceER27btStridingMeshInterfaceData"]
    pub fn btCollisionWorldImporter_createMeshInterface(
        this: *mut ::std::os::raw::c_void,
        meshData: *mut btStridingMeshInterfaceData,
    ) -> *mut btTriangleIndexVertexArray;
}
extern "C" {
    /// acceleration and connectivity structures
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter18createOptimizedBvhEv"]
    pub fn btCollisionWorldImporter_createOptimizedBvh(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut btOptimizedBvh;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btCollisionWorldImporter21createTriangleInfoMapEv"]
    pub fn btCollisionWorldImporter_createTriangleInfoMap(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut btTriangleInfoMap;
}
#[repr(C)]
pub struct btBroadphaseAabbCallback__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btBroadphaseAabbCallback {
    pub vtable_: *const btBroadphaseAabbCallback__bindgen_vtable,
}
#[repr(C)]
#[derive(Debug)]
pub struct btBroadphaseRayCallback {
    pub _base: btBroadphaseAabbCallback,
    /// added some cached data to accelerate ray-AABB tests
    pub m_rayDirectionInverse: btVector3,
    pub m_signs: [::std::os::raw::c_uint; 3usize],
    pub m_lambda_max: btScalar,
}
#[repr(C)]
pub struct btBroadphaseInterface__bindgen_vtable(::std::os::raw::c_void);
/// The btBroadphaseInterface class provides an interface to detect aabb-overlapping object pairs.
/// Some implementations for this broadphase interface include btAxisSweep3, bt32BitAxisSweep3 and btDbvtBroadphase.
/// The actual overlapping pair management, storage, adding and removing of pairs is dealt by the btOverlappingPairCache class.
#[repr(C)]
#[derive(Debug)]
pub struct btBroadphaseInterface {
    pub vtable_: *const btBroadphaseInterface__bindgen_vtable,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btDbvtAabbMm {
    pub mi: btVector3,
    pub mx: btVector3,
}
pub type btDbvtVolume = btDbvtAabbMm;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btDbvtNode {
    pub volume: btDbvtVolume,
    pub parent: *mut btDbvtNode,
    pub __bindgen_anon_1: btDbvtNode__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btDbvtNode__bindgen_ty_1 {
    pub childs: [*mut btDbvtNode; 2usize],
    pub data: *mut ::std::os::raw::c_void,
    pub dataAsInt: ::std::os::raw::c_int,
    _bindgen_union_align: [u64; 2usize],
}
pub type btNodeStack = btAlignedObjectArray<*const btDbvtNode>;
/// The btDbvt class implements a fast dynamic bounding volume tree based on axis aligned bounding boxes (aabb tree).
/// This btDbvt is used for soft body collision detection and for the btDbvtBroadphase. It has a fast insert, remove and update of nodes.
/// Unlike the btQuantizedBvh, nodes can be dynamically moved around, which allows for change in topology of the underlying data structure.
#[repr(C)]
#[derive(Debug)]
pub struct btDbvt {
    pub m_root: *mut btDbvtNode,
    pub m_free: *mut btDbvtNode,
    pub m_lkhd: ::std::os::raw::c_int,
    pub m_leaves: ::std::os::raw::c_int,
    pub m_opath: ::std::os::raw::c_uint,
    pub m_stkStack: btAlignedObjectArray<btDbvt_sStkNN>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btDbvt_sStkNN {
    pub a: *const btDbvtNode,
    pub b: *const btDbvtNode,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btDbvt_sStkNP {
    pub node: *const btDbvtNode,
    pub mask: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btDbvt_sStkNPS {
    pub node: *const btDbvtNode,
    pub mask: ::std::os::raw::c_int,
    pub value: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btDbvt_sStkCLN {
    pub node: *const btDbvtNode,
    pub parent: *mut btDbvtNode,
}
#[repr(C)]
pub struct btDbvt_ICollide__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btDbvt_ICollide {
    pub vtable_: *const btDbvt_ICollide__bindgen_vtable,
}
#[repr(C)]
pub struct btDbvt_IWriter__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btDbvt_IWriter {
    pub vtable_: *const btDbvt_IWriter__bindgen_vtable,
}
#[repr(C)]
pub struct btDbvt_IClone__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btDbvt_IClone {
    pub vtable_: *const btDbvt_IClone__bindgen_vtable,
}
pub const btDbvt_SIMPLE_STACKSIZE: btDbvt__bindgen_ty_1 = 64;
pub const btDbvt_DOUBLE_STACKSIZE: btDbvt__bindgen_ty_1 = 128;
pub type btDbvt__bindgen_ty_1 = u32;
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt5clearEv"]
    pub fn btDbvt_clear(this: *mut btDbvt);
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt16optimizeBottomUpEv"]
    pub fn btDbvt_optimizeBottomUp(this: *mut btDbvt);
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt15optimizeTopDownEi"]
    pub fn btDbvt_optimizeTopDown(this: *mut btDbvt, bu_treshold: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt19optimizeIncrementalEi"]
    pub fn btDbvt_optimizeIncremental(this: *mut btDbvt, passes: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt6insertERK12btDbvtAabbMmPv"]
    pub fn btDbvt_insert(
        this: *mut btDbvt,
        box_: *const btDbvtVolume,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut btDbvtNode;
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt6updateEP10btDbvtNodei"]
    pub fn btDbvt_update(
        this: *mut btDbvt,
        leaf: *mut btDbvtNode,
        lookahead: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMm"]
    pub fn btDbvt_update1(this: *mut btDbvt, leaf: *mut btDbvtNode, volume: *mut btDbvtVolume);
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMmRK9btVector3f"]
    pub fn btDbvt_update2(
        this: *mut btDbvt,
        leaf: *mut btDbvtNode,
        volume: *mut btDbvtVolume,
        velocity: *const btVector3,
        margin: btScalar,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMmRK9btVector3"]
    pub fn btDbvt_update3(
        this: *mut btDbvt,
        leaf: *mut btDbvtNode,
        volume: *mut btDbvtVolume,
        velocity: *const btVector3,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMmf"]
    pub fn btDbvt_update4(
        this: *mut btDbvt,
        leaf: *mut btDbvtNode,
        volume: *mut btDbvtVolume,
        margin: btScalar,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt6removeEP10btDbvtNode"]
    pub fn btDbvt_remove(this: *mut btDbvt, leaf: *mut btDbvtNode);
}
extern "C" {
    #[link_name = "\u{1}_ZNK6btDbvt5writeEPNS_7IWriterE"]
    pub fn btDbvt_write(this: *const btDbvt, iwriter: *mut btDbvt_IWriter);
}
extern "C" {
    #[link_name = "\u{1}_ZNK6btDbvt5cloneERS_PNS_6ICloneE"]
    pub fn btDbvt_clone(this: *const btDbvt, dest: *mut btDbvt, iclone: *mut btDbvt_IClone);
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt8maxdepthEPK10btDbvtNode"]
    pub fn btDbvt_maxdepth(node: *const btDbvtNode) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt11countLeavesEPK10btDbvtNode"]
    pub fn btDbvt_countLeaves(node: *const btDbvtNode) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt13extractLeavesEPK10btDbvtNodeR20btAlignedObjectArrayIS2_E"]
    pub fn btDbvt_extractLeaves(
        node: *const btDbvtNode,
        leaves: *mut btAlignedObjectArray<*const btDbvtNode>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt9enumNodesEPK10btDbvtNodeRNS_8ICollideE"]
    pub fn btDbvt_enumNodes(root: *const btDbvtNode, policy: *mut btDbvt_ICollide);
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt10enumLeavesEPK10btDbvtNodeRNS_8ICollideE"]
    pub fn btDbvt_enumLeaves(root: *const btDbvtNode, policy: *mut btDbvt_ICollide);
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE"]
    pub fn btDbvt_collideTT(
        this: *mut btDbvt,
        root0: *const btDbvtNode,
        root1: *const btDbvtNode,
        policy: *mut btDbvt_ICollide,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt24collideTTpersistentStackEPK10btDbvtNodeS2_RNS_8ICollideE"]
    pub fn btDbvt_collideTTpersistentStack(
        this: *mut btDbvt,
        root0: *const btDbvtNode,
        root1: *const btDbvtNode,
        policy: *mut btDbvt_ICollide,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE"]
    pub fn btDbvt_collideTV(
        this: *const btDbvt,
        root: *const btDbvtNode,
        volume: *const btDbvtVolume,
        policy: *mut btDbvt_ICollide,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK6btDbvt21collideTVNoStackAllocEPK10btDbvtNodeRK12btDbvtAabbMmR20btAlignedObjectArrayIS2_ERNS_8ICollideE"]
    pub fn btDbvt_collideTVNoStackAlloc(
        this: *const btDbvt,
        root: *const btDbvtNode,
        volume: *const btDbvtVolume,
        stack: *mut btNodeStack,
        policy: *mut btDbvt_ICollide,
    );
}
extern "C" {
    /// rayTest is a re-entrant ray test, and can be called in parallel as long as the btAlignedAlloc is thread-safe (uses locking etc)
    /// ///rayTest is slower than rayTestInternal, because it builds a local stack, using memory allocations, and it recomputes signs/rayDirectionInverses each time
    #[link_name = "\u{1}_ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE"]
    pub fn btDbvt_rayTest(
        root: *const btDbvtNode,
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
        policy: *mut btDbvt_ICollide,
    );
}
extern "C" {
    /// rayTestInternal is faster than rayTest, because it uses a persistent stack (to reduce dynamic memory allocations to a minimum) and it uses precomputed signs/rayInverseDirections
    /// ///rayTestInternal is used by btDbvtBroadphase to accelerate world ray casts
    #[link_name = "\u{1}_ZNK6btDbvt15rayTestInternalEPK10btDbvtNodeRK9btVector3S5_S5_PjfS5_S5_R20btAlignedObjectArrayIS2_ERNS_8ICollideE"]
    pub fn btDbvt_rayTestInternal(
        this: *const btDbvt,
        root: *const btDbvtNode,
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
        rayDirectionInverse: *const btVector3,
        signs: *mut ::std::os::raw::c_uint,
        lambda_max: btScalar,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
        stack: *mut btAlignedObjectArray<*const btDbvtNode>,
        policy: *mut btDbvt_ICollide,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt11collideKDOPEPK10btDbvtNodePK9btVector3PKfiRNS_8ICollideE"]
    pub fn btDbvt_collideKDOP(
        root: *const btDbvtNode,
        normals: *const btVector3,
        offsets: *const btScalar,
        count: ::std::os::raw::c_int,
        policy: *mut btDbvt_ICollide,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt10collideOCLEPK10btDbvtNodePK9btVector3PKfRS4_iRNS_8ICollideEb"]
    pub fn btDbvt_collideOCL(
        root: *const btDbvtNode,
        normals: *const btVector3,
        offsets: *const btScalar,
        sortaxis: *const btVector3,
        count: ::std::os::raw::c_int,
        policy: *mut btDbvt_ICollide,
        fullsort: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvt9collideTUEPK10btDbvtNodeRNS_8ICollideE"]
    pub fn btDbvt_collideTU(root: *const btDbvtNode, policy: *mut btDbvt_ICollide);
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvtC1Ev"]
    pub fn btDbvt_btDbvt(this: *mut btDbvt);
}
extern "C" {
    #[link_name = "\u{1}_ZN6btDbvtD1Ev"]
    pub fn btDbvt_btDbvt_destructor(this: *mut btDbvt);
}
impl btDbvt {
    #[inline]
    pub unsafe fn clear(&mut self) {
        btDbvt_clear(self)
    }
    #[inline]
    pub unsafe fn optimizeBottomUp(&mut self) {
        btDbvt_optimizeBottomUp(self)
    }
    #[inline]
    pub unsafe fn optimizeTopDown(&mut self, bu_treshold: ::std::os::raw::c_int) {
        btDbvt_optimizeTopDown(self, bu_treshold)
    }
    #[inline]
    pub unsafe fn optimizeIncremental(&mut self, passes: ::std::os::raw::c_int) {
        btDbvt_optimizeIncremental(self, passes)
    }
    #[inline]
    pub unsafe fn insert(
        &mut self,
        box_: *const btDbvtVolume,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut btDbvtNode {
        btDbvt_insert(self, box_, data)
    }
    #[inline]
    pub unsafe fn update(&mut self, leaf: *mut btDbvtNode, lookahead: ::std::os::raw::c_int) {
        btDbvt_update(self, leaf, lookahead)
    }
    #[inline]
    pub unsafe fn update1(&mut self, leaf: *mut btDbvtNode, volume: *mut btDbvtVolume) {
        btDbvt_update1(self, leaf, volume)
    }
    #[inline]
    pub unsafe fn update2(
        &mut self,
        leaf: *mut btDbvtNode,
        volume: *mut btDbvtVolume,
        velocity: *const btVector3,
        margin: btScalar,
    ) -> bool {
        btDbvt_update2(self, leaf, volume, velocity, margin)
    }
    #[inline]
    pub unsafe fn update3(
        &mut self,
        leaf: *mut btDbvtNode,
        volume: *mut btDbvtVolume,
        velocity: *const btVector3,
    ) -> bool {
        btDbvt_update3(self, leaf, volume, velocity)
    }
    #[inline]
    pub unsafe fn update4(
        &mut self,
        leaf: *mut btDbvtNode,
        volume: *mut btDbvtVolume,
        margin: btScalar,
    ) -> bool {
        btDbvt_update4(self, leaf, volume, margin)
    }
    #[inline]
    pub unsafe fn remove(&mut self, leaf: *mut btDbvtNode) {
        btDbvt_remove(self, leaf)
    }
    #[inline]
    pub unsafe fn write(&self, iwriter: *mut btDbvt_IWriter) {
        btDbvt_write(self, iwriter)
    }
    #[inline]
    pub unsafe fn clone(&self, dest: *mut btDbvt, iclone: *mut btDbvt_IClone) {
        btDbvt_clone(self, dest, iclone)
    }
    #[inline]
    pub unsafe fn maxdepth(node: *const btDbvtNode) -> ::std::os::raw::c_int {
        btDbvt_maxdepth(node)
    }
    #[inline]
    pub unsafe fn countLeaves(node: *const btDbvtNode) -> ::std::os::raw::c_int {
        btDbvt_countLeaves(node)
    }
    #[inline]
    pub unsafe fn extractLeaves(
        node: *const btDbvtNode,
        leaves: *mut btAlignedObjectArray<*const btDbvtNode>,
    ) {
        btDbvt_extractLeaves(node, leaves)
    }
    #[inline]
    pub unsafe fn enumNodes(root: *const btDbvtNode, policy: *mut btDbvt_ICollide) {
        btDbvt_enumNodes(root, policy)
    }
    #[inline]
    pub unsafe fn enumLeaves(root: *const btDbvtNode, policy: *mut btDbvt_ICollide) {
        btDbvt_enumLeaves(root, policy)
    }
    #[inline]
    pub unsafe fn collideTT(
        &mut self,
        root0: *const btDbvtNode,
        root1: *const btDbvtNode,
        policy: *mut btDbvt_ICollide,
    ) {
        btDbvt_collideTT(self, root0, root1, policy)
    }
    #[inline]
    pub unsafe fn collideTTpersistentStack(
        &mut self,
        root0: *const btDbvtNode,
        root1: *const btDbvtNode,
        policy: *mut btDbvt_ICollide,
    ) {
        btDbvt_collideTTpersistentStack(self, root0, root1, policy)
    }
    #[inline]
    pub unsafe fn collideTV(
        &self,
        root: *const btDbvtNode,
        volume: *const btDbvtVolume,
        policy: *mut btDbvt_ICollide,
    ) {
        btDbvt_collideTV(self, root, volume, policy)
    }
    #[inline]
    pub unsafe fn collideTVNoStackAlloc(
        &self,
        root: *const btDbvtNode,
        volume: *const btDbvtVolume,
        stack: *mut btNodeStack,
        policy: *mut btDbvt_ICollide,
    ) {
        btDbvt_collideTVNoStackAlloc(self, root, volume, stack, policy)
    }
    #[inline]
    pub unsafe fn rayTest(
        root: *const btDbvtNode,
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
        policy: *mut btDbvt_ICollide,
    ) {
        btDbvt_rayTest(root, rayFrom, rayTo, policy)
    }
    #[inline]
    pub unsafe fn rayTestInternal(
        &self,
        root: *const btDbvtNode,
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
        rayDirectionInverse: *const btVector3,
        signs: *mut ::std::os::raw::c_uint,
        lambda_max: btScalar,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
        stack: *mut btAlignedObjectArray<*const btDbvtNode>,
        policy: *mut btDbvt_ICollide,
    ) {
        btDbvt_rayTestInternal(
            self,
            root,
            rayFrom,
            rayTo,
            rayDirectionInverse,
            signs,
            lambda_max,
            aabbMin,
            aabbMax,
            stack,
            policy,
        )
    }
    #[inline]
    pub unsafe fn collideKDOP(
        root: *const btDbvtNode,
        normals: *const btVector3,
        offsets: *const btScalar,
        count: ::std::os::raw::c_int,
        policy: *mut btDbvt_ICollide,
    ) {
        btDbvt_collideKDOP(root, normals, offsets, count, policy)
    }
    #[inline]
    pub unsafe fn collideOCL(
        root: *const btDbvtNode,
        normals: *const btVector3,
        offsets: *const btScalar,
        sortaxis: *const btVector3,
        count: ::std::os::raw::c_int,
        policy: *mut btDbvt_ICollide,
        fullsort: bool,
    ) {
        btDbvt_collideOCL(root, normals, offsets, sortaxis, count, policy, fullsort)
    }
    #[inline]
    pub unsafe fn collideTU(root: *const btDbvtNode, policy: *mut btDbvt_ICollide) {
        btDbvt_collideTU(root, policy)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btDbvt_btDbvt(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        btDbvt_btDbvt_destructor(self)
    }
}
pub type btShapePairCallback = ::std::option::Option<
    unsafe extern "C" fn(pShape0: *const btCollisionShape, pShape1: *const btCollisionShape)
        -> bool,
>;
/// btCompoundCollisionAlgorithm  supports collision between CompoundCollisionShapes and other collision shapes
#[repr(C)]
#[derive(Debug)]
pub struct btCompoundCollisionAlgorithm {
    pub _base: btActivatingCollisionAlgorithm,
    pub stack2: btNodeStack,
    pub manifoldArray: btManifoldArray,
    pub m_childCollisionAlgorithms: btAlignedObjectArray<*mut btCollisionAlgorithm>,
    pub m_isSwapped: bool,
    pub m_sharedManifold: *mut btPersistentManifold,
    pub m_ownsManifold: bool,
    pub m_compoundShapeRevision: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct btCompoundCollisionAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
#[repr(C)]
#[derive(Debug)]
pub struct btCompoundCollisionAlgorithm_SwappedCreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
extern "C" {
    #[link_name = "\u{1}_ZN28btCompoundCollisionAlgorithm21removeChildAlgorithmsEv"]
    pub fn btCompoundCollisionAlgorithm_removeChildAlgorithms(
        this: *mut btCompoundCollisionAlgorithm,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btCompoundCollisionAlgorithm26preallocateChildAlgorithmsEPK24btCollisionObjectWrapperS2_"]
    pub fn btCompoundCollisionAlgorithm_preallocateChildAlgorithms(
        this: *mut btCompoundCollisionAlgorithm,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btCompoundCollisionAlgorithmC1ERK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_b"]
    pub fn btCompoundCollisionAlgorithm_btCompoundCollisionAlgorithm(
        this: *mut btCompoundCollisionAlgorithm,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    );
}
impl btCompoundCollisionAlgorithm {
    #[inline]
    pub unsafe fn removeChildAlgorithms(&mut self) {
        btCompoundCollisionAlgorithm_removeChildAlgorithms(self)
    }
    #[inline]
    pub unsafe fn preallocateChildAlgorithms(
        &mut self,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
    ) {
        btCompoundCollisionAlgorithm_preallocateChildAlgorithms(self, body0Wrap, body1Wrap)
    }
    #[inline]
    pub unsafe fn new(
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btCompoundCollisionAlgorithm_btCompoundCollisionAlgorithm(
            &mut __bindgen_tmp,
            ci,
            body0Wrap,
            body1Wrap,
            isSwapped,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN28btCompoundCollisionAlgorithmD1Ev"]
    pub fn btCompoundCollisionAlgorithm_btCompoundCollisionAlgorithm_destructor(
        this: *mut btCompoundCollisionAlgorithm,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btCompoundCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btCompoundCollisionAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btCompoundCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btCompoundCollisionAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btSimplePair {
    pub m_indexA: ::std::os::raw::c_int,
    pub m_indexB: ::std::os::raw::c_int,
    pub __bindgen_anon_1: btSimplePair__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btSimplePair__bindgen_ty_1 {
    pub m_userPointer: *mut ::std::os::raw::c_void,
    pub m_userValue: ::std::os::raw::c_int,
    _bindgen_union_align: u64,
}
pub type btSimplePairArray = btAlignedObjectArray<btSimplePair>;
#[repr(C)]
pub struct btHashedSimplePairCache__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
pub struct btHashedSimplePairCache {
    pub vtable_: *const btHashedSimplePairCache__bindgen_vtable,
    pub m_overlappingPairArray: btSimplePairArray,
    pub m_hashTable: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_next: btAlignedObjectArray<::std::os::raw::c_int>,
}
extern "C" {
    #[link_name = "\u{1}_ZN23btHashedSimplePairCache14removeAllPairsEv"]
    pub fn btHashedSimplePairCache_removeAllPairs(this: *mut btHashedSimplePairCache);
}
extern "C" {
    #[link_name = "\u{1}_ZN23btHashedSimplePairCache8findPairEii"]
    pub fn btHashedSimplePairCache_findPair(
        this: *mut btHashedSimplePairCache,
        indexA: ::std::os::raw::c_int,
        indexB: ::std::os::raw::c_int,
    ) -> *mut btSimplePair;
}
extern "C" {
    #[link_name = "\u{1}_ZN23btHashedSimplePairCacheC1Ev"]
    pub fn btHashedSimplePairCache_btHashedSimplePairCache(this: *mut btHashedSimplePairCache);
}
impl btHashedSimplePairCache {
    #[inline]
    pub unsafe fn removeAllPairs(&mut self) {
        btHashedSimplePairCache_removeAllPairs(self)
    }
    #[inline]
    pub unsafe fn findPair(
        &mut self,
        indexA: ::std::os::raw::c_int,
        indexB: ::std::os::raw::c_int,
    ) -> *mut btSimplePair {
        btHashedSimplePairCache_findPair(self, indexA, indexB)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btHashedSimplePairCache_btHashedSimplePairCache(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN23btHashedSimplePairCacheD1Ev"]
    pub fn btHashedSimplePairCache_btHashedSimplePairCache_destructor(
        this: *mut btHashedSimplePairCache,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btHashedSimplePairCache21removeOverlappingPairEii"]
    pub fn btHashedSimplePairCache_removeOverlappingPair(
        this: *mut ::std::os::raw::c_void,
        indexA: ::std::os::raw::c_int,
        indexB: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
/// btCompoundCompoundCollisionAlgorithm  supports collision between two btCompoundCollisionShape shapes
#[repr(C)]
pub struct btCompoundCompoundCollisionAlgorithm {
    pub _base: btCompoundCollisionAlgorithm,
    pub m_childCollisionAlgorithmCache: *mut btHashedSimplePairCache,
    pub m_removePairs: btSimplePairArray,
    pub m_compoundShapeRevision0: ::std::os::raw::c_int,
    pub m_compoundShapeRevision1: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct btCompoundCompoundCollisionAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
#[repr(C)]
#[derive(Debug)]
pub struct btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
extern "C" {
    #[link_name = "\u{1}_ZN36btCompoundCompoundCollisionAlgorithmC1ERK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_b"]
    pub fn btCompoundCompoundCollisionAlgorithm_btCompoundCompoundCollisionAlgorithm(
        this: *mut btCompoundCompoundCollisionAlgorithm,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    );
}
impl btCompoundCompoundCollisionAlgorithm {
    #[inline]
    pub unsafe fn new(
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btCompoundCompoundCollisionAlgorithm_btCompoundCompoundCollisionAlgorithm(
            &mut __bindgen_tmp,
            ci,
            body0Wrap,
            body1Wrap,
            isSwapped,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN36btCompoundCompoundCollisionAlgorithmD1Ev"]
    pub fn btCompoundCompoundCollisionAlgorithm_btCompoundCompoundCollisionAlgorithm_destructor(
        this: *mut btCompoundCompoundCollisionAlgorithm,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN36btCompoundCompoundCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btCompoundCompoundCollisionAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN36btCompoundCompoundCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btCompoundCompoundCollisionAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN36btCompoundCompoundCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE"]
    pub fn btCompoundCompoundCollisionAlgorithm_getAllContactManifolds(
        this: *mut ::std::os::raw::c_void,
        manifoldArray: *mut btManifoldArray,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btUsageBitfield {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: u8,
    pub __bindgen_align: [u16; 0usize],
}
impl btUsageBitfield {
    #[inline]
    pub fn usedVertexA(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_usedVertexA(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usedVertexB(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_usedVertexB(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usedVertexC(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_usedVertexC(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usedVertexD(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_usedVertexD(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_unused1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_unused2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_unused3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused4(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_unused4(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        usedVertexA: ::std::os::raw::c_ushort,
        usedVertexB: ::std::os::raw::c_ushort,
        usedVertexC: ::std::os::raw::c_ushort,
        usedVertexD: ::std::os::raw::c_ushort,
        unused1: ::std::os::raw::c_ushort,
        unused2: ::std::os::raw::c_ushort,
        unused3: ::std::os::raw::c_ushort,
        unused4: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let usedVertexA: u16 = unsafe { ::std::mem::transmute(usedVertexA) };
            usedVertexA as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let usedVertexB: u16 = unsafe { ::std::mem::transmute(usedVertexB) };
            usedVertexB as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let usedVertexC: u16 = unsafe { ::std::mem::transmute(usedVertexC) };
            usedVertexC as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let usedVertexD: u16 = unsafe { ::std::mem::transmute(usedVertexD) };
            usedVertexD as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let unused1: u16 = unsafe { ::std::mem::transmute(unused1) };
            unused1 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let unused2: u16 = unsafe { ::std::mem::transmute(unused2) };
            unused2 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let unused3: u16 = unsafe { ::std::mem::transmute(unused3) };
            unused3 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let unused4: u16 = unsafe { ::std::mem::transmute(unused4) };
            unused4 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSubSimplexClosestResult {
    pub m_closestPointOnSimplex: btVector3,
    pub m_usedVertices: btUsageBitfield,
    pub m_barycentricCoords: [btScalar; 4usize],
    pub m_degenerate: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btVoronoiSimplexSolver {
    pub m_numVertices: ::std::os::raw::c_int,
    pub m_simplexVectorW: [btVector3; 5usize],
    pub m_simplexPointsP: [btVector3; 5usize],
    pub m_simplexPointsQ: [btVector3; 5usize],
    pub m_cachedP1: btVector3,
    pub m_cachedP2: btVector3,
    pub m_cachedV: btVector3,
    pub m_lastW: btVector3,
    pub m_equalVertexThreshold: btScalar,
    pub m_cachedValidClosest: bool,
    pub m_cachedBC: btSubSimplexClosestResult,
    pub m_needsUpdate: bool,
}
extern "C" {
    #[link_name = "\u{1}_ZN22btVoronoiSimplexSolver12removeVertexEi"]
    pub fn btVoronoiSimplexSolver_removeVertex(
        this: *mut btVoronoiSimplexSolver,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN22btVoronoiSimplexSolver14reduceVerticesERK15btUsageBitfield"]
    pub fn btVoronoiSimplexSolver_reduceVertices(
        this: *mut btVoronoiSimplexSolver,
        usedVerts: *const btUsageBitfield,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN22btVoronoiSimplexSolver28updateClosestVectorAndPointsEv"]
    pub fn btVoronoiSimplexSolver_updateClosestVectorAndPoints(
        this: *mut btVoronoiSimplexSolver,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN22btVoronoiSimplexSolver25closestPtPointTetrahedronERK9btVector3S2_S2_S2_S2_R25btSubSimplexClosestResult"]
    pub fn btVoronoiSimplexSolver_closestPtPointTetrahedron(
        this: *mut btVoronoiSimplexSolver,
        p: *const btVector3,
        a: *const btVector3,
        b: *const btVector3,
        c: *const btVector3,
        d: *const btVector3,
        finalResult: *mut btSubSimplexClosestResult,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN22btVoronoiSimplexSolver19pointOutsideOfPlaneERK9btVector3S2_S2_S2_S2_"]
    pub fn btVoronoiSimplexSolver_pointOutsideOfPlane(
        this: *mut btVoronoiSimplexSolver,
        p: *const btVector3,
        a: *const btVector3,
        b: *const btVector3,
        c: *const btVector3,
        d: *const btVector3,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN22btVoronoiSimplexSolver22closestPtPointTriangleERK9btVector3S2_S2_S2_R25btSubSimplexClosestResult"]
    pub fn btVoronoiSimplexSolver_closestPtPointTriangle(
        this: *mut btVoronoiSimplexSolver,
        p: *const btVector3,
        a: *const btVector3,
        b: *const btVector3,
        c: *const btVector3,
        result: *mut btSubSimplexClosestResult,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN22btVoronoiSimplexSolver5resetEv"]
    pub fn btVoronoiSimplexSolver_reset(this: *mut btVoronoiSimplexSolver);
}
extern "C" {
    #[link_name = "\u{1}_ZN22btVoronoiSimplexSolver9addVertexERK9btVector3S2_S2_"]
    pub fn btVoronoiSimplexSolver_addVertex(
        this: *mut btVoronoiSimplexSolver,
        w: *const btVector3,
        p: *const btVector3,
        q: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN22btVoronoiSimplexSolver7closestER9btVector3"]
    pub fn btVoronoiSimplexSolver_closest(
        this: *mut btVoronoiSimplexSolver,
        v: *mut btVector3,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN22btVoronoiSimplexSolver9maxVertexEv"]
    pub fn btVoronoiSimplexSolver_maxVertex(this: *mut btVoronoiSimplexSolver) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK22btVoronoiSimplexSolver10getSimplexEP9btVector3S1_S1_"]
    pub fn btVoronoiSimplexSolver_getSimplex(
        this: *const btVoronoiSimplexSolver,
        pBuf: *mut btVector3,
        qBuf: *mut btVector3,
        yBuf: *mut btVector3,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN22btVoronoiSimplexSolver9inSimplexERK9btVector3"]
    pub fn btVoronoiSimplexSolver_inSimplex(
        this: *mut btVoronoiSimplexSolver,
        w: *const btVector3,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN22btVoronoiSimplexSolver14backup_closestER9btVector3"]
    pub fn btVoronoiSimplexSolver_backup_closest(
        this: *mut btVoronoiSimplexSolver,
        v: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK22btVoronoiSimplexSolver12emptySimplexEv"]
    pub fn btVoronoiSimplexSolver_emptySimplex(this: *const btVoronoiSimplexSolver) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN22btVoronoiSimplexSolver14compute_pointsER9btVector3S1_"]
    pub fn btVoronoiSimplexSolver_compute_points(
        this: *mut btVoronoiSimplexSolver,
        p1: *mut btVector3,
        p2: *mut btVector3,
    );
}
impl btVoronoiSimplexSolver {
    #[inline]
    pub unsafe fn removeVertex(&mut self, index: ::std::os::raw::c_int) {
        btVoronoiSimplexSolver_removeVertex(self, index)
    }
    #[inline]
    pub unsafe fn reduceVertices(&mut self, usedVerts: *const btUsageBitfield) {
        btVoronoiSimplexSolver_reduceVertices(self, usedVerts)
    }
    #[inline]
    pub unsafe fn updateClosestVectorAndPoints(&mut self) -> bool {
        btVoronoiSimplexSolver_updateClosestVectorAndPoints(self)
    }
    #[inline]
    pub unsafe fn closestPtPointTetrahedron(
        &mut self,
        p: *const btVector3,
        a: *const btVector3,
        b: *const btVector3,
        c: *const btVector3,
        d: *const btVector3,
        finalResult: *mut btSubSimplexClosestResult,
    ) -> bool {
        btVoronoiSimplexSolver_closestPtPointTetrahedron(self, p, a, b, c, d, finalResult)
    }
    #[inline]
    pub unsafe fn pointOutsideOfPlane(
        &mut self,
        p: *const btVector3,
        a: *const btVector3,
        b: *const btVector3,
        c: *const btVector3,
        d: *const btVector3,
    ) -> ::std::os::raw::c_int {
        btVoronoiSimplexSolver_pointOutsideOfPlane(self, p, a, b, c, d)
    }
    #[inline]
    pub unsafe fn closestPtPointTriangle(
        &mut self,
        p: *const btVector3,
        a: *const btVector3,
        b: *const btVector3,
        c: *const btVector3,
        result: *mut btSubSimplexClosestResult,
    ) -> bool {
        btVoronoiSimplexSolver_closestPtPointTriangle(self, p, a, b, c, result)
    }
    #[inline]
    pub unsafe fn reset(&mut self) {
        btVoronoiSimplexSolver_reset(self)
    }
    #[inline]
    pub unsafe fn addVertex(
        &mut self,
        w: *const btVector3,
        p: *const btVector3,
        q: *const btVector3,
    ) {
        btVoronoiSimplexSolver_addVertex(self, w, p, q)
    }
    #[inline]
    pub unsafe fn closest(&mut self, v: *mut btVector3) -> bool {
        btVoronoiSimplexSolver_closest(self, v)
    }
    #[inline]
    pub unsafe fn maxVertex(&mut self) -> btScalar {
        btVoronoiSimplexSolver_maxVertex(self)
    }
    #[inline]
    pub unsafe fn getSimplex(
        &self,
        pBuf: *mut btVector3,
        qBuf: *mut btVector3,
        yBuf: *mut btVector3,
    ) -> ::std::os::raw::c_int {
        btVoronoiSimplexSolver_getSimplex(self, pBuf, qBuf, yBuf)
    }
    #[inline]
    pub unsafe fn inSimplex(&mut self, w: *const btVector3) -> bool {
        btVoronoiSimplexSolver_inSimplex(self, w)
    }
    #[inline]
    pub unsafe fn backup_closest(&mut self, v: *mut btVector3) {
        btVoronoiSimplexSolver_backup_closest(self, v)
    }
    #[inline]
    pub unsafe fn emptySimplex(&self) -> bool {
        btVoronoiSimplexSolver_emptySimplex(self)
    }
    #[inline]
    pub unsafe fn compute_points(&mut self, p1: *mut btVector3, p2: *mut btVector3) {
        btVoronoiSimplexSolver_compute_points(self, p1, p2)
    }
}
/// btGjkPairDetector uses GJK to implement the btDiscreteCollisionDetectorInterface
#[repr(C)]
#[derive(Debug)]
pub struct btGjkPairDetector {
    pub _base: btDiscreteCollisionDetectorInterface,
    pub m_cachedSeparatingAxis: btVector3,
    pub m_penetrationDepthSolver: *mut btConvexPenetrationDepthSolver,
    pub m_simplexSolver: *mut btVoronoiSimplexSolver,
    pub m_minkowskiA: *const btConvexShape,
    pub m_minkowskiB: *const btConvexShape,
    pub m_shapeTypeA: ::std::os::raw::c_int,
    pub m_shapeTypeB: ::std::os::raw::c_int,
    pub m_marginA: btScalar,
    pub m_marginB: btScalar,
    pub m_ignoreMargin: bool,
    pub m_cachedSeparatingDistance: btScalar,
    pub m_lastUsedMethod: ::std::os::raw::c_int,
    pub m_curIter: ::std::os::raw::c_int,
    pub m_degenerateSimplex: ::std::os::raw::c_int,
    pub m_catchDegeneracies: ::std::os::raw::c_int,
    pub m_fixContactNormalDirection: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN17btGjkPairDetector26getClosestPointsNonVirtualERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDraw"]
    pub fn btGjkPairDetector_getClosestPointsNonVirtual(
        this: *mut btGjkPairDetector,
        input: *const btDiscreteCollisionDetectorInterface_ClosestPointInput,
        output: *mut btDiscreteCollisionDetectorInterface_Result,
        debugDraw: *mut btIDebugDraw,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btGjkPairDetectorC1EPK13btConvexShapeS2_P22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolver"]
    pub fn btGjkPairDetector_btGjkPairDetector(
        this: *mut btGjkPairDetector,
        objectA: *const btConvexShape,
        objectB: *const btConvexShape,
        simplexSolver: *mut btVoronoiSimplexSolver,
        penetrationDepthSolver: *mut btConvexPenetrationDepthSolver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btGjkPairDetectorC1EPK13btConvexShapeS2_iiffP22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolver"]
    pub fn btGjkPairDetector_btGjkPairDetector1(
        this: *mut btGjkPairDetector,
        objectA: *const btConvexShape,
        objectB: *const btConvexShape,
        shapeTypeA: ::std::os::raw::c_int,
        shapeTypeB: ::std::os::raw::c_int,
        marginA: btScalar,
        marginB: btScalar,
        simplexSolver: *mut btVoronoiSimplexSolver,
        penetrationDepthSolver: *mut btConvexPenetrationDepthSolver,
    );
}
impl btGjkPairDetector {
    #[inline]
    pub unsafe fn getClosestPointsNonVirtual(
        &mut self,
        input: *const btDiscreteCollisionDetectorInterface_ClosestPointInput,
        output: *mut btDiscreteCollisionDetectorInterface_Result,
        debugDraw: *mut btIDebugDraw,
    ) {
        btGjkPairDetector_getClosestPointsNonVirtual(self, input, output, debugDraw)
    }
    #[inline]
    pub unsafe fn new(
        objectA: *const btConvexShape,
        objectB: *const btConvexShape,
        simplexSolver: *mut btVoronoiSimplexSolver,
        penetrationDepthSolver: *mut btConvexPenetrationDepthSolver,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btGjkPairDetector_btGjkPairDetector(
            &mut __bindgen_tmp,
            objectA,
            objectB,
            simplexSolver,
            penetrationDepthSolver,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        objectA: *const btConvexShape,
        objectB: *const btConvexShape,
        shapeTypeA: ::std::os::raw::c_int,
        shapeTypeB: ::std::os::raw::c_int,
        marginA: btScalar,
        marginB: btScalar,
        simplexSolver: *mut btVoronoiSimplexSolver,
        penetrationDepthSolver: *mut btConvexPenetrationDepthSolver,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btGjkPairDetector_btGjkPairDetector1(
            &mut __bindgen_tmp,
            objectA,
            objectB,
            shapeTypeA,
            shapeTypeB,
            marginA,
            marginB,
            simplexSolver,
            penetrationDepthSolver,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb"]
    pub fn btGjkPairDetector_getClosestPoints(
        this: *mut ::std::os::raw::c_void,
        input: *const btDiscreteCollisionDetectorInterface_ClosestPointInput,
        output: *mut btDiscreteCollisionDetectorInterface_Result,
        debugDraw: *mut btIDebugDraw,
        swapResults: bool,
    );
}
/// The convex2dConvex2dAlgorithm collision algorithm support 2d collision detection for btConvex2dShape
/// Currently it requires the btMinkowskiPenetrationDepthSolver, it has support for 2d penetration depth computation
#[repr(C)]
#[derive(Debug)]
pub struct btConvex2dConvex2dAlgorithm {
    pub _base: btActivatingCollisionAlgorithm,
    pub m_simplexSolver: *mut btVoronoiSimplexSolver,
    pub m_pdSolver: *mut btConvexPenetrationDepthSolver,
    pub m_ownManifold: bool,
    pub m_manifoldPtr: *mut btPersistentManifold,
    pub m_lowLevelOfDetail: bool,
}
#[repr(C)]
#[derive(Debug)]
pub struct btConvex2dConvex2dAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
    pub m_pdSolver: *mut btConvexPenetrationDepthSolver,
    pub m_simplexSolver: *mut btVoronoiSimplexSolver,
    pub m_numPerturbationIterations: ::std::os::raw::c_int,
    pub m_minimumPointsPerturbationThreshold: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN27btConvex2dConvex2dAlgorithm10CreateFuncC1EP22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolver"]
    pub fn btConvex2dConvex2dAlgorithm_CreateFunc_CreateFunc(
        this: *mut btConvex2dConvex2dAlgorithm_CreateFunc,
        simplexSolver: *mut btVoronoiSimplexSolver,
        pdSolver: *mut btConvexPenetrationDepthSolver,
    );
}
impl btConvex2dConvex2dAlgorithm_CreateFunc {
    #[inline]
    pub unsafe fn new(
        simplexSolver: *mut btVoronoiSimplexSolver,
        pdSolver: *mut btConvexPenetrationDepthSolver,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConvex2dConvex2dAlgorithm_CreateFunc_CreateFunc(
            &mut __bindgen_tmp,
            simplexSolver,
            pdSolver,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN27btConvex2dConvex2dAlgorithm19setLowLevelOfDetailEb"]
    pub fn btConvex2dConvex2dAlgorithm_setLowLevelOfDetail(
        this: *mut btConvex2dConvex2dAlgorithm,
        useLowLevel: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btConvex2dConvex2dAlgorithmC1EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS7_P22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolverii"]
    pub fn btConvex2dConvex2dAlgorithm_btConvex2dConvex2dAlgorithm(
        this: *mut btConvex2dConvex2dAlgorithm,
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        simplexSolver: *mut btVoronoiSimplexSolver,
        pdSolver: *mut btConvexPenetrationDepthSolver,
        numPerturbationIterations: ::std::os::raw::c_int,
        minimumPointsPerturbationThreshold: ::std::os::raw::c_int,
    );
}
impl btConvex2dConvex2dAlgorithm {
    #[inline]
    pub unsafe fn setLowLevelOfDetail(&mut self, useLowLevel: bool) {
        btConvex2dConvex2dAlgorithm_setLowLevelOfDetail(self, useLowLevel)
    }
    #[inline]
    pub unsafe fn new(
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        simplexSolver: *mut btVoronoiSimplexSolver,
        pdSolver: *mut btConvexPenetrationDepthSolver,
        numPerturbationIterations: ::std::os::raw::c_int,
        minimumPointsPerturbationThreshold: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConvex2dConvex2dAlgorithm_btConvex2dConvex2dAlgorithm(
            &mut __bindgen_tmp,
            mf,
            ci,
            body0Wrap,
            body1Wrap,
            simplexSolver,
            pdSolver,
            numPerturbationIterations,
            minimumPointsPerturbationThreshold,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN27btConvex2dConvex2dAlgorithmD1Ev"]
    pub fn btConvex2dConvex2dAlgorithm_btConvex2dConvex2dAlgorithm_destructor(
        this: *mut btConvex2dConvex2dAlgorithm,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btConvex2dConvex2dAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btConvex2dConvex2dAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btConvex2dConvex2dAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btConvex2dConvex2dAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN27btConvex2dConvex2dAlgorithm10CreateFuncD1Ev"]
    pub fn btConvex2dConvex2dAlgorithm_CreateFunc_CreateFunc_destructor(
        this: *mut btConvex2dConvex2dAlgorithm_CreateFunc,
    );
}
#[repr(C)]
pub struct btTriangleCallback__bindgen_vtable(::std::os::raw::c_void);
/// The btTriangleCallback provides a callback for each overlapping triangle when calling processAllTriangles.
/// This callback is called by processAllTriangles for all btConcaveShape derived class, such as  btBvhTriangleMeshShape, btStaticPlaneShape and btHeightfieldTerrainShape.
#[repr(C)]
#[derive(Debug)]
pub struct btTriangleCallback {
    pub vtable_: *const btTriangleCallback__bindgen_vtable,
}
extern "C" {
    #[link_name = "\u{1}_ZN18btTriangleCallbackD1Ev"]
    pub fn btTriangleCallback_btTriangleCallback_destructor(this: *mut btTriangleCallback);
}
#[repr(C)]
pub struct btInternalTriangleIndexCallback__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btInternalTriangleIndexCallback {
    pub vtable_: *const btInternalTriangleIndexCallback__bindgen_vtable,
}
extern "C" {
    #[link_name = "\u{1}_ZN31btInternalTriangleIndexCallbackD1Ev"]
    pub fn btInternalTriangleIndexCallback_btInternalTriangleIndexCallback_destructor(
        this: *mut btInternalTriangleIndexCallback,
    );
}
/// For each triangle in the concave mesh that overlaps with the AABB of a convex (m_convexProxy), processTriangle is called.
#[repr(C)]
#[derive(Debug)]
pub struct btConvexTriangleCallback {
    pub _base: btTriangleCallback,
    pub m_aabbMin: btVector3,
    pub m_aabbMax: btVector3,
    pub m_convexBodyWrap: *const btCollisionObjectWrapper,
    pub m_triBodyWrap: *const btCollisionObjectWrapper,
    pub m_resultOut: *mut btManifoldResult,
    pub m_dispatcher: *mut btDispatcher,
    pub m_dispatchInfoPtr: *const btDispatcherInfo,
    pub m_collisionMarginTriangle: btScalar,
    pub m_triangleCount: ::std::os::raw::c_int,
    pub m_manifoldPtr: *mut btPersistentManifold,
}
extern "C" {
    #[link_name = "\u{1}_ZN24btConvexTriangleCallback22setTimeStepAndCountersEfRK16btDispatcherInfoPK24btCollisionObjectWrapperS5_P16btManifoldResult"]
    pub fn btConvexTriangleCallback_setTimeStepAndCounters(
        this: *mut btConvexTriangleCallback,
        collisionMarginTriangle: btScalar,
        dispatchInfo: *const btDispatcherInfo,
        convexBodyWrap: *const btCollisionObjectWrapper,
        triBodyWrap: *const btCollisionObjectWrapper,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btConvexTriangleCallback10clearCacheEv"]
    pub fn btConvexTriangleCallback_clearCache(this: *mut btConvexTriangleCallback);
}
extern "C" {
    #[link_name = "\u{1}_ZN24btConvexTriangleCallbackC1EP12btDispatcherPK24btCollisionObjectWrapperS4_b"]
    pub fn btConvexTriangleCallback_btConvexTriangleCallback(
        this: *mut btConvexTriangleCallback,
        dispatcher: *mut btDispatcher,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    );
}
impl btConvexTriangleCallback {
    #[inline]
    pub unsafe fn setTimeStepAndCounters(
        &mut self,
        collisionMarginTriangle: btScalar,
        dispatchInfo: *const btDispatcherInfo,
        convexBodyWrap: *const btCollisionObjectWrapper,
        triBodyWrap: *const btCollisionObjectWrapper,
        resultOut: *mut btManifoldResult,
    ) {
        btConvexTriangleCallback_setTimeStepAndCounters(
            self,
            collisionMarginTriangle,
            dispatchInfo,
            convexBodyWrap,
            triBodyWrap,
            resultOut,
        )
    }
    #[inline]
    pub unsafe fn clearCache(&mut self) {
        btConvexTriangleCallback_clearCache(self)
    }
    #[inline]
    pub unsafe fn new(
        dispatcher: *mut btDispatcher,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConvexTriangleCallback_btConvexTriangleCallback(
            &mut __bindgen_tmp,
            dispatcher,
            body0Wrap,
            body1Wrap,
            isSwapped,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN24btConvexTriangleCallbackD1Ev"]
    pub fn btConvexTriangleCallback_btConvexTriangleCallback_destructor(
        this: *mut btConvexTriangleCallback,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btConvexTriangleCallback15processTriangleEP9btVector3ii"]
    pub fn btConvexTriangleCallback_processTriangle(
        this: *mut ::std::os::raw::c_void,
        triangle: *mut btVector3,
        partId: ::std::os::raw::c_int,
        triangleIndex: ::std::os::raw::c_int,
    );
}
/// btConvexConcaveCollisionAlgorithm  supports collision between convex shapes and (concave) trianges meshes.
#[repr(C)]
#[derive(Debug)]
pub struct btConvexConcaveCollisionAlgorithm {
    pub _base: btActivatingCollisionAlgorithm,
    pub m_btConvexTriangleCallback: btConvexTriangleCallback,
    pub m_isSwapped: bool,
}
#[repr(C)]
#[derive(Debug)]
pub struct btConvexConcaveCollisionAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
#[repr(C)]
#[derive(Debug)]
pub struct btConvexConcaveCollisionAlgorithm_SwappedCreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
extern "C" {
    #[link_name = "\u{1}_ZN33btConvexConcaveCollisionAlgorithm10clearCacheEv"]
    pub fn btConvexConcaveCollisionAlgorithm_clearCache(
        this: *mut btConvexConcaveCollisionAlgorithm,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN33btConvexConcaveCollisionAlgorithmC1ERK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_b"]
    pub fn btConvexConcaveCollisionAlgorithm_btConvexConcaveCollisionAlgorithm(
        this: *mut btConvexConcaveCollisionAlgorithm,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    );
}
impl btConvexConcaveCollisionAlgorithm {
    #[inline]
    pub unsafe fn clearCache(&mut self) {
        btConvexConcaveCollisionAlgorithm_clearCache(self)
    }
    #[inline]
    pub unsafe fn new(
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConvexConcaveCollisionAlgorithm_btConvexConcaveCollisionAlgorithm(
            &mut __bindgen_tmp,
            ci,
            body0Wrap,
            body1Wrap,
            isSwapped,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN33btConvexConcaveCollisionAlgorithmD1Ev"]
    pub fn btConvexConcaveCollisionAlgorithm_btConvexConcaveCollisionAlgorithm_destructor(
        this: *mut btConvexConcaveCollisionAlgorithm,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN33btConvexConcaveCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btConvexConcaveCollisionAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btConvexConcaveCollisionAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN33btConvexConcaveCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE"]
    pub fn btConvexConcaveCollisionAlgorithm_getAllContactManifolds(
        this: *mut ::std::os::raw::c_void,
        manifoldArray: *mut btManifoldArray,
    );
}
/// btSphereBoxCollisionAlgorithm  provides sphere-box collision detection.
/// Other features are frame-coherency (persistent data) and collision response.
#[repr(C)]
#[derive(Debug)]
pub struct btConvexPlaneCollisionAlgorithm {
    pub _base: btCollisionAlgorithm,
    pub m_ownManifold: bool,
    pub m_manifoldPtr: *mut btPersistentManifold,
    pub m_isSwapped: bool,
    pub m_numPerturbationIterations: ::std::os::raw::c_int,
    pub m_minimumPointsPerturbationThreshold: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct btConvexPlaneCollisionAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
    pub m_numPerturbationIterations: ::std::os::raw::c_int,
    pub m_minimumPointsPerturbationThreshold: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN31btConvexPlaneCollisionAlgorithm20collideSingleContactERK12btQuaternionPK24btCollisionObjectWrapperS5_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btConvexPlaneCollisionAlgorithm_collideSingleContact(
        this: *mut btConvexPlaneCollisionAlgorithm,
        perturbeRot: *const btQuaternion,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN31btConvexPlaneCollisionAlgorithmC1EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS7_bii"]
    pub fn btConvexPlaneCollisionAlgorithm_btConvexPlaneCollisionAlgorithm(
        this: *mut btConvexPlaneCollisionAlgorithm,
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
        numPerturbationIterations: ::std::os::raw::c_int,
        minimumPointsPerturbationThreshold: ::std::os::raw::c_int,
    );
}
impl btConvexPlaneCollisionAlgorithm {
    #[inline]
    pub unsafe fn collideSingleContact(
        &mut self,
        perturbeRot: *const btQuaternion,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) {
        btConvexPlaneCollisionAlgorithm_collideSingleContact(
            self,
            perturbeRot,
            body0Wrap,
            body1Wrap,
            dispatchInfo,
            resultOut,
        )
    }
    #[inline]
    pub unsafe fn new(
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
        numPerturbationIterations: ::std::os::raw::c_int,
        minimumPointsPerturbationThreshold: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConvexPlaneCollisionAlgorithm_btConvexPlaneCollisionAlgorithm(
            &mut __bindgen_tmp,
            mf,
            ci,
            body0Wrap,
            body1Wrap,
            isSwapped,
            numPerturbationIterations,
            minimumPointsPerturbationThreshold,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN31btConvexPlaneCollisionAlgorithmD1Ev"]
    pub fn btConvexPlaneCollisionAlgorithm_btConvexPlaneCollisionAlgorithm_destructor(
        this: *mut btConvexPlaneCollisionAlgorithm,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN31btConvexPlaneCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btConvexPlaneCollisionAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN31btConvexPlaneCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btConvexPlaneCollisionAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
/// EmptyAlgorithm is a stub for unsupported collision pairs.
/// The dispatcher can dispatch a persistent btEmptyAlgorithm to avoid a search every frame.
#[repr(C)]
#[derive(Debug)]
pub struct btEmptyAlgorithm {
    pub _base: btCollisionAlgorithm,
}
#[repr(C)]
#[derive(Debug)]
pub struct btEmptyAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
extern "C" {
    #[link_name = "\u{1}_ZN16btEmptyAlgorithmC1ERK36btCollisionAlgorithmConstructionInfo"]
    pub fn btEmptyAlgorithm_btEmptyAlgorithm(
        this: *mut btEmptyAlgorithm,
        ci: *const btCollisionAlgorithmConstructionInfo,
    );
}
impl btEmptyAlgorithm {
    #[inline]
    pub unsafe fn new(ci: *const btCollisionAlgorithmConstructionInfo) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btEmptyAlgorithm_btEmptyAlgorithm(&mut __bindgen_tmp, ci);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN16btEmptyAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btEmptyAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btEmptyAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btEmptyAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
#[repr(C)]
pub struct btOverlappingPairCallback__bindgen_vtable(::std::os::raw::c_void);
/// The btOverlappingPairCallback class is an additional optional broadphase user callback for adding/removing overlapping pairs, similar interface to btOverlappingPairCache.
#[repr(C)]
#[derive(Debug)]
pub struct btOverlappingPairCallback {
    pub vtable_: *const btOverlappingPairCallback__bindgen_vtable,
}
pub type btBroadphasePairArray = btAlignedObjectArray<btBroadphasePair>;
#[repr(C)]
pub struct btOverlapCallback__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btOverlapCallback {
    pub vtable_: *const btOverlapCallback__bindgen_vtable,
}
#[repr(C)]
pub struct btOverlapFilterCallback__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btOverlapFilterCallback {
    pub vtable_: *const btOverlapFilterCallback__bindgen_vtable,
}
/// The btOverlappingPairCache provides an interface for overlapping pair management (add, remove, storage), used by the btBroadphaseInterface broadphases.
/// The btHashedOverlappingPairCache and btSortedOverlappingPairCache classes are two implementations.
#[repr(C)]
#[derive(Debug)]
pub struct btOverlappingPairCache {
    pub _base: btOverlappingPairCallback,
}
/// Hash-space based Pair Cache, thanks to Erin Catto, Box2D, http://www.box2d.org, and Pierre Terdiman, Codercorner, http://codercorner.com
#[repr(C)]
pub struct btHashedOverlappingPairCache {
    pub _base: btOverlappingPairCache,
    pub m_overlappingPairArray: btBroadphasePairArray,
    pub m_overlapFilterCallback: *mut btOverlapFilterCallback,
    pub m_hashTable: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_next: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_ghostPairCallback: *mut btOverlappingPairCallback,
}
extern "C" {
    #[link_name = "\u{1}_ZN28btHashedOverlappingPairCacheC1Ev"]
    pub fn btHashedOverlappingPairCache_btHashedOverlappingPairCache(
        this: *mut btHashedOverlappingPairCache,
    );
}
impl btHashedOverlappingPairCache {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btHashedOverlappingPairCache_btHashedOverlappingPairCache(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN28btHashedOverlappingPairCacheD1Ev"]
    pub fn btHashedOverlappingPairCache_btHashedOverlappingPairCache_destructor(
        this: *mut btHashedOverlappingPairCache,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcher"]
    pub fn btHashedOverlappingPairCache_removeOverlappingPairsContainingProxy(
        this: *mut ::std::os::raw::c_void,
        proxy: *mut btBroadphaseProxy,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btHashedOverlappingPairCache21removeOverlappingPairEP17btBroadphaseProxyS1_P12btDispatcher"]
    pub fn btHashedOverlappingPairCache_removeOverlappingPair(
        this: *mut ::std::os::raw::c_void,
        proxy0: *mut btBroadphaseProxy,
        proxy1: *mut btBroadphaseProxy,
        dispatcher: *mut btDispatcher,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcher"]
    pub fn btHashedOverlappingPairCache_cleanProxyFromPairs(
        this: *mut ::std::os::raw::c_void,
        proxy: *mut btBroadphaseProxy,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btHashedOverlappingPairCache26processAllOverlappingPairsEP17btOverlapCallbackP12btDispatcher"]
    pub fn btHashedOverlappingPairCache_processAllOverlappingPairs(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut btOverlapCallback,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btHashedOverlappingPairCache20cleanOverlappingPairER16btBroadphasePairP12btDispatcher"]
    pub fn btHashedOverlappingPairCache_cleanOverlappingPair(
        this: *mut ::std::os::raw::c_void,
        pair: *mut btBroadphasePair,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btHashedOverlappingPairCache8findPairEP17btBroadphaseProxyS1_"]
    pub fn btHashedOverlappingPairCache_findPair(
        this: *mut ::std::os::raw::c_void,
        proxy0: *mut btBroadphaseProxy,
        proxy1: *mut btBroadphaseProxy,
    ) -> *mut btBroadphasePair;
}
/// btSortedOverlappingPairCache maintains the objects with overlapping AABB
/// Typically managed by the Broadphase, Axis3Sweep or btSimpleBroadphase
#[repr(C)]
pub struct btSortedOverlappingPairCache {
    pub _base: btOverlappingPairCache,
    pub m_overlappingPairArray: btBroadphasePairArray,
    pub m_blockedForChanges: bool,
    /// by default, do the removal during the pair traversal
    pub m_hasDeferredRemoval: bool,
    pub m_overlapFilterCallback: *mut btOverlapFilterCallback,
    pub m_ghostPairCallback: *mut btOverlappingPairCallback,
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSortedOverlappingPairCacheC1Ev"]
    pub fn btSortedOverlappingPairCache_btSortedOverlappingPairCache(
        this: *mut btSortedOverlappingPairCache,
    );
}
impl btSortedOverlappingPairCache {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSortedOverlappingPairCache_btSortedOverlappingPairCache(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSortedOverlappingPairCacheD1Ev"]
    pub fn btSortedOverlappingPairCache_btSortedOverlappingPairCache_destructor(
        this: *mut btSortedOverlappingPairCache,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSortedOverlappingPairCache26processAllOverlappingPairsEP17btOverlapCallbackP12btDispatcher"]
    pub fn btSortedOverlappingPairCache_processAllOverlappingPairs(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut btOverlapCallback,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSortedOverlappingPairCache21removeOverlappingPairEP17btBroadphaseProxyS1_P12btDispatcher"]
    pub fn btSortedOverlappingPairCache_removeOverlappingPair(
        this: *mut ::std::os::raw::c_void,
        proxy0: *mut btBroadphaseProxy,
        proxy1: *mut btBroadphaseProxy,
        dispatcher: *mut btDispatcher,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSortedOverlappingPairCache20cleanOverlappingPairER16btBroadphasePairP12btDispatcher"]
    pub fn btSortedOverlappingPairCache_cleanOverlappingPair(
        this: *mut ::std::os::raw::c_void,
        pair: *mut btBroadphasePair,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSortedOverlappingPairCache18addOverlappingPairEP17btBroadphaseProxyS1_"]
    pub fn btSortedOverlappingPairCache_addOverlappingPair(
        this: *mut ::std::os::raw::c_void,
        proxy0: *mut btBroadphaseProxy,
        proxy1: *mut btBroadphaseProxy,
    ) -> *mut btBroadphasePair;
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSortedOverlappingPairCache8findPairEP17btBroadphaseProxyS1_"]
    pub fn btSortedOverlappingPairCache_findPair(
        this: *mut ::std::os::raw::c_void,
        proxy0: *mut btBroadphaseProxy,
        proxy1: *mut btBroadphaseProxy,
    ) -> *mut btBroadphasePair;
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSortedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcher"]
    pub fn btSortedOverlappingPairCache_cleanProxyFromPairs(
        this: *mut ::std::os::raw::c_void,
        proxy: *mut btBroadphaseProxy,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSortedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcher"]
    pub fn btSortedOverlappingPairCache_removeOverlappingPairsContainingProxy(
        this: *mut ::std::os::raw::c_void,
        proxy: *mut btBroadphaseProxy,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSortedOverlappingPairCache20sortOverlappingPairsEP12btDispatcher"]
    pub fn btSortedOverlappingPairCache_sortOverlappingPairs(
        this: *mut ::std::os::raw::c_void,
        dispatcher: *mut btDispatcher,
    );
}
/// btNullPairCache skips add/removal of overlapping pairs. Userful for benchmarking and unit testing.
#[repr(C)]
pub struct btNullPairCache {
    pub _base: btOverlappingPairCache,
    pub m_overlappingPairArray: btBroadphasePairArray,
}
#[repr(C)]
pub struct btCollisionWorld__bindgen_vtable(::std::os::raw::c_void);
/// CollisionWorld is interface and container for the collision detection
#[repr(C)]
#[derive(Debug)]
pub struct btCollisionWorld {
    pub vtable_: *const btCollisionWorld__bindgen_vtable,
    pub m_collisionObjects: btAlignedObjectArray<*mut btCollisionObject>,
    pub m_dispatcher1: *mut btDispatcher,
    pub m_dispatchInfo: btDispatcherInfo,
    pub m_broadphasePairCache: *mut btBroadphaseInterface,
    pub m_debugDrawer: *mut btIDebugDraw,
    /// m_forceUpdateAllAabbs can be set to false as an optimization to only update active object AABBs
    /// ///it is true by default, because it is error-prone (setting the position of static objects wouldn't update their AABB)
    pub m_forceUpdateAllAabbs: bool,
}
/// LocalShapeInfo gives extra information for complex shapes
/// ///Currently, only btTriangleMeshShape is available, so it just contains triangleIndex and subpart
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCollisionWorld_LocalShapeInfo {
    pub m_shapePart: ::std::os::raw::c_int,
    pub m_triangleIndex: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCollisionWorld_LocalRayResult {
    pub m_collisionObject: *const btCollisionObject,
    pub m_localShapeInfo: *mut btCollisionWorld_LocalShapeInfo,
    pub m_hitNormalLocal: btVector3,
    pub m_hitFraction: btScalar,
}
#[repr(C)]
pub struct btCollisionWorld_RayResultCallback__bindgen_vtable(::std::os::raw::c_void);
/// RayResultCallback is used to report new raycast results
#[repr(C)]
#[derive(Debug)]
pub struct btCollisionWorld_RayResultCallback {
    pub vtable_: *const btCollisionWorld_RayResultCallback__bindgen_vtable,
    pub m_closestHitFraction: btScalar,
    pub m_collisionObject: *const btCollisionObject,
    pub m_collisionFilterGroup: ::std::os::raw::c_int,
    pub m_collisionFilterMask: ::std::os::raw::c_int,
    pub m_flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug)]
pub struct btCollisionWorld_ClosestRayResultCallback {
    pub _base: btCollisionWorld_RayResultCallback,
    pub m_rayFromWorld: btVector3,
    pub m_rayToWorld: btVector3,
    pub m_hitNormalWorld: btVector3,
    pub m_hitPointWorld: btVector3,
}
#[repr(C)]
#[derive(Debug)]
pub struct btCollisionWorld_AllHitsRayResultCallback {
    pub _base: btCollisionWorld_RayResultCallback,
    pub m_collisionObjects: btAlignedObjectArray<*const btCollisionObject>,
    pub m_rayFromWorld: btVector3,
    pub m_rayToWorld: btVector3,
    pub m_hitNormalWorld: btAlignedObjectArray<btVector3>,
    pub m_hitPointWorld: btAlignedObjectArray<btVector3>,
    pub m_hitFractions: btAlignedObjectArray<btScalar>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCollisionWorld_LocalConvexResult {
    pub m_hitCollisionObject: *const btCollisionObject,
    pub m_localShapeInfo: *mut btCollisionWorld_LocalShapeInfo,
    pub m_hitNormalLocal: btVector3,
    pub m_hitPointLocal: btVector3,
    pub m_hitFraction: btScalar,
}
#[repr(C)]
pub struct btCollisionWorld_ConvexResultCallback__bindgen_vtable(::std::os::raw::c_void);
/// RayResultCallback is used to report new raycast results
#[repr(C)]
#[derive(Debug)]
pub struct btCollisionWorld_ConvexResultCallback {
    pub vtable_: *const btCollisionWorld_ConvexResultCallback__bindgen_vtable,
    pub m_closestHitFraction: btScalar,
    pub m_collisionFilterGroup: ::std::os::raw::c_int,
    pub m_collisionFilterMask: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct btCollisionWorld_ClosestConvexResultCallback {
    pub _base: btCollisionWorld_ConvexResultCallback,
    pub m_convexFromWorld: btVector3,
    pub m_convexToWorld: btVector3,
    pub m_hitNormalWorld: btVector3,
    pub m_hitPointWorld: btVector3,
    pub m_hitCollisionObject: *const btCollisionObject,
}
#[repr(C)]
pub struct btCollisionWorld_ContactResultCallback__bindgen_vtable(::std::os::raw::c_void);
/// ContactResultCallback is used to report contact points
#[repr(C)]
#[derive(Debug)]
pub struct btCollisionWorld_ContactResultCallback {
    pub vtable_: *const btCollisionWorld_ContactResultCallback__bindgen_vtable,
    pub m_collisionFilterGroup: ::std::os::raw::c_int,
    pub m_collisionFilterMask: ::std::os::raw::c_int,
    pub m_closestDistanceThreshold: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZN16btCollisionWorld25serializeCollisionObjectsEP12btSerializer"]
    pub fn btCollisionWorld_serializeCollisionObjects(
        this: *mut btCollisionWorld,
        serializer: *mut btSerializer,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btCollisionWorld25serializeContactManifoldsEP12btSerializer"]
    pub fn btCollisionWorld_serializeContactManifolds(
        this: *mut btCollisionWorld,
        serializer: *mut btSerializer,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btCollisionWorld16updateSingleAabbEP17btCollisionObject"]
    pub fn btCollisionWorld_updateSingleAabb(
        this: *mut btCollisionWorld,
        colObj: *mut btCollisionObject,
    );
}
extern "C" {
    /// convexTest performs a swept convex cast on all objects in the btCollisionWorld, and calls the resultCallback
    /// /// This allows for several queries: first hit, all hits, any hit, dependent on the value return by the callback.
    #[link_name = "\u{1}_ZNK16btCollisionWorld15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RNS_20ConvexResultCallbackEf"]
    pub fn btCollisionWorld_convexSweepTest(
        this: *const btCollisionWorld,
        castShape: *const btConvexShape,
        from: *const btTransform,
        to: *const btTransform,
        resultCallback: *mut btCollisionWorld_ConvexResultCallback,
        allowedCcdPenetration: btScalar,
    );
}
extern "C" {
    /// contactTest performs a discrete collision test between colObj against all objects in the btCollisionWorld, and calls the resultCallback.
    /// ///it reports one or more contact points for every overlapping object (including the one with deepest penetration)
    #[link_name = "\u{1}_ZN16btCollisionWorld11contactTestEP17btCollisionObjectRNS_21ContactResultCallbackE"]
    pub fn btCollisionWorld_contactTest(
        this: *mut btCollisionWorld,
        colObj: *mut btCollisionObject,
        resultCallback: *mut btCollisionWorld_ContactResultCallback,
    );
}
extern "C" {
    /// contactTest performs a discrete collision test between two collision objects and calls the resultCallback if overlap if detected.
    /// ///it reports one or more contact points (including the one with deepest penetration)
    #[link_name = "\u{1}_ZN16btCollisionWorld15contactPairTestEP17btCollisionObjectS1_RNS_21ContactResultCallbackE"]
    pub fn btCollisionWorld_contactPairTest(
        this: *mut btCollisionWorld,
        colObjA: *mut btCollisionObject,
        colObjB: *mut btCollisionObject,
        resultCallback: *mut btCollisionWorld_ContactResultCallback,
    );
}
extern "C" {
    /// rayTestSingle performs a raycast call and calls the resultCallback. It is used internally by rayTest.
    /// /// In a future implementation, we consider moving the ray test as a virtual method in btCollisionShape.
    /// /// This allows more customization.
    #[link_name = "\u{1}_ZN16btCollisionWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RNS_17RayResultCallbackE"]
    pub fn btCollisionWorld_rayTestSingle(
        rayFromTrans: *const btTransform,
        rayToTrans: *const btTransform,
        collisionObject: *mut btCollisionObject,
        collisionShape: *const btCollisionShape,
        colObjWorldTransform: *const btTransform,
        resultCallback: *mut btCollisionWorld_RayResultCallback,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackE"]
    pub fn btCollisionWorld_rayTestSingleInternal(
        rayFromTrans: *const btTransform,
        rayToTrans: *const btTransform,
        collisionObjectWrap: *const btCollisionObjectWrapper,
        resultCallback: *mut btCollisionWorld_RayResultCallback,
    );
}
extern "C" {
    /// objectQuerySingle performs a collision detection query and calls the resultCallback. It is used internally by rayTest.
    #[link_name = "\u{1}_ZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEf"]
    pub fn btCollisionWorld_objectQuerySingle(
        castShape: *const btConvexShape,
        rayFromTrans: *const btTransform,
        rayToTrans: *const btTransform,
        collisionObject: *mut btCollisionObject,
        collisionShape: *const btCollisionShape,
        colObjWorldTransform: *const btTransform,
        resultCallback: *mut btCollisionWorld_ConvexResultCallback,
        allowedPenetration: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEf"]
    pub fn btCollisionWorld_objectQuerySingleInternal(
        castShape: *const btConvexShape,
        convexFromTrans: *const btTransform,
        convexToTrans: *const btTransform,
        colObjWrap: *const btCollisionObjectWrapper,
        resultCallback: *mut btCollisionWorld_ConvexResultCallback,
        allowedPenetration: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btCollisionWorldC1EP12btDispatcherP21btBroadphaseInterfaceP24btCollisionConfiguration"]
    pub fn btCollisionWorld_btCollisionWorld(
        this: *mut btCollisionWorld,
        dispatcher: *mut btDispatcher,
        broadphasePairCache: *mut btBroadphaseInterface,
        collisionConfiguration: *mut btCollisionConfiguration,
    );
}
impl btCollisionWorld {
    #[inline]
    pub unsafe fn serializeCollisionObjects(&mut self, serializer: *mut btSerializer) {
        btCollisionWorld_serializeCollisionObjects(self, serializer)
    }
    #[inline]
    pub unsafe fn serializeContactManifolds(&mut self, serializer: *mut btSerializer) {
        btCollisionWorld_serializeContactManifolds(self, serializer)
    }
    #[inline]
    pub unsafe fn updateSingleAabb(&mut self, colObj: *mut btCollisionObject) {
        btCollisionWorld_updateSingleAabb(self, colObj)
    }
    #[inline]
    pub unsafe fn convexSweepTest(
        &self,
        castShape: *const btConvexShape,
        from: *const btTransform,
        to: *const btTransform,
        resultCallback: *mut btCollisionWorld_ConvexResultCallback,
        allowedCcdPenetration: btScalar,
    ) {
        btCollisionWorld_convexSweepTest(
            self,
            castShape,
            from,
            to,
            resultCallback,
            allowedCcdPenetration,
        )
    }
    #[inline]
    pub unsafe fn contactTest(
        &mut self,
        colObj: *mut btCollisionObject,
        resultCallback: *mut btCollisionWorld_ContactResultCallback,
    ) {
        btCollisionWorld_contactTest(self, colObj, resultCallback)
    }
    #[inline]
    pub unsafe fn contactPairTest(
        &mut self,
        colObjA: *mut btCollisionObject,
        colObjB: *mut btCollisionObject,
        resultCallback: *mut btCollisionWorld_ContactResultCallback,
    ) {
        btCollisionWorld_contactPairTest(self, colObjA, colObjB, resultCallback)
    }
    #[inline]
    pub unsafe fn rayTestSingle(
        rayFromTrans: *const btTransform,
        rayToTrans: *const btTransform,
        collisionObject: *mut btCollisionObject,
        collisionShape: *const btCollisionShape,
        colObjWorldTransform: *const btTransform,
        resultCallback: *mut btCollisionWorld_RayResultCallback,
    ) {
        btCollisionWorld_rayTestSingle(
            rayFromTrans,
            rayToTrans,
            collisionObject,
            collisionShape,
            colObjWorldTransform,
            resultCallback,
        )
    }
    #[inline]
    pub unsafe fn rayTestSingleInternal(
        rayFromTrans: *const btTransform,
        rayToTrans: *const btTransform,
        collisionObjectWrap: *const btCollisionObjectWrapper,
        resultCallback: *mut btCollisionWorld_RayResultCallback,
    ) {
        btCollisionWorld_rayTestSingleInternal(
            rayFromTrans,
            rayToTrans,
            collisionObjectWrap,
            resultCallback,
        )
    }
    #[inline]
    pub unsafe fn objectQuerySingle(
        castShape: *const btConvexShape,
        rayFromTrans: *const btTransform,
        rayToTrans: *const btTransform,
        collisionObject: *mut btCollisionObject,
        collisionShape: *const btCollisionShape,
        colObjWorldTransform: *const btTransform,
        resultCallback: *mut btCollisionWorld_ConvexResultCallback,
        allowedPenetration: btScalar,
    ) {
        btCollisionWorld_objectQuerySingle(
            castShape,
            rayFromTrans,
            rayToTrans,
            collisionObject,
            collisionShape,
            colObjWorldTransform,
            resultCallback,
            allowedPenetration,
        )
    }
    #[inline]
    pub unsafe fn objectQuerySingleInternal(
        castShape: *const btConvexShape,
        convexFromTrans: *const btTransform,
        convexToTrans: *const btTransform,
        colObjWrap: *const btCollisionObjectWrapper,
        resultCallback: *mut btCollisionWorld_ConvexResultCallback,
        allowedPenetration: btScalar,
    ) {
        btCollisionWorld_objectQuerySingleInternal(
            castShape,
            convexFromTrans,
            convexToTrans,
            colObjWrap,
            resultCallback,
            allowedPenetration,
        )
    }
    #[inline]
    pub unsafe fn new(
        dispatcher: *mut btDispatcher,
        broadphasePairCache: *mut btBroadphaseInterface,
        collisionConfiguration: *mut btCollisionConfiguration,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btCollisionWorld_btCollisionWorld(
            &mut __bindgen_tmp,
            dispatcher,
            broadphasePairCache,
            collisionConfiguration,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN16btCollisionWorldD1Ev"]
    pub fn btCollisionWorld_btCollisionWorld_destructor(this: *mut btCollisionWorld);
}
extern "C" {
    #[link_name = "\u{1}_ZN16btCollisionWorld11updateAabbsEv"]
    pub fn btCollisionWorld_updateAabbs(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    /// the computeOverlappingPairs is usually already called by performDiscreteCollisionDetection (or stepSimulation)
    /// ///it can be useful to use if you perform ray tests without collision detection/simulation
    #[link_name = "\u{1}_ZN16btCollisionWorld23computeOverlappingPairsEv"]
    pub fn btCollisionWorld_computeOverlappingPairs(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN16btCollisionWorld14debugDrawWorldEv"]
    pub fn btCollisionWorld_debugDrawWorld(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN16btCollisionWorld15debugDrawObjectERK11btTransformPK16btCollisionShapeRK9btVector3"]
    pub fn btCollisionWorld_debugDrawObject(
        this: *mut ::std::os::raw::c_void,
        worldTransform: *const btTransform,
        shape: *const btCollisionShape,
        color: *const btVector3,
    );
}
extern "C" {
    /// rayTest performs a raycast on all objects in the btCollisionWorld, and calls the resultCallback
    /// /// This allows for several queries: first hit, all hits, any hit, dependent on the value returned by the callback.
    #[link_name = "\u{1}_ZNK16btCollisionWorld7rayTestERK9btVector3S2_RNS_17RayResultCallbackE"]
    pub fn btCollisionWorld_rayTest(
        this: *mut ::std::os::raw::c_void,
        rayFromWorld: *const btVector3,
        rayToWorld: *const btVector3,
        resultCallback: *mut btCollisionWorld_RayResultCallback,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btCollisionWorld18addCollisionObjectEP17btCollisionObjectii"]
    pub fn btCollisionWorld_addCollisionObject(
        this: *mut ::std::os::raw::c_void,
        collisionObject: *mut btCollisionObject,
        collisionFilterGroup: ::std::os::raw::c_int,
        collisionFilterMask: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btCollisionWorld21removeCollisionObjectEP17btCollisionObject"]
    pub fn btCollisionWorld_removeCollisionObject(
        this: *mut ::std::os::raw::c_void,
        collisionObject: *mut btCollisionObject,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btCollisionWorld33performDiscreteCollisionDetectionEv"]
    pub fn btCollisionWorld_performDiscreteCollisionDetection(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    /// Preliminary serialization test for Bullet 2.76. Loading those files requires a separate parser (Bullet/Demos/SerializeDemo)
    #[link_name = "\u{1}_ZN16btCollisionWorld9serializeEP12btSerializer"]
    pub fn btCollisionWorld_serialize(
        this: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    );
}
/// The btGhostObject can keep track of all objects that are overlapping
/// By default, this overlap is based on the AABB
/// This is useful for creating a character controller, collision sensors/triggers, explosions etc.
/// We plan on adding rayTest and other queries for the btGhostObject
#[repr(C)]
#[derive(Debug)]
pub struct btGhostObject {
    pub _base: btCollisionObject,
    pub m_overlappingObjects: btAlignedObjectArray<*mut btCollisionObject>,
}
extern "C" {
    #[link_name = "\u{1}_ZNK13btGhostObject15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RN16btCollisionWorld20ConvexResultCallbackEf"]
    pub fn btGhostObject_convexSweepTest(
        this: *const btGhostObject,
        castShape: *const btConvexShape,
        convexFromWorld: *const btTransform,
        convexToWorld: *const btTransform,
        resultCallback: *mut btCollisionWorld_ConvexResultCallback,
        allowedCcdPenetration: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK13btGhostObject7rayTestERK9btVector3S2_RN16btCollisionWorld17RayResultCallbackE"]
    pub fn btGhostObject_rayTest(
        this: *const btGhostObject,
        rayFromWorld: *const btVector3,
        rayToWorld: *const btVector3,
        resultCallback: *mut btCollisionWorld_RayResultCallback,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13btGhostObjectC1Ev"]
    pub fn btGhostObject_btGhostObject(this: *mut btGhostObject);
}
impl btGhostObject {
    #[inline]
    pub unsafe fn convexSweepTest(
        &self,
        castShape: *const btConvexShape,
        convexFromWorld: *const btTransform,
        convexToWorld: *const btTransform,
        resultCallback: *mut btCollisionWorld_ConvexResultCallback,
        allowedCcdPenetration: btScalar,
    ) {
        btGhostObject_convexSweepTest(
            self,
            castShape,
            convexFromWorld,
            convexToWorld,
            resultCallback,
            allowedCcdPenetration,
        )
    }
    #[inline]
    pub unsafe fn rayTest(
        &self,
        rayFromWorld: *const btVector3,
        rayToWorld: *const btVector3,
        resultCallback: *mut btCollisionWorld_RayResultCallback,
    ) {
        btGhostObject_rayTest(self, rayFromWorld, rayToWorld, resultCallback)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btGhostObject_btGhostObject(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN13btGhostObjectD1Ev"]
    pub fn btGhostObject_btGhostObject_destructor(this: *mut btGhostObject);
}
extern "C" {
    /// this method is mainly for expert/internal use only.
    #[link_name = "\u{1}_ZN13btGhostObject28addOverlappingObjectInternalEP17btBroadphaseProxyS1_"]
    pub fn btGhostObject_addOverlappingObjectInternal(
        this: *mut ::std::os::raw::c_void,
        otherProxy: *mut btBroadphaseProxy,
        thisProxy: *mut btBroadphaseProxy,
    );
}
extern "C" {
    /// this method is mainly for expert/internal use only.
    #[link_name = "\u{1}_ZN13btGhostObject31removeOverlappingObjectInternalEP17btBroadphaseProxyP12btDispatcherS1_"]
    pub fn btGhostObject_removeOverlappingObjectInternal(
        this: *mut ::std::os::raw::c_void,
        otherProxy: *mut btBroadphaseProxy,
        dispatcher: *mut btDispatcher,
        thisProxy: *mut btBroadphaseProxy,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btPairCachingGhostObject {
    pub _base: btGhostObject,
    pub m_hashPairCache: *mut btHashedOverlappingPairCache,
}
extern "C" {
    #[link_name = "\u{1}_ZN24btPairCachingGhostObjectC1Ev"]
    pub fn btPairCachingGhostObject_btPairCachingGhostObject(this: *mut btPairCachingGhostObject);
}
impl btPairCachingGhostObject {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btPairCachingGhostObject_btPairCachingGhostObject(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN24btPairCachingGhostObjectD1Ev"]
    pub fn btPairCachingGhostObject_btPairCachingGhostObject_destructor(
        this: *mut btPairCachingGhostObject,
    );
}
extern "C" {
    /// this method is mainly for expert/internal use only.
    #[link_name = "\u{1}_ZN24btPairCachingGhostObject28addOverlappingObjectInternalEP17btBroadphaseProxyS1_"]
    pub fn btPairCachingGhostObject_addOverlappingObjectInternal(
        this: *mut ::std::os::raw::c_void,
        otherProxy: *mut btBroadphaseProxy,
        thisProxy: *mut btBroadphaseProxy,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btPairCachingGhostObject31removeOverlappingObjectInternalEP17btBroadphaseProxyP12btDispatcherS1_"]
    pub fn btPairCachingGhostObject_removeOverlappingObjectInternal(
        this: *mut ::std::os::raw::c_void,
        otherProxy: *mut btBroadphaseProxy,
        dispatcher: *mut btDispatcher,
        thisProxy: *mut btBroadphaseProxy,
    );
}
/// The btGhostPairCallback interfaces and forwards adding and removal of overlapping pairs from the btBroadphaseInterface to btGhostObject.
#[repr(C)]
#[derive(Debug)]
pub struct btGhostPairCallback {
    pub _base: btOverlappingPairCallback,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btChunk {
    pub m_chunkCode: ::std::os::raw::c_int,
    pub m_length: ::std::os::raw::c_int,
    pub m_oldPtr: *mut ::std::os::raw::c_void,
    pub m_dna_nr: ::std::os::raw::c_int,
    pub m_number: ::std::os::raw::c_int,
}
pub const btSerializationFlags_BT_SERIALIZE_NO_BVH: btSerializationFlags = 1;
pub const btSerializationFlags_BT_SERIALIZE_NO_TRIANGLEINFOMAP: btSerializationFlags = 2;
pub const btSerializationFlags_BT_SERIALIZE_NO_DUPLICATE_ASSERT: btSerializationFlags = 4;
pub const btSerializationFlags_BT_SERIALIZE_CONTACT_MANIFOLDS: btSerializationFlags = 8;
pub type btSerializationFlags = u32;
#[repr(C)]
pub struct btSerializer__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btSerializer {
    pub vtable_: *const btSerializer__bindgen_vtable,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btPointerUid {
    pub __bindgen_anon_1: btPointerUid__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btPointerUid__bindgen_ty_1 {
    pub m_ptr: *mut ::std::os::raw::c_void,
    pub m_uniqueIds: [::std::os::raw::c_int; 2usize],
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug)]
pub struct btBulletSerializedArrays {
    pub m_bvhsDouble: btAlignedObjectArray<*mut btQuantizedBvhDoubleData>,
    pub m_bvhsFloat: btAlignedObjectArray<*mut btQuantizedBvhFloatData>,
    pub m_colShapeData: btAlignedObjectArray<*mut btCollisionShapeData>,
    pub m_dynamicWorldInfoDataDouble: btAlignedObjectArray<*mut btDynamicsWorldDoubleData>,
    pub m_dynamicWorldInfoDataFloat: btAlignedObjectArray<*mut btDynamicsWorldFloatData>,
    pub m_rigidBodyDataDouble: btAlignedObjectArray<*mut btRigidBodyDoubleData>,
    pub m_rigidBodyDataFloat: btAlignedObjectArray<*mut btRigidBodyFloatData>,
    pub m_collisionObjectDataDouble: btAlignedObjectArray<*mut btCollisionObjectDoubleData>,
    pub m_collisionObjectDataFloat: btAlignedObjectArray<*mut btCollisionObjectFloatData>,
    pub m_constraintDataFloat: btAlignedObjectArray<*mut btTypedConstraintFloatData>,
    pub m_constraintDataDouble: btAlignedObjectArray<*mut btTypedConstraintDoubleData>,
    pub m_constraintData: btAlignedObjectArray<*mut btTypedConstraintData>,
    pub m_softBodyFloatData: btAlignedObjectArray<*mut btSoftBodyFloatData>,
    pub m_softBodyDoubleData: btAlignedObjectArray<*mut btSoftBodyDoubleData>,
}
/// The btDefaultSerializer is the main Bullet serialization class.
/// The constructor takes an optional argument for backwards compatibility, it is recommended to leave this empty/zero.
#[repr(C)]
pub struct btDefaultSerializer {
    pub _base: btSerializer,
    pub mTypes: btAlignedObjectArray<*mut ::std::os::raw::c_char>,
    pub mStructs: btAlignedObjectArray<*mut ::std::os::raw::c_short>,
    pub mTlens: btAlignedObjectArray<::std::os::raw::c_short>,
    pub mStructReverse: btHashMap<btHashInt, ::std::os::raw::c_int>,
    pub mTypeLookup: btHashMap<btHashString, ::std::os::raw::c_int>,
    pub m_chunkP: btHashMap<btHashPtr, *mut ::std::os::raw::c_void>,
    pub m_nameMap: btHashMap<btHashPtr, *const ::std::os::raw::c_char>,
    pub m_uniquePointers: btHashMap<btHashPtr, btPointerUid>,
    pub m_uniqueIdGenerator: ::std::os::raw::c_int,
    pub m_totalSize: ::std::os::raw::c_int,
    pub m_buffer: *mut ::std::os::raw::c_uchar,
    pub m_ownsBuffer: bool,
    pub m_currentSize: ::std::os::raw::c_int,
    pub m_dna: *mut ::std::os::raw::c_void,
    pub m_dnaLength: ::std::os::raw::c_int,
    pub m_serializationFlags: ::std::os::raw::c_int,
    pub m_chunkPtrs: btAlignedObjectArray<*mut btChunk>,
    pub m_skipPointers: btHashMap<btHashPtr, *mut ::std::os::raw::c_void>,
}
/// The btTriangleInfo structure stores information to adjust collision normals to avoid collisions against internal edges
/// it can be generated using
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTriangleInfo {
    pub m_flags: ::std::os::raw::c_int,
    pub m_edgeV0V1Angle: btScalar,
    pub m_edgeV1V2Angle: btScalar,
    pub m_edgeV2V0Angle: btScalar,
}
pub type btInternalTriangleInfoMap = btHashMap<btHashInt, btTriangleInfo>;
#[repr(C)]
pub struct btTriangleInfoMap__bindgen_vtable(::std::os::raw::c_void);
/// The btTriangleInfoMap stores edge angle information for some triangles. You can compute this information yourself or using btGenerateInternalEdgeInfo.
#[repr(C)]
#[derive(Debug)]
pub struct btTriangleInfoMap {
    pub vtable_: *const btTriangleInfoMap__bindgen_vtable,
    pub _base: btInternalTriangleInfoMap,
    pub m_convexEpsilon: btScalar,
    /// used to determine if an edge or contact normal is convex, using the dot product
    pub m_planarEpsilon: btScalar,
    /// used to determine if a triangle edge is planar with zero angle
    pub m_equalVertexThreshold: btScalar,
    /// used to compute connectivity: if the distance between two vertices is smaller than m_equalVertexThreshold, they are considered to be 'shared'
    pub m_edgeDistanceThreshold: btScalar,
    /// used to determine edge contacts: if the closest distance between a contact point and an edge is smaller than this distance threshold it is considered to "hit the edge"
    pub m_maxEdgeAngleThreshold: btScalar,
    pub m_zeroAreaThreshold: btScalar,
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZN17btTriangleInfoMap11deSerializeER21btTriangleInfoMapData"]
    pub fn btTriangleInfoMap_deSerialize(
        this: *mut btTriangleInfoMap,
        data: *mut btTriangleInfoMapData,
    );
}
impl btTriangleInfoMap {
    #[inline]
    pub unsafe fn deSerialize(&mut self, data: *mut btTriangleInfoMapData) {
        btTriangleInfoMap_deSerialize(self, data)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btTriangleInfoMap28calculateSerializeBufferSizeEv"]
    pub fn btTriangleInfoMap_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK17btTriangleInfoMap9serializeEPvP12btSerializer"]
    pub fn btTriangleInfoMap_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
/// those fields have to be float and not btScalar for the serialization to work properly
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTriangleInfoData {
    pub m_flags: ::std::os::raw::c_int,
    pub m_edgeV0V1Angle: f32,
    pub m_edgeV1V2Angle: f32,
    pub m_edgeV2V0Angle: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTriangleInfoMapData {
    pub m_hashTablePtr: *mut ::std::os::raw::c_int,
    pub m_nextPtr: *mut ::std::os::raw::c_int,
    pub m_valueArrayPtr: *mut btTriangleInfoData,
    pub m_keyArrayPtr: *mut ::std::os::raw::c_int,
    pub m_convexEpsilon: f32,
    pub m_planarEpsilon: f32,
    pub m_equalVertexThreshold: f32,
    pub m_edgeDistanceThreshold: f32,
    pub m_zeroAreaThreshold: f32,
    pub m_nextSize: ::std::os::raw::c_int,
    pub m_hashTableSize: ::std::os::raw::c_int,
    pub m_numValues: ::std::os::raw::c_int,
    pub m_numKeys: ::std::os::raw::c_int,
    pub m_padding: [::std::os::raw::c_char; 4usize],
}
pub const btInternalEdgeAdjustFlags_BT_TRIANGLE_CONVEX_BACKFACE_MODE: btInternalEdgeAdjustFlags = 1;
pub const btInternalEdgeAdjustFlags_BT_TRIANGLE_CONCAVE_DOUBLE_SIDED: btInternalEdgeAdjustFlags = 2;
pub const btInternalEdgeAdjustFlags_BT_TRIANGLE_CONVEX_DOUBLE_SIDED: btInternalEdgeAdjustFlags = 4;
pub type btInternalEdgeAdjustFlags = u32;
extern "C" {
    /// Call btGenerateInternalEdgeInfo to create triangle info, store in the shape 'userInfo'
    #[link_name = "\u{1}_Z26btGenerateInternalEdgeInfoP22btBvhTriangleMeshShapeP17btTriangleInfoMap"]
    pub fn btGenerateInternalEdgeInfo(
        trimeshShape: *mut btBvhTriangleMeshShape,
        triangleInfoMap: *mut btTriangleInfoMap,
    );
}
extern "C" {
    /// Call the btFixMeshNormal to adjust the collision normal, using the triangle info map (generated using btGenerateInternalEdgeInfo)
    /// If this info map is missing, or the triangle is not store in this map, nothing will be done
    #[link_name = "\u{1}_Z28btAdjustInternalEdgeContactsR15btManifoldPointPK24btCollisionObjectWrapperS3_iii"]
    pub fn btAdjustInternalEdgeContacts(
        cp: *mut btManifoldPoint,
        trimeshColObj0Wrap: *const btCollisionObjectWrapper,
        otherColObj1Wrap: *const btCollisionObjectWrapper,
        partId0: ::std::os::raw::c_int,
        index0: ::std::os::raw::c_int,
        normalAdjustFlags: ::std::os::raw::c_int,
    );
}
/// btSphereBoxCollisionAlgorithm  provides sphere-box collision detection.
/// Other features are frame-coherency (persistent data) and collision response.
#[repr(C)]
#[derive(Debug)]
pub struct btSphereBoxCollisionAlgorithm {
    pub _base: btActivatingCollisionAlgorithm,
    pub m_ownManifold: bool,
    pub m_manifoldPtr: *mut btPersistentManifold,
    pub m_isSwapped: bool,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSphereBoxCollisionAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
extern "C" {
    #[link_name = "\u{1}_ZN29btSphereBoxCollisionAlgorithm17getSphereDistanceEPK24btCollisionObjectWrapperR9btVector3S4_RfRKS3_ff"]
    pub fn btSphereBoxCollisionAlgorithm_getSphereDistance(
        this: *mut btSphereBoxCollisionAlgorithm,
        boxObjWrap: *const btCollisionObjectWrapper,
        v3PointOnBox: *mut btVector3,
        normal: *mut btVector3,
        penetrationDepth: *mut btScalar,
        v3SphereCenter: *const btVector3,
        fRadius: btScalar,
        maxContactDistance: btScalar,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN29btSphereBoxCollisionAlgorithm20getSpherePenetrationERK9btVector3S2_RS0_S3_"]
    pub fn btSphereBoxCollisionAlgorithm_getSpherePenetration(
        this: *mut btSphereBoxCollisionAlgorithm,
        boxHalfExtent: *const btVector3,
        sphereRelPos: *const btVector3,
        closestPoint: *mut btVector3,
        normal: *mut btVector3,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN29btSphereBoxCollisionAlgorithmC1EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS7_b"]
    pub fn btSphereBoxCollisionAlgorithm_btSphereBoxCollisionAlgorithm(
        this: *mut btSphereBoxCollisionAlgorithm,
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    );
}
impl btSphereBoxCollisionAlgorithm {
    #[inline]
    pub unsafe fn getSphereDistance(
        &mut self,
        boxObjWrap: *const btCollisionObjectWrapper,
        v3PointOnBox: *mut btVector3,
        normal: *mut btVector3,
        penetrationDepth: *mut btScalar,
        v3SphereCenter: *const btVector3,
        fRadius: btScalar,
        maxContactDistance: btScalar,
    ) -> bool {
        btSphereBoxCollisionAlgorithm_getSphereDistance(
            self,
            boxObjWrap,
            v3PointOnBox,
            normal,
            penetrationDepth,
            v3SphereCenter,
            fRadius,
            maxContactDistance,
        )
    }
    #[inline]
    pub unsafe fn getSpherePenetration(
        &mut self,
        boxHalfExtent: *const btVector3,
        sphereRelPos: *const btVector3,
        closestPoint: *mut btVector3,
        normal: *mut btVector3,
    ) -> btScalar {
        btSphereBoxCollisionAlgorithm_getSpherePenetration(
            self,
            boxHalfExtent,
            sphereRelPos,
            closestPoint,
            normal,
        )
    }
    #[inline]
    pub unsafe fn new(
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSphereBoxCollisionAlgorithm_btSphereBoxCollisionAlgorithm(
            &mut __bindgen_tmp,
            mf,
            ci,
            body0Wrap,
            body1Wrap,
            isSwapped,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN29btSphereBoxCollisionAlgorithmD1Ev"]
    pub fn btSphereBoxCollisionAlgorithm_btSphereBoxCollisionAlgorithm_destructor(
        this: *mut btSphereBoxCollisionAlgorithm,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN29btSphereBoxCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btSphereBoxCollisionAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN29btSphereBoxCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btSphereBoxCollisionAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
/// btSphereSphereCollisionAlgorithm  provides sphere-sphere collision detection.
/// Other features are frame-coherency (persistent data) and collision response.
/// Also provides the most basic sample for custom/user btCollisionAlgorithm
#[repr(C)]
#[derive(Debug)]
pub struct btSphereTriangleCollisionAlgorithm {
    pub _base: btActivatingCollisionAlgorithm,
    pub m_ownManifold: bool,
    pub m_manifoldPtr: *mut btPersistentManifold,
    pub m_swapped: bool,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSphereTriangleCollisionAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
extern "C" {
    #[link_name = "\u{1}_ZN34btSphereTriangleCollisionAlgorithmC1EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS7_b"]
    pub fn btSphereTriangleCollisionAlgorithm_btSphereTriangleCollisionAlgorithm(
        this: *mut btSphereTriangleCollisionAlgorithm,
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        swapped: bool,
    );
}
impl btSphereTriangleCollisionAlgorithm {
    #[inline]
    pub unsafe fn new(
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        swapped: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSphereTriangleCollisionAlgorithm_btSphereTriangleCollisionAlgorithm(
            &mut __bindgen_tmp,
            mf,
            ci,
            body0Wrap,
            body1Wrap,
            swapped,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN34btSphereTriangleCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btSphereTriangleCollisionAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN34btSphereTriangleCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btSphereTriangleCollisionAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN34btSphereTriangleCollisionAlgorithmD1Ev"]
    pub fn btSphereTriangleCollisionAlgorithm_btSphereTriangleCollisionAlgorithm_destructor(
        this: *mut btSphereTriangleCollisionAlgorithm,
    );
}
#[repr(C)]
pub struct btCollisionShape__bindgen_vtable(::std::os::raw::c_void);
/// btCollisionObjectWrapperis an internal data structure.
/// Most users can ignore this and use btCollisionObject and btCollisionShape instead
#[repr(C)]
#[derive(Debug)]
pub struct btCollisionShape {
    pub vtable_: *const btCollisionShape__bindgen_vtable,
    pub m_shapeType: ::std::os::raw::c_int,
    pub m_userPointer: *mut ::std::os::raw::c_void,
    pub m_userIndex: ::std::os::raw::c_int,
}
extern "C" {
    /// calculateTemporalAabb calculates the enclosing aabb for the moving object over interval [0..timeStep)
    /// ///result is conservative
    #[link_name = "\u{1}_ZNK16btCollisionShape21calculateTemporalAabbERK11btTransformRK9btVector3S5_fRS3_S6_"]
    pub fn btCollisionShape_calculateTemporalAabb(
        this: *const btCollisionShape,
        curTrans: *const btTransform,
        linvel: *const btVector3,
        angvel: *const btVector3,
        timeStep: btScalar,
        temporalAabbMin: *mut btVector3,
        temporalAabbMax: *mut btVector3,
    );
}
impl btCollisionShape {
    #[inline]
    pub unsafe fn calculateTemporalAabb(
        &self,
        curTrans: *const btTransform,
        linvel: *const btVector3,
        angvel: *const btVector3,
        timeStep: btScalar,
        temporalAabbMin: *mut btVector3,
        temporalAabbMax: *mut btVector3,
    ) {
        btCollisionShape_calculateTemporalAabb(
            self,
            curTrans,
            linvel,
            angvel,
            timeStep,
            temporalAabbMin,
            temporalAabbMax,
        )
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btCollisionShape17getBoundingSphereER9btVector3Rf"]
    pub fn btCollisionShape_getBoundingSphere(
        this: *mut ::std::os::raw::c_void,
        center: *mut btVector3,
        radius: *mut btScalar,
    );
}
extern "C" {
    /// getAngularMotionDisc returns the maximum radius needed for Conservative Advancement to handle time-of-impact with rotations.
    #[link_name = "\u{1}_ZNK16btCollisionShape20getAngularMotionDiscEv"]
    pub fn btCollisionShape_getAngularMotionDisc(this: *mut ::std::os::raw::c_void) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btCollisionShape27getContactBreakingThresholdEf"]
    pub fn btCollisionShape_getContactBreakingThreshold(
        this: *mut ::std::os::raw::c_void,
        defaultContactThresholdFactor: btScalar,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btCollisionShape28calculateSerializeBufferSizeEv"]
    pub fn btCollisionShape_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK16btCollisionShape9serializeEPvP12btSerializer"]
    pub fn btCollisionShape_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btCollisionShape20serializeSingleShapeEP12btSerializer"]
    pub fn btCollisionShape_serializeSingleShape(
        this: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    );
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCollisionShapeData {
    pub m_name: *mut ::std::os::raw::c_char,
    pub m_shapeType: ::std::os::raw::c_int,
    pub m_padding: [::std::os::raw::c_char; 4usize],
}
/// The btConvexShape is an abstract shape interface, implemented by all convex shapes such as btBoxShape, btConvexHullShape etc.
/// It describes general convex shapes using the localGetSupportingVertex interface, used by collision detectors such as btGjkPairDetector.
#[repr(C)]
#[derive(Debug)]
pub struct btConvexShape {
    pub _base: btCollisionShape,
}
extern "C" {
    #[link_name = "\u{1}_ZNK13btConvexShape44localGetSupportVertexWithoutMarginNonVirtualERK9btVector3"]
    pub fn btConvexShape_localGetSupportVertexWithoutMarginNonVirtual(
        this: *const btConvexShape,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13btConvexShape31localGetSupportVertexNonVirtualERK9btVector3"]
    pub fn btConvexShape_localGetSupportVertexNonVirtual(
        this: *const btConvexShape,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13btConvexShape19getMarginNonVirtualEv"]
    pub fn btConvexShape_getMarginNonVirtual(this: *const btConvexShape) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13btConvexShape17getAabbNonVirtualERK11btTransformR9btVector3S4_"]
    pub fn btConvexShape_getAabbNonVirtual(
        this: *const btConvexShape,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13btConvexShapeC2Ev"]
    pub fn btConvexShape_btConvexShape(this: *mut btConvexShape);
}
impl btConvexShape {
    #[inline]
    pub unsafe fn localGetSupportVertexWithoutMarginNonVirtual(
        &self,
        vec: *const btVector3,
    ) -> btVector3 {
        btConvexShape_localGetSupportVertexWithoutMarginNonVirtual(self, vec)
    }
    #[inline]
    pub unsafe fn localGetSupportVertexNonVirtual(&self, vec: *const btVector3) -> btVector3 {
        btConvexShape_localGetSupportVertexNonVirtual(self, vec)
    }
    #[inline]
    pub unsafe fn getMarginNonVirtual(&self) -> btScalar {
        btConvexShape_getMarginNonVirtual(self)
    }
    #[inline]
    pub unsafe fn getAabbNonVirtual(
        &self,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    ) {
        btConvexShape_getAabbNonVirtual(self, t, aabbMin, aabbMax)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConvexShape_btConvexShape(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN13btConvexShapeD1Ev"]
    pub fn btConvexShape_btConvexShape_destructor(this: *mut btConvexShape);
}
extern "C" {
    #[link_name = "\u{1}_ZNK13btConvexShape7projectERK11btTransformRK9btVector3RfS6_RS3_S7_"]
    pub fn btConvexShape_project(
        this: *mut ::std::os::raw::c_void,
        trans: *const btTransform,
        dir: *const btVector3,
        minProj: *mut btScalar,
        maxProj: *mut btScalar,
        witnesPtMin: *mut btVector3,
        witnesPtMax: *mut btVector3,
    );
}
/// The btConvexInternalShape is an internal base class, shared by most convex shape implementations.
/// The btConvexInternalShape uses a default collision margin set to CONVEX_DISTANCE_MARGIN.
/// This collision margin used by Gjk and some other algorithms, see also btCollisionMargin.h
/// Note that when creating small shapes (derived from btConvexInternalShape),
/// you need to make sure to set a smaller collision margin, using the 'setMargin' API
/// There is a automatic mechanism 'setSafeMargin' used by btBoxShape and btCylinderShape
#[repr(C)]
#[derive(Debug)]
pub struct btConvexInternalShape {
    pub _base: btConvexShape,
    pub m_localScaling: btVector3,
    pub m_implicitShapeDimensions: btVector3,
    pub m_collisionMargin: btScalar,
    pub m_padding: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConvexInternalShapeC2Ev"]
    pub fn btConvexInternalShape_btConvexInternalShape(this: *mut btConvexInternalShape);
}
impl btConvexInternalShape {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConvexInternalShape_btConvexInternalShape(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btConvexInternalShape24localGetSupportingVertexERK9btVector3"]
    pub fn btConvexInternalShape_localGetSupportingVertex(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btConvexInternalShape11getAabbSlowERK11btTransformR9btVector3S4_"]
    pub fn btConvexInternalShape_getAabbSlow(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConvexInternalShape15setLocalScalingERK9btVector3"]
    pub fn btConvexInternalShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btConvexInternalShape28calculateSerializeBufferSizeEv"]
    pub fn btConvexInternalShape_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK21btConvexInternalShape9serializeEPvP12btSerializer"]
    pub fn btConvexInternalShape_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btConvexInternalShapeData {
    pub m_collisionShapeData: btCollisionShapeData,
    pub m_localScaling: btVector3FloatData,
    pub m_implicitShapeDimensions: btVector3FloatData,
    pub m_collisionMargin: f32,
    pub m_padding: ::std::os::raw::c_int,
}
/// btConvexInternalAabbCachingShape adds local aabb caching for convex shapes, to avoid expensive bounding box calculations
#[repr(C)]
#[derive(Debug)]
pub struct btConvexInternalAabbCachingShape {
    pub _base: btConvexInternalShape,
    pub m_localAabbMin: btVector3,
    pub m_localAabbMax: btVector3,
    pub m_isLocalAabbValid: bool,
}
extern "C" {
    #[link_name = "\u{1}_ZN32btConvexInternalAabbCachingShape15recalcLocalAabbEv"]
    pub fn btConvexInternalAabbCachingShape_recalcLocalAabb(
        this: *mut btConvexInternalAabbCachingShape,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN32btConvexInternalAabbCachingShapeC2Ev"]
    pub fn btConvexInternalAabbCachingShape_btConvexInternalAabbCachingShape(
        this: *mut btConvexInternalAabbCachingShape,
    );
}
impl btConvexInternalAabbCachingShape {
    #[inline]
    pub unsafe fn recalcLocalAabb(&mut self) {
        btConvexInternalAabbCachingShape_recalcLocalAabb(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConvexInternalAabbCachingShape_btConvexInternalAabbCachingShape(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN32btConvexInternalAabbCachingShape15setLocalScalingERK9btVector3"]
    pub fn btConvexInternalAabbCachingShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK32btConvexInternalAabbCachingShape7getAabbERK11btTransformR9btVector3S4_"]
    pub fn btConvexInternalAabbCachingShape_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
/// The btPolyhedralConvexShape is an internal interface class for polyhedral convex shapes.
#[repr(C)]
#[derive(Debug)]
pub struct btPolyhedralConvexShape {
    pub _base: btConvexInternalShape,
    pub m_polyhedron: *mut btConvexPolyhedron,
}
extern "C" {
    #[link_name = "\u{1}_ZN23btPolyhedralConvexShapeC2Ev"]
    pub fn btPolyhedralConvexShape_btPolyhedralConvexShape(this: *mut btPolyhedralConvexShape);
}
impl btPolyhedralConvexShape {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btPolyhedralConvexShape_btPolyhedralConvexShape(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN23btPolyhedralConvexShapeD1Ev"]
    pub fn btPolyhedralConvexShape_btPolyhedralConvexShape_destructor(
        this: *mut btPolyhedralConvexShape,
    );
}
extern "C" {
    /// optional method mainly used to generate multiple contact points by clipping polyhedral features (faces/edges)
    /// ///experimental/work-in-progress
    #[link_name = "\u{1}_ZN23btPolyhedralConvexShape28initializePolyhedralFeaturesEi"]
    pub fn btPolyhedralConvexShape_initializePolyhedralFeatures(
        this: *mut ::std::os::raw::c_void,
        shiftVerticesByMargin: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btPolyhedralConvexShape37localGetSupportingVertexWithoutMarginERK9btVector3"]
    pub fn btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btPolyhedralConvexShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i"]
    pub fn btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vectors: *const btVector3,
        supportVerticesOut: *mut btVector3,
        numVectors: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btPolyhedralConvexShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btPolyhedralConvexShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
/// The btPolyhedralConvexAabbCachingShape adds aabb caching to the btPolyhedralConvexShape
#[repr(C)]
#[derive(Debug)]
pub struct btPolyhedralConvexAabbCachingShape {
    pub _base: btPolyhedralConvexShape,
    pub m_localAabbMin: btVector3,
    pub m_localAabbMax: btVector3,
    pub m_isLocalAabbValid: bool,
}
extern "C" {
    #[link_name = "\u{1}_ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv"]
    pub fn btPolyhedralConvexAabbCachingShape_recalcLocalAabb(
        this: *mut btPolyhedralConvexAabbCachingShape,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN34btPolyhedralConvexAabbCachingShapeC2Ev"]
    pub fn btPolyhedralConvexAabbCachingShape_btPolyhedralConvexAabbCachingShape(
        this: *mut btPolyhedralConvexAabbCachingShape,
    );
}
impl btPolyhedralConvexAabbCachingShape {
    #[inline]
    pub unsafe fn recalcLocalAabb(&mut self) {
        btPolyhedralConvexAabbCachingShape_recalcLocalAabb(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btPolyhedralConvexAabbCachingShape_btPolyhedralConvexAabbCachingShape(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN34btPolyhedralConvexAabbCachingShape15setLocalScalingERK9btVector3"]
    pub fn btPolyhedralConvexAabbCachingShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK34btPolyhedralConvexAabbCachingShape7getAabbERK11btTransformR9btVector3S4_"]
    pub fn btPolyhedralConvexAabbCachingShape_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
/// The btBox2dShape is a box primitive around the origin, its sides axis aligned with length specified by half extents, in local shape coordinates. When used as part of a btCollisionObject or btRigidBody it will be an oriented box in world space.
#[repr(C)]
#[derive(Debug)]
pub struct btBox2dShape {
    pub _base: btPolyhedralConvexShape,
    pub m_centroid: btVector3,
    pub m_vertices: [btVector3; 4usize],
    pub m_normals: [btVector3; 4usize],
}
extern "C" {
    #[link_name = "\u{1}_ZNK12btBox2dShape7getAabbERK11btTransformR9btVector3S4_"]
    pub fn btBox2dShape_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK12btBox2dShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btBox2dShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
/// The btConvex2dShape allows to use arbitrary convex shapes as 2d convex shapes, with the Z component assumed to be 0.
/// For 2d boxes, the btBox2dShape is recommended.
#[repr(C)]
#[derive(Debug)]
pub struct btConvex2dShape {
    pub _base: btConvexShape,
    pub m_childConvexShape: *mut btConvexShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN15btConvex2dShapeC1EP13btConvexShape"]
    pub fn btConvex2dShape_btConvex2dShape(
        this: *mut btConvex2dShape,
        convexChildShape: *mut btConvexShape,
    );
}
impl btConvex2dShape {
    #[inline]
    pub unsafe fn new(convexChildShape: *mut btConvexShape) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConvex2dShape_btConvex2dShape(&mut __bindgen_tmp, convexChildShape);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN15btConvex2dShapeD1Ev"]
    pub fn btConvex2dShape_btConvex2dShape_destructor(this: *mut btConvex2dShape);
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btConvex2dShape37localGetSupportingVertexWithoutMarginERK9btVector3"]
    pub fn btConvex2dShape_localGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btConvex2dShape24localGetSupportingVertexERK9btVector3"]
    pub fn btConvex2dShape_localGetSupportingVertex(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btConvex2dShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i"]
    pub fn btConvex2dShape_batchedUnitVectorGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vectors: *const btVector3,
        supportVerticesOut: *mut btVector3,
        numVectors: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btConvex2dShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btConvex2dShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
extern "C" {
    /// getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version
    #[link_name = "\u{1}_ZNK15btConvex2dShape7getAabbERK11btTransformR9btVector3S4_"]
    pub fn btConvex2dShape_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btConvex2dShape11getAabbSlowERK11btTransformR9btVector3S4_"]
    pub fn btConvex2dShape_getAabbSlow(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN15btConvex2dShape15setLocalScalingERK9btVector3"]
    pub fn btConvex2dShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btConvex2dShape15getLocalScalingEv"]
    pub fn btConvex2dShape_getLocalScaling(this: *mut ::std::os::raw::c_void) -> *const btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN15btConvex2dShape9setMarginEf"]
    pub fn btConvex2dShape_setMargin(this: *mut ::std::os::raw::c_void, margin: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btConvex2dShape9getMarginEv"]
    pub fn btConvex2dShape_getMargin(this: *mut ::std::os::raw::c_void) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btConvex2dShape36getNumPreferredPenetrationDirectionsEv"]
    pub fn btConvex2dShape_getNumPreferredPenetrationDirections(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btConvex2dShape32getPreferredPenetrationDirectionEiR9btVector3"]
    pub fn btConvex2dShape_getPreferredPenetrationDirection(
        this: *mut ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
        penetrationVector: *mut btVector3,
    );
}
/// The btConvexPointCloudShape implements an implicit convex hull of an array of vertices.
#[repr(C)]
#[derive(Debug)]
pub struct btConvexPointCloudShape {
    pub _base: btPolyhedralConvexAabbCachingShape,
    pub m_unscaledPoints: *mut btVector3,
    pub m_numPoints: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btConvexPointCloudShape24localGetSupportingVertexERK9btVector3"]
    pub fn btConvexPointCloudShape_localGetSupportingVertex(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btConvexPointCloudShape37localGetSupportingVertexWithoutMarginERK9btVector3"]
    pub fn btConvexPointCloudShape_localGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btConvexPointCloudShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i"]
    pub fn btConvexPointCloudShape_batchedUnitVectorGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vectors: *const btVector3,
        supportVerticesOut: *mut btVector3,
        numVectors: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btConvexPointCloudShape14getNumVerticesEv"]
    pub fn btConvexPointCloudShape_getNumVertices(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btConvexPointCloudShape11getNumEdgesEv"]
    pub fn btConvexPointCloudShape_getNumEdges(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btConvexPointCloudShape7getEdgeEiR9btVector3S1_"]
    pub fn btConvexPointCloudShape_getEdge(
        this: *mut ::std::os::raw::c_void,
        i: ::std::os::raw::c_int,
        pa: *mut btVector3,
        pb: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btConvexPointCloudShape9getVertexEiR9btVector3"]
    pub fn btConvexPointCloudShape_getVertex(
        this: *mut ::std::os::raw::c_void,
        i: ::std::os::raw::c_int,
        vtx: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btConvexPointCloudShape12getNumPlanesEv"]
    pub fn btConvexPointCloudShape_getNumPlanes(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btConvexPointCloudShape8getPlaneER9btVector3S1_i"]
    pub fn btConvexPointCloudShape_getPlane(
        this: *mut ::std::os::raw::c_void,
        planeNormal: *mut btVector3,
        planeSupport: *mut btVector3,
        i: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btConvexPointCloudShape8isInsideERK9btVector3f"]
    pub fn btConvexPointCloudShape_isInside(
        this: *mut ::std::os::raw::c_void,
        pt: *const btVector3,
        tolerance: btScalar,
    ) -> bool;
}
extern "C" {
    /// in case we receive negative scaling
    #[link_name = "\u{1}_ZN23btConvexPointCloudShape15setLocalScalingERK9btVector3"]
    pub fn btConvexPointCloudShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btFace {
    pub m_indices: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_plane: [btScalar; 4usize],
}
#[repr(C)]
pub struct btConvexPolyhedron__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btConvexPolyhedron {
    pub vtable_: *const btConvexPolyhedron__bindgen_vtable,
    pub m_vertices: btAlignedObjectArray<btVector3>,
    pub m_faces: btAlignedObjectArray<btFace>,
    pub m_uniqueEdges: btAlignedObjectArray<btVector3>,
    pub m_localCenter: btVector3,
    pub m_extents: btVector3,
    pub m_radius: btScalar,
    pub mC: btVector3,
    pub mE: btVector3,
}
extern "C" {
    #[link_name = "\u{1}_ZN18btConvexPolyhedron10initializeEv"]
    pub fn btConvexPolyhedron_initialize(this: *mut btConvexPolyhedron);
}
extern "C" {
    #[link_name = "\u{1}_ZNK18btConvexPolyhedron15testContainmentEv"]
    pub fn btConvexPolyhedron_testContainment(this: *const btConvexPolyhedron) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK18btConvexPolyhedron7projectERK11btTransformRK9btVector3RfS6_RS3_S7_"]
    pub fn btConvexPolyhedron_project(
        this: *const btConvexPolyhedron,
        trans: *const btTransform,
        dir: *const btVector3,
        minProj: *mut btScalar,
        maxProj: *mut btScalar,
        witnesPtMin: *mut btVector3,
        witnesPtMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18btConvexPolyhedronC1Ev"]
    pub fn btConvexPolyhedron_btConvexPolyhedron(this: *mut btConvexPolyhedron);
}
impl btConvexPolyhedron {
    #[inline]
    pub unsafe fn initialize(&mut self) {
        btConvexPolyhedron_initialize(self)
    }
    #[inline]
    pub unsafe fn testContainment(&self) -> bool {
        btConvexPolyhedron_testContainment(self)
    }
    #[inline]
    pub unsafe fn project(
        &self,
        trans: *const btTransform,
        dir: *const btVector3,
        minProj: *mut btScalar,
        maxProj: *mut btScalar,
        witnesPtMin: *mut btVector3,
        witnesPtMax: *mut btVector3,
    ) {
        btConvexPolyhedron_project(self, trans, dir, minProj, maxProj, witnesPtMin, witnesPtMax)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConvexPolyhedron_btConvexPolyhedron(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN18btConvexPolyhedronD1Ev"]
    pub fn btConvexPolyhedron_btConvexPolyhedron_destructor(this: *mut btConvexPolyhedron);
}
pub const PHY_ScalarType_PHY_FLOAT: PHY_ScalarType = 0;
pub const PHY_ScalarType_PHY_DOUBLE: PHY_ScalarType = 1;
pub const PHY_ScalarType_PHY_INTEGER: PHY_ScalarType = 2;
pub const PHY_ScalarType_PHY_SHORT: PHY_ScalarType = 3;
pub const PHY_ScalarType_PHY_FIXEDPOINT88: PHY_ScalarType = 4;
pub const PHY_ScalarType_PHY_UCHAR: PHY_ScalarType = 5;
/// PHY_ScalarType enumerates possible scalar types.
/// See the btStridingMeshInterface or btHeightfieldTerrainShape for its use
pub type PHY_ScalarType = u32;
/// The btConcaveShape class provides an interface for non-moving (static) concave shapes.
/// It has been implemented by the btStaticPlaneShape, btBvhTriangleMeshShape and btHeightfieldTerrainShape.
#[repr(C)]
#[derive(Debug)]
pub struct btConcaveShape {
    pub _base: btCollisionShape,
    pub m_collisionMargin: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZN14btConcaveShapeC2Ev"]
    pub fn btConcaveShape_btConcaveShape(this: *mut btConcaveShape);
}
impl btConcaveShape {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConcaveShape_btConcaveShape(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN14btConcaveShapeD1Ev"]
    pub fn btConcaveShape_btConcaveShape_destructor(this: *mut btConcaveShape);
}
/// btHeightfieldTerrainShape simulates a 2D heightfield terrain
/// **
/// The caller is responsible for maintaining the heightfield array; this
/// class does not make a copy.
///
/// The heightfield can be dynamic so long as the min/max height values
/// capture the extremes (heights must always be in that range).
///
/// The local origin of the heightfield is assumed to be the exact
/// center (as determined by width and length and height, with each
/// axis multiplied by the localScaling).
///
/// \b NOTE: be careful with coordinates.  If you have a heightfield with a local
/// min height of -100m, and a max height of +500m, you may be tempted to place it
/// at the origin (0,0) and expect the heights in world coordinates to be
/// -100 to +500 meters.
/// Actually, the heights will be -300 to +300m, because bullet will re-center
/// the heightfield based on its AABB (which is determined by the min/max
/// heights).  So keep in mind that once you create a btHeightfieldTerrainShape
/// object, the heights will be adjusted relative to the center of the AABB.  This
/// is different to the behavior of many rendering engines, but is useful for
/// physics engines.
///
/// Most (but not all) rendering and heightfield libraries assume upAxis = 1
/// (that is, the y-axis is "up").  This class allows any of the 3 coordinates
/// to be "up".  Make sure your choice of axis is consistent with your rendering
/// system.
///
/// The heightfield heights are determined from the data type used for the
/// heightfieldData array.
///
/// - PHY_UCHAR: height at a point is the uchar value at the
/// grid point, multipled by heightScale.  uchar isn't recommended
/// because of its inability to deal with negative values, and
/// low resolution (8-bit).
///
/// - PHY_SHORT: height at a point is the short int value at that grid
/// point, multipled by heightScale.
///
/// - PHY_FLOAT: height at a point is the float value at that grid
/// point.  heightScale is ignored when using the float heightfield
/// data type.
///
/// Whatever the caller specifies as minHeight and maxHeight will be honored.
/// The class will not inspect the heightfield to discover the actual minimum
/// or maximum heights.  These values are used to determine the heightfield's
/// axis-aligned bounding box, multiplied by localScaling.
///
/// For usage and testing see the TerrainDemo.
/// */
#[repr(C)]
pub struct btHeightfieldTerrainShape {
    pub _base: btConcaveShape,
    pub m_localAabbMin: btVector3,
    pub m_localAabbMax: btVector3,
    pub m_localOrigin: btVector3,
    /// terrain data
    pub m_heightStickWidth: ::std::os::raw::c_int,
    pub m_heightStickLength: ::std::os::raw::c_int,
    pub m_minHeight: btScalar,
    pub m_maxHeight: btScalar,
    pub m_width: btScalar,
    pub m_length: btScalar,
    pub m_heightScale: btScalar,
    pub __bindgen_anon_1: btHeightfieldTerrainShape__bindgen_ty_1,
    pub m_heightDataType: PHY_ScalarType,
    pub m_flipQuadEdges: bool,
    pub m_useDiamondSubdivision: bool,
    pub m_useZigzagSubdivision: bool,
    pub m_upAxis: ::std::os::raw::c_int,
    pub m_localScaling: btVector3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btHeightfieldTerrainShape__bindgen_ty_1 {
    pub m_heightfieldDataUnsignedChar: *const ::std::os::raw::c_uchar,
    pub m_heightfieldDataShort: *const ::std::os::raw::c_short,
    pub m_heightfieldDataFloat: *const btScalar,
    pub m_heightfieldDataUnknown: *const ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btHeightfieldTerrainShape17quantizeWithClampEPiRK9btVector3i"]
    pub fn btHeightfieldTerrainShape_quantizeWithClamp(
        this: *const btHeightfieldTerrainShape,
        out: *mut ::std::os::raw::c_int,
        point: *const btVector3,
        isMax: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btHeightfieldTerrainShape9getVertexEiiR9btVector3"]
    pub fn btHeightfieldTerrainShape_getVertex(
        this: *const btHeightfieldTerrainShape,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        vertex: *mut btVector3,
    );
}
extern "C" {
    /// protected initialization
    /// /**
    /// Handles the work of constructors so that public constructors can be
    /// backwards-compatible without a lot of copy/paste.
    /// */
    #[link_name = "\u{1}_ZN25btHeightfieldTerrainShape10initializeEiiPKvfffi14PHY_ScalarTypeb"]
    pub fn btHeightfieldTerrainShape_initialize(
        this: *mut btHeightfieldTerrainShape,
        heightStickWidth: ::std::os::raw::c_int,
        heightStickLength: ::std::os::raw::c_int,
        heightfieldData: *const ::std::os::raw::c_void,
        heightScale: btScalar,
        minHeight: btScalar,
        maxHeight: btScalar,
        upAxis: ::std::os::raw::c_int,
        heightDataType: PHY_ScalarType,
        flipQuadEdges: bool,
    );
}
extern "C" {
    /// preferred constructor
    /// /**
    /// This constructor supports a range of heightfield
    /// data types, and allows for a non-zero minimum height value.
    /// heightScale is needed for any integer-based heightfield data types.
    /// */
    #[link_name = "\u{1}_ZN25btHeightfieldTerrainShapeC1EiiPKvfffi14PHY_ScalarTypeb"]
    pub fn btHeightfieldTerrainShape_btHeightfieldTerrainShape(
        this: *mut btHeightfieldTerrainShape,
        heightStickWidth: ::std::os::raw::c_int,
        heightStickLength: ::std::os::raw::c_int,
        heightfieldData: *const ::std::os::raw::c_void,
        heightScale: btScalar,
        minHeight: btScalar,
        maxHeight: btScalar,
        upAxis: ::std::os::raw::c_int,
        heightDataType: PHY_ScalarType,
        flipQuadEdges: bool,
    );
}
extern "C" {
    /// legacy constructor
    /// /**
    /// The legacy constructor assumes the heightfield has a minimum height
    /// of zero.  Only unsigned char or floats are supported.  For legacy
    /// compatibility reasons, heightScale is calculated as maxHeight / 65535
    /// (and is only used when useFloatData = false).
    /// */
    #[link_name = "\u{1}_ZN25btHeightfieldTerrainShapeC1EiiPKvfibb"]
    pub fn btHeightfieldTerrainShape_btHeightfieldTerrainShape1(
        this: *mut btHeightfieldTerrainShape,
        heightStickWidth: ::std::os::raw::c_int,
        heightStickLength: ::std::os::raw::c_int,
        heightfieldData: *const ::std::os::raw::c_void,
        maxHeight: btScalar,
        upAxis: ::std::os::raw::c_int,
        useFloatData: bool,
        flipQuadEdges: bool,
    );
}
impl btHeightfieldTerrainShape {
    #[inline]
    pub unsafe fn quantizeWithClamp(
        &self,
        out: *mut ::std::os::raw::c_int,
        point: *const btVector3,
        isMax: ::std::os::raw::c_int,
    ) {
        btHeightfieldTerrainShape_quantizeWithClamp(self, out, point, isMax)
    }
    #[inline]
    pub unsafe fn getVertex(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        vertex: *mut btVector3,
    ) {
        btHeightfieldTerrainShape_getVertex(self, x, y, vertex)
    }
    #[inline]
    pub unsafe fn initialize(
        &mut self,
        heightStickWidth: ::std::os::raw::c_int,
        heightStickLength: ::std::os::raw::c_int,
        heightfieldData: *const ::std::os::raw::c_void,
        heightScale: btScalar,
        minHeight: btScalar,
        maxHeight: btScalar,
        upAxis: ::std::os::raw::c_int,
        heightDataType: PHY_ScalarType,
        flipQuadEdges: bool,
    ) {
        btHeightfieldTerrainShape_initialize(
            self,
            heightStickWidth,
            heightStickLength,
            heightfieldData,
            heightScale,
            minHeight,
            maxHeight,
            upAxis,
            heightDataType,
            flipQuadEdges,
        )
    }
    #[inline]
    pub unsafe fn new(
        heightStickWidth: ::std::os::raw::c_int,
        heightStickLength: ::std::os::raw::c_int,
        heightfieldData: *const ::std::os::raw::c_void,
        heightScale: btScalar,
        minHeight: btScalar,
        maxHeight: btScalar,
        upAxis: ::std::os::raw::c_int,
        heightDataType: PHY_ScalarType,
        flipQuadEdges: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btHeightfieldTerrainShape_btHeightfieldTerrainShape(
            &mut __bindgen_tmp,
            heightStickWidth,
            heightStickLength,
            heightfieldData,
            heightScale,
            minHeight,
            maxHeight,
            upAxis,
            heightDataType,
            flipQuadEdges,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        heightStickWidth: ::std::os::raw::c_int,
        heightStickLength: ::std::os::raw::c_int,
        heightfieldData: *const ::std::os::raw::c_void,
        maxHeight: btScalar,
        upAxis: ::std::os::raw::c_int,
        useFloatData: bool,
        flipQuadEdges: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btHeightfieldTerrainShape_btHeightfieldTerrainShape1(
            &mut __bindgen_tmp,
            heightStickWidth,
            heightStickLength,
            heightfieldData,
            maxHeight,
            upAxis,
            useFloatData,
            flipQuadEdges,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btHeightfieldTerrainShape22getRawHeightFieldValueEii"]
    pub fn btHeightfieldTerrainShape_getRawHeightFieldValue(
        this: *mut ::std::os::raw::c_void,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN25btHeightfieldTerrainShapeD1Ev"]
    pub fn btHeightfieldTerrainShape_btHeightfieldTerrainShape_destructor(
        this: *mut btHeightfieldTerrainShape,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btHeightfieldTerrainShape7getAabbERK11btTransformR9btVector3S4_"]
    pub fn btHeightfieldTerrainShape_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btHeightfieldTerrainShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_"]
    pub fn btHeightfieldTerrainShape_processAllTriangles(
        this: *mut ::std::os::raw::c_void,
        callback: *mut btTriangleCallback,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btHeightfieldTerrainShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btHeightfieldTerrainShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25btHeightfieldTerrainShape15setLocalScalingERK9btVector3"]
    pub fn btHeightfieldTerrainShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btHeightfieldTerrainShape15getLocalScalingEv"]
    pub fn btHeightfieldTerrainShape_getLocalScaling(
        this: *mut ::std::os::raw::c_void,
    ) -> *const btVector3;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMultiIndex {
    pub ijk: [::std::os::raw::c_uint; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btAlignedBox3d {
    pub m_min: btVector3,
    pub m_max: btVector3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btShapeMatrix {
    pub m_vec: [f64; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btShapeGradients {
    pub m_vec: [btVector3; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCell32 {
    pub m_cells: [::std::os::raw::c_uint; 32usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct btMiniSDF {
    pub m_domain: btAlignedBox3d,
    pub m_resolution: [::std::os::raw::c_uint; 3usize],
    pub m_cell_size: btVector3,
    pub m_inv_cell_size: btVector3,
    pub m_n_cells: usize,
    pub m_n_fields: usize,
    pub m_isValid: bool,
    pub m_nodes: btAlignedObjectArray<btAlignedObjectArray<f64>>,
    pub m_cells: btAlignedObjectArray<btAlignedObjectArray<btCell32>>,
    pub m_cell_map: btAlignedObjectArray<btAlignedObjectArray<::std::os::raw::c_uint>>,
}
extern "C" {
    #[link_name = "\u{1}_ZN9btMiniSDF4loadEPKci"]
    pub fn btMiniSDF_load(
        this: *mut btMiniSDF,
        data: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK9btMiniSDF18multiToSingleIndexERK12btMultiIndex"]
    pub fn btMiniSDF_multiToSingleIndex(
        this: *const btMiniSDF,
        ijk: *const btMultiIndex,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK9btMiniSDF9subdomainERK12btMultiIndex"]
    pub fn btMiniSDF_subdomain(this: *const btMiniSDF, ijk: *const btMultiIndex) -> btAlignedBox3d;
}
extern "C" {
    #[link_name = "\u{1}_ZNK9btMiniSDF18singleToMultiIndexEj"]
    pub fn btMiniSDF_singleToMultiIndex(
        this: *const btMiniSDF,
        l: ::std::os::raw::c_uint,
    ) -> btMultiIndex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK9btMiniSDF9subdomainEj"]
    pub fn btMiniSDF_subdomain1(
        this: *const btMiniSDF,
        l: ::std::os::raw::c_uint,
    ) -> btAlignedBox3d;
}
extern "C" {
    #[link_name = "\u{1}_ZNK9btMiniSDF15shape_function_ERK9btVector3P16btShapeGradients"]
    pub fn btMiniSDF_shape_function_(
        this: *const btMiniSDF,
        xi: *const btVector3,
        gradient: *mut btShapeGradients,
    ) -> btShapeMatrix;
}
extern "C" {
    #[link_name = "\u{1}_ZNK9btMiniSDF11interpolateEjRdRK9btVector3PS1_"]
    pub fn btMiniSDF_interpolate(
        this: *const btMiniSDF,
        field_id: ::std::os::raw::c_uint,
        dist: *mut f64,
        x: *const btVector3,
        gradient: *mut btVector3,
    ) -> bool;
}
impl btMiniSDF {
    #[inline]
    pub unsafe fn load(
        &mut self,
        data: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> bool {
        btMiniSDF_load(self, data, size)
    }
    #[inline]
    pub unsafe fn multiToSingleIndex(&self, ijk: *const btMultiIndex) -> ::std::os::raw::c_uint {
        btMiniSDF_multiToSingleIndex(self, ijk)
    }
    #[inline]
    pub unsafe fn subdomain(&self, ijk: *const btMultiIndex) -> btAlignedBox3d {
        btMiniSDF_subdomain(self, ijk)
    }
    #[inline]
    pub unsafe fn singleToMultiIndex(&self, l: ::std::os::raw::c_uint) -> btMultiIndex {
        btMiniSDF_singleToMultiIndex(self, l)
    }
    #[inline]
    pub unsafe fn subdomain1(&self, l: ::std::os::raw::c_uint) -> btAlignedBox3d {
        btMiniSDF_subdomain1(self, l)
    }
    #[inline]
    pub unsafe fn shape_function_(
        &self,
        xi: *const btVector3,
        gradient: *mut btShapeGradients,
    ) -> btShapeMatrix {
        btMiniSDF_shape_function_(self, xi, gradient)
    }
    #[inline]
    pub unsafe fn interpolate(
        &self,
        field_id: ::std::os::raw::c_uint,
        dist: *mut f64,
        x: *const btVector3,
        gradient: *mut btVector3,
    ) -> bool {
        btMiniSDF_interpolate(self, field_id, dist, x, gradient)
    }
}
/// The btMinkowskiSumShape is only for advanced users. This shape represents implicit based minkowski sum of two convex implicit shapes.
#[repr(C)]
#[derive(Debug)]
pub struct btMinkowskiSumShape {
    pub _base: btConvexInternalShape,
    pub m_transA: btTransform,
    pub m_transB: btTransform,
    pub m_shapeA: *const btConvexShape,
    pub m_shapeB: *const btConvexShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN19btMinkowskiSumShapeC1EPK13btConvexShapeS2_"]
    pub fn btMinkowskiSumShape_btMinkowskiSumShape(
        this: *mut btMinkowskiSumShape,
        shapeA: *const btConvexShape,
        shapeB: *const btConvexShape,
    );
}
impl btMinkowskiSumShape {
    #[inline]
    pub unsafe fn new(shapeA: *const btConvexShape, shapeB: *const btConvexShape) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMinkowskiSumShape_btMinkowskiSumShape(&mut __bindgen_tmp, shapeA, shapeB);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK19btMinkowskiSumShape37localGetSupportingVertexWithoutMarginERK9btVector3"]
    pub fn btMinkowskiSumShape_localGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19btMinkowskiSumShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i"]
    pub fn btMinkowskiSumShape_batchedUnitVectorGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vectors: *const btVector3,
        supportVerticesOut: *mut btVector3,
        numVectors: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK19btMinkowskiSumShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btMinkowskiSumShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK19btMinkowskiSumShape9getMarginEv"]
    pub fn btMinkowskiSumShape_getMargin(this: *mut ::std::os::raw::c_void) -> btScalar;
}
#[repr(C)]
pub struct btStridingMeshInterface__bindgen_vtable(::std::os::raw::c_void);
/// The btStridingMeshInterface is the interface class for high performance generic access to triangle meshes, used in combination with btBvhTriangleMeshShape and some other collision shapes.
/// Using index striding of 3*sizeof(integer) it can use triangle arrays, using index striding of 1*sizeof(integer) it can handle triangle strips.
/// It allows for sharing graphics and collision meshes. Also it provides locking/unlocking of graphics meshes that are in gpu memory.
#[repr(C)]
#[derive(Debug)]
pub struct btStridingMeshInterface {
    pub vtable_: *const btStridingMeshInterface__bindgen_vtable,
    pub m_scaling: btVector3,
}
extern "C" {
    /// brute force method to calculate aabb
    #[link_name = "\u{1}_ZN23btStridingMeshInterface23calculateAabbBruteForceER9btVector3S1_"]
    pub fn btStridingMeshInterface_calculateAabbBruteForce(
        this: *mut btStridingMeshInterface,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
impl btStridingMeshInterface {
    #[inline]
    pub unsafe fn calculateAabbBruteForce(
        &mut self,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    ) {
        btStridingMeshInterface_calculateAabbBruteForce(self, aabbMin, aabbMax)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN23btStridingMeshInterfaceD1Ev"]
    pub fn btStridingMeshInterface_btStridingMeshInterface_destructor(
        this: *mut btStridingMeshInterface,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btStridingMeshInterface27InternalProcessAllTrianglesEP31btInternalTriangleIndexCallbackRK9btVector3S4_"]
    pub fn btStridingMeshInterface_InternalProcessAllTriangles(
        this: *mut ::std::os::raw::c_void,
        callback: *mut btInternalTriangleIndexCallback,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btStridingMeshInterface28calculateSerializeBufferSizeEv"]
    pub fn btStridingMeshInterface_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK23btStridingMeshInterface9serializeEPvP12btSerializer"]
    pub fn btStridingMeshInterface_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btIntIndexData {
    pub m_value: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btShortIntIndexData {
    pub m_value: ::std::os::raw::c_short,
    pub m_pad: [::std::os::raw::c_char; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btShortIntIndexTripletData {
    pub m_values: [::std::os::raw::c_short; 3usize],
    pub m_pad: [::std::os::raw::c_char; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCharIndexTripletData {
    pub m_values: [::std::os::raw::c_uchar; 3usize],
    pub m_pad: ::std::os::raw::c_char,
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMeshPartData {
    pub m_vertices3f: *mut btVector3FloatData,
    pub m_vertices3d: *mut btVector3DoubleData,
    pub m_indices32: *mut btIntIndexData,
    pub m_3indices16: *mut btShortIntIndexTripletData,
    pub m_3indices8: *mut btCharIndexTripletData,
    pub m_indices16: *mut btShortIntIndexData,
    pub m_numTriangles: ::std::os::raw::c_int,
    pub m_numVertices: ::std::os::raw::c_int,
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btStridingMeshInterfaceData {
    pub m_meshPartsPtr: *mut btMeshPartData,
    pub m_scaling: btVector3FloatData,
    pub m_numMeshParts: ::std::os::raw::c_int,
    pub m_padding: [::std::os::raw::c_char; 4usize],
}
/// The btTriangleMeshShape is an internal concave triangle mesh interface. Don't use this class directly, use btBvhTriangleMeshShape instead.
#[repr(C)]
#[derive(Debug)]
pub struct btTriangleMeshShape {
    pub _base: btConcaveShape,
    pub m_localAabbMin: btVector3,
    pub m_localAabbMax: btVector3,
    pub m_meshInterface: *mut btStridingMeshInterface,
}
extern "C" {
    #[link_name = "\u{1}_ZN19btTriangleMeshShape15recalcLocalAabbEv"]
    pub fn btTriangleMeshShape_recalcLocalAabb(this: *mut btTriangleMeshShape);
}
extern "C" {
    /// btTriangleMeshShape constructor has been disabled/protected, so that users will not mistakenly use this class.
    /// ///Don't use btTriangleMeshShape but use btBvhTriangleMeshShape instead!
    #[link_name = "\u{1}_ZN19btTriangleMeshShapeC1EP23btStridingMeshInterface"]
    pub fn btTriangleMeshShape_btTriangleMeshShape(
        this: *mut btTriangleMeshShape,
        meshInterface: *mut btStridingMeshInterface,
    );
}
impl btTriangleMeshShape {
    #[inline]
    pub unsafe fn recalcLocalAabb(&mut self) {
        btTriangleMeshShape_recalcLocalAabb(self)
    }
    #[inline]
    pub unsafe fn new(meshInterface: *mut btStridingMeshInterface) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btTriangleMeshShape_btTriangleMeshShape(&mut __bindgen_tmp, meshInterface);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN19btTriangleMeshShapeD1Ev"]
    pub fn btTriangleMeshShape_btTriangleMeshShape_destructor(this: *mut btTriangleMeshShape);
}
extern "C" {
    #[link_name = "\u{1}_ZNK19btTriangleMeshShape24localGetSupportingVertexERK9btVector3"]
    pub fn btTriangleMeshShape_localGetSupportingVertex(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19btTriangleMeshShape7getAabbERK11btTransformR9btVector3S4_"]
    pub fn btTriangleMeshShape_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_"]
    pub fn btTriangleMeshShape_processAllTriangles(
        this: *mut ::std::os::raw::c_void,
        callback: *mut btTriangleCallback,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK19btTriangleMeshShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btTriangleMeshShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN19btTriangleMeshShape15setLocalScalingERK9btVector3"]
    pub fn btTriangleMeshShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK19btTriangleMeshShape15getLocalScalingEv"]
    pub fn btTriangleMeshShape_getLocalScaling(
        this: *mut ::std::os::raw::c_void,
    ) -> *const btVector3;
}
/// btQuantizedBvhNode is a compressed aabb node, 16 bytes.
/// Node can be used for leafnode or internal node. Leafnodes can point to 32-bit triangle index (non-negative range).
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btQuantizedBvhNode {
    pub m_quantizedAabbMin: [::std::os::raw::c_ushort; 3usize],
    pub m_quantizedAabbMax: [::std::os::raw::c_ushort; 3usize],
    pub m_escapeIndexOrTriangleIndex: ::std::os::raw::c_int,
}
/// btOptimizedBvhNode contains both internal and leaf node information.
/// Total node size is 44 bytes / node. You can use the compressed version of 16 bytes.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btOptimizedBvhNode {
    pub m_aabbMinOrg: btVector3,
    pub m_aabbMaxOrg: btVector3,
    pub m_escapeIndex: ::std::os::raw::c_int,
    pub m_subPart: ::std::os::raw::c_int,
    pub m_triangleIndex: ::std::os::raw::c_int,
    pub m_padding: [::std::os::raw::c_char; 20usize],
}
/// btBvhSubtreeInfo provides info to gather a subtree of limited size
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btBvhSubtreeInfo {
    pub m_quantizedAabbMin: [::std::os::raw::c_ushort; 3usize],
    pub m_quantizedAabbMax: [::std::os::raw::c_ushort; 3usize],
    pub m_rootNodeIndex: ::std::os::raw::c_int,
    pub m_subtreeSize: ::std::os::raw::c_int,
    pub m_padding: [::std::os::raw::c_int; 3usize],
}
#[repr(C)]
pub struct btNodeOverlapCallback__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btNodeOverlapCallback {
    pub vtable_: *const btNodeOverlapCallback__bindgen_vtable,
}
/// for code readability:
pub type NodeArray = btAlignedObjectArray<btOptimizedBvhNode>;
pub type QuantizedNodeArray = btAlignedObjectArray<btQuantizedBvhNode>;
pub type BvhSubtreeInfoArray = btAlignedObjectArray<btBvhSubtreeInfo>;
#[repr(C)]
pub struct btQuantizedBvh__bindgen_vtable(::std::os::raw::c_void);
/// The btQuantizedBvh class stores an AABB tree that can be quickly traversed on CPU and Cell SPU.
/// It is used by the btBvhTriangleMeshShape as midphase.
/// It is recommended to use quantization for better performance and lower memory requirements.
#[repr(C)]
#[derive(Debug)]
pub struct btQuantizedBvh {
    pub vtable_: *const btQuantizedBvh__bindgen_vtable,
    pub m_bvhAabbMin: btVector3,
    pub m_bvhAabbMax: btVector3,
    pub m_bvhQuantization: btVector3,
    pub m_bulletVersion: ::std::os::raw::c_int,
    pub m_curNodeIndex: ::std::os::raw::c_int,
    pub m_useQuantization: bool,
    pub m_leafNodes: NodeArray,
    pub m_contiguousNodes: NodeArray,
    pub m_quantizedLeafNodes: QuantizedNodeArray,
    pub m_quantizedContiguousNodes: QuantizedNodeArray,
    pub m_traversalMode: btQuantizedBvh_btTraversalMode,
    pub m_SubtreeHeaders: BvhSubtreeInfoArray,
    pub m_subtreeHeaderCount: ::std::os::raw::c_int,
}
pub const btQuantizedBvh_btTraversalMode_TRAVERSAL_STACKLESS: btQuantizedBvh_btTraversalMode = 0;
pub const btQuantizedBvh_btTraversalMode_TRAVERSAL_STACKLESS_CACHE_FRIENDLY:
    btQuantizedBvh_btTraversalMode = 1;
pub const btQuantizedBvh_btTraversalMode_TRAVERSAL_RECURSIVE: btQuantizedBvh_btTraversalMode = 2;
pub type btQuantizedBvh_btTraversalMode = u32;
extern "C" {
    #[link_name = "\u{1}_ZN14btQuantizedBvh13swapLeafNodesEii"]
    pub fn btQuantizedBvh_swapLeafNodes(
        this: *mut btQuantizedBvh,
        firstIndex: ::std::os::raw::c_int,
        secondIndex: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14btQuantizedBvh30assignInternalNodeFromLeafNodeEii"]
    pub fn btQuantizedBvh_assignInternalNodeFromLeafNode(
        this: *mut btQuantizedBvh,
        internalNode: ::std::os::raw::c_int,
        leafNodeIndex: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14btQuantizedBvh9buildTreeEii"]
    pub fn btQuantizedBvh_buildTree(
        this: *mut btQuantizedBvh,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14btQuantizedBvh17calcSplittingAxisEii"]
    pub fn btQuantizedBvh_calcSplittingAxis(
        this: *mut btQuantizedBvh,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN14btQuantizedBvh25sortAndCalcSplittingIndexEiii"]
    pub fn btQuantizedBvh_sortAndCalcSplittingIndex(
        this: *mut btQuantizedBvh,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
        splitAxis: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK14btQuantizedBvh17walkStacklessTreeEP21btNodeOverlapCallbackRK9btVector3S4_"]
    pub fn btQuantizedBvh_walkStacklessTree(
        this: *const btQuantizedBvh,
        nodeCallback: *mut btNodeOverlapCallback,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK14btQuantizedBvh36walkStacklessQuantizedTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii"]
    pub fn btQuantizedBvh_walkStacklessQuantizedTreeAgainstRay(
        this: *const btQuantizedBvh,
        nodeCallback: *mut btNodeOverlapCallback,
        raySource: *const btVector3,
        rayTarget: *const btVector3,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
        startNodeIndex: ::std::os::raw::c_int,
        endNodeIndex: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK14btQuantizedBvh26walkStacklessQuantizedTreeEP21btNodeOverlapCallbackPtS2_ii"]
    pub fn btQuantizedBvh_walkStacklessQuantizedTree(
        this: *const btQuantizedBvh,
        nodeCallback: *mut btNodeOverlapCallback,
        quantizedQueryAabbMin: *mut ::std::os::raw::c_ushort,
        quantizedQueryAabbMax: *mut ::std::os::raw::c_ushort,
        startNodeIndex: ::std::os::raw::c_int,
        endNodeIndex: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK14btQuantizedBvh27walkStacklessTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii"]
    pub fn btQuantizedBvh_walkStacklessTreeAgainstRay(
        this: *const btQuantizedBvh,
        nodeCallback: *mut btNodeOverlapCallback,
        raySource: *const btVector3,
        rayTarget: *const btVector3,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
        startNodeIndex: ::std::os::raw::c_int,
        endNodeIndex: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// tree traversal designed for small-memory processors like PS3 SPU
    #[link_name = "\u{1}_ZNK14btQuantizedBvh39walkStacklessQuantizedTreeCacheFriendlyEP21btNodeOverlapCallbackPtS2_"]
    pub fn btQuantizedBvh_walkStacklessQuantizedTreeCacheFriendly(
        this: *const btQuantizedBvh,
        nodeCallback: *mut btNodeOverlapCallback,
        quantizedQueryAabbMin: *mut ::std::os::raw::c_ushort,
        quantizedQueryAabbMax: *mut ::std::os::raw::c_ushort,
    );
}
extern "C" {
    /// use the 16-byte stackless 'skipindex' node tree to do a recursive traversal
    #[link_name = "\u{1}_ZNK14btQuantizedBvh42walkRecursiveQuantizedTreeAgainstQueryAabbEPK18btQuantizedBvhNodeP21btNodeOverlapCallbackPtS5_"]
    pub fn btQuantizedBvh_walkRecursiveQuantizedTreeAgainstQueryAabb(
        this: *const btQuantizedBvh,
        currentNode: *const btQuantizedBvhNode,
        nodeCallback: *mut btNodeOverlapCallback,
        quantizedQueryAabbMin: *mut ::std::os::raw::c_ushort,
        quantizedQueryAabbMax: *mut ::std::os::raw::c_ushort,
    );
}
extern "C" {
    /// use the 16-byte stackless 'skipindex' node tree to do a recursive traversal
    #[link_name = "\u{1}_ZNK14btQuantizedBvh46walkRecursiveQuantizedTreeAgainstQuantizedTreeEPK18btQuantizedBvhNodeS2_P21btNodeOverlapCallback"]
    pub fn btQuantizedBvh_walkRecursiveQuantizedTreeAgainstQuantizedTree(
        this: *const btQuantizedBvh,
        treeNodeA: *const btQuantizedBvhNode,
        treeNodeB: *const btQuantizedBvhNode,
        nodeCallback: *mut btNodeOverlapCallback,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14btQuantizedBvh20updateSubtreeHeadersEii"]
    pub fn btQuantizedBvh_updateSubtreeHeaders(
        this: *mut btQuantizedBvh,
        leftChildNodexIndex: ::std::os::raw::c_int,
        rightChildNodexIndex: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// ***************************************** expert/internal use only *************************
    #[link_name = "\u{1}_ZN14btQuantizedBvh21setQuantizationValuesERK9btVector3S2_f"]
    pub fn btQuantizedBvh_setQuantizationValues(
        this: *mut btQuantizedBvh,
        bvhAabbMin: *const btVector3,
        bvhAabbMax: *const btVector3,
        quantizationMargin: btScalar,
    );
}
extern "C" {
    /// buildInternal is expert use only: assumes that setQuantizationValues and LeafNodeArray are initialized
    #[link_name = "\u{1}_ZN14btQuantizedBvh13buildInternalEv"]
    pub fn btQuantizedBvh_buildInternal(this: *mut btQuantizedBvh);
}
extern "C" {
    /// ***************************************** expert/internal use only *************************
    #[link_name = "\u{1}_ZNK14btQuantizedBvh26reportAabbOverlappingNodexEP21btNodeOverlapCallbackRK9btVector3S4_"]
    pub fn btQuantizedBvh_reportAabbOverlappingNodex(
        this: *const btQuantizedBvh,
        nodeCallback: *mut btNodeOverlapCallback,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK14btQuantizedBvh25reportRayOverlappingNodexEP21btNodeOverlapCallbackRK9btVector3S4_"]
    pub fn btQuantizedBvh_reportRayOverlappingNodex(
        this: *const btQuantizedBvh,
        nodeCallback: *mut btNodeOverlapCallback,
        raySource: *const btVector3,
        rayTarget: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK14btQuantizedBvh29reportBoxCastOverlappingNodexEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_"]
    pub fn btQuantizedBvh_reportBoxCastOverlappingNodex(
        this: *const btQuantizedBvh,
        nodeCallback: *mut btNodeOverlapCallback,
        raySource: *const btVector3,
        rayTarget: *const btVector3,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    /// Calculate space needed to store BVH for serialization
    #[link_name = "\u{1}_ZNK14btQuantizedBvh28calculateSerializeBufferSizeEv"]
    pub fn btQuantizedBvh_calculateSerializeBufferSize(
        this: *const btQuantizedBvh,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    /// deSerializeInPlace loads and initializes a BVH from a buffer in memory 'in place'
    #[link_name = "\u{1}_ZN14btQuantizedBvh18deSerializeInPlaceEPvjb"]
    pub fn btQuantizedBvh_deSerializeInPlace(
        i_alignedDataBuffer: *mut ::std::os::raw::c_void,
        i_dataBufferSize: ::std::os::raw::c_uint,
        i_swapEndian: bool,
    ) -> *mut btQuantizedBvh;
}
extern "C" {
    #[link_name = "\u{1}_ZN14btQuantizedBvh32getAlignmentSerializationPaddingEv"]
    pub fn btQuantizedBvh_getAlignmentSerializationPadding() -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN14btQuantizedBvhC1Ev"]
    pub fn btQuantizedBvh_btQuantizedBvh(this: *mut btQuantizedBvh);
}
impl btQuantizedBvh {
    #[inline]
    pub unsafe fn swapLeafNodes(
        &mut self,
        firstIndex: ::std::os::raw::c_int,
        secondIndex: ::std::os::raw::c_int,
    ) {
        btQuantizedBvh_swapLeafNodes(self, firstIndex, secondIndex)
    }
    #[inline]
    pub unsafe fn assignInternalNodeFromLeafNode(
        &mut self,
        internalNode: ::std::os::raw::c_int,
        leafNodeIndex: ::std::os::raw::c_int,
    ) {
        btQuantizedBvh_assignInternalNodeFromLeafNode(self, internalNode, leafNodeIndex)
    }
    #[inline]
    pub unsafe fn buildTree(
        &mut self,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
    ) {
        btQuantizedBvh_buildTree(self, startIndex, endIndex)
    }
    #[inline]
    pub unsafe fn calcSplittingAxis(
        &mut self,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        btQuantizedBvh_calcSplittingAxis(self, startIndex, endIndex)
    }
    #[inline]
    pub unsafe fn sortAndCalcSplittingIndex(
        &mut self,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
        splitAxis: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        btQuantizedBvh_sortAndCalcSplittingIndex(self, startIndex, endIndex, splitAxis)
    }
    #[inline]
    pub unsafe fn walkStacklessTree(
        &self,
        nodeCallback: *mut btNodeOverlapCallback,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    ) {
        btQuantizedBvh_walkStacklessTree(self, nodeCallback, aabbMin, aabbMax)
    }
    #[inline]
    pub unsafe fn walkStacklessQuantizedTreeAgainstRay(
        &self,
        nodeCallback: *mut btNodeOverlapCallback,
        raySource: *const btVector3,
        rayTarget: *const btVector3,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
        startNodeIndex: ::std::os::raw::c_int,
        endNodeIndex: ::std::os::raw::c_int,
    ) {
        btQuantizedBvh_walkStacklessQuantizedTreeAgainstRay(
            self,
            nodeCallback,
            raySource,
            rayTarget,
            aabbMin,
            aabbMax,
            startNodeIndex,
            endNodeIndex,
        )
    }
    #[inline]
    pub unsafe fn walkStacklessQuantizedTree(
        &self,
        nodeCallback: *mut btNodeOverlapCallback,
        quantizedQueryAabbMin: *mut ::std::os::raw::c_ushort,
        quantizedQueryAabbMax: *mut ::std::os::raw::c_ushort,
        startNodeIndex: ::std::os::raw::c_int,
        endNodeIndex: ::std::os::raw::c_int,
    ) {
        btQuantizedBvh_walkStacklessQuantizedTree(
            self,
            nodeCallback,
            quantizedQueryAabbMin,
            quantizedQueryAabbMax,
            startNodeIndex,
            endNodeIndex,
        )
    }
    #[inline]
    pub unsafe fn walkStacklessTreeAgainstRay(
        &self,
        nodeCallback: *mut btNodeOverlapCallback,
        raySource: *const btVector3,
        rayTarget: *const btVector3,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
        startNodeIndex: ::std::os::raw::c_int,
        endNodeIndex: ::std::os::raw::c_int,
    ) {
        btQuantizedBvh_walkStacklessTreeAgainstRay(
            self,
            nodeCallback,
            raySource,
            rayTarget,
            aabbMin,
            aabbMax,
            startNodeIndex,
            endNodeIndex,
        )
    }
    #[inline]
    pub unsafe fn walkStacklessQuantizedTreeCacheFriendly(
        &self,
        nodeCallback: *mut btNodeOverlapCallback,
        quantizedQueryAabbMin: *mut ::std::os::raw::c_ushort,
        quantizedQueryAabbMax: *mut ::std::os::raw::c_ushort,
    ) {
        btQuantizedBvh_walkStacklessQuantizedTreeCacheFriendly(
            self,
            nodeCallback,
            quantizedQueryAabbMin,
            quantizedQueryAabbMax,
        )
    }
    #[inline]
    pub unsafe fn walkRecursiveQuantizedTreeAgainstQueryAabb(
        &self,
        currentNode: *const btQuantizedBvhNode,
        nodeCallback: *mut btNodeOverlapCallback,
        quantizedQueryAabbMin: *mut ::std::os::raw::c_ushort,
        quantizedQueryAabbMax: *mut ::std::os::raw::c_ushort,
    ) {
        btQuantizedBvh_walkRecursiveQuantizedTreeAgainstQueryAabb(
            self,
            currentNode,
            nodeCallback,
            quantizedQueryAabbMin,
            quantizedQueryAabbMax,
        )
    }
    #[inline]
    pub unsafe fn walkRecursiveQuantizedTreeAgainstQuantizedTree(
        &self,
        treeNodeA: *const btQuantizedBvhNode,
        treeNodeB: *const btQuantizedBvhNode,
        nodeCallback: *mut btNodeOverlapCallback,
    ) {
        btQuantizedBvh_walkRecursiveQuantizedTreeAgainstQuantizedTree(
            self,
            treeNodeA,
            treeNodeB,
            nodeCallback,
        )
    }
    #[inline]
    pub unsafe fn updateSubtreeHeaders(
        &mut self,
        leftChildNodexIndex: ::std::os::raw::c_int,
        rightChildNodexIndex: ::std::os::raw::c_int,
    ) {
        btQuantizedBvh_updateSubtreeHeaders(self, leftChildNodexIndex, rightChildNodexIndex)
    }
    #[inline]
    pub unsafe fn setQuantizationValues(
        &mut self,
        bvhAabbMin: *const btVector3,
        bvhAabbMax: *const btVector3,
        quantizationMargin: btScalar,
    ) {
        btQuantizedBvh_setQuantizationValues(self, bvhAabbMin, bvhAabbMax, quantizationMargin)
    }
    #[inline]
    pub unsafe fn buildInternal(&mut self) {
        btQuantizedBvh_buildInternal(self)
    }
    #[inline]
    pub unsafe fn reportAabbOverlappingNodex(
        &self,
        nodeCallback: *mut btNodeOverlapCallback,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    ) {
        btQuantizedBvh_reportAabbOverlappingNodex(self, nodeCallback, aabbMin, aabbMax)
    }
    #[inline]
    pub unsafe fn reportRayOverlappingNodex(
        &self,
        nodeCallback: *mut btNodeOverlapCallback,
        raySource: *const btVector3,
        rayTarget: *const btVector3,
    ) {
        btQuantizedBvh_reportRayOverlappingNodex(self, nodeCallback, raySource, rayTarget)
    }
    #[inline]
    pub unsafe fn reportBoxCastOverlappingNodex(
        &self,
        nodeCallback: *mut btNodeOverlapCallback,
        raySource: *const btVector3,
        rayTarget: *const btVector3,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    ) {
        btQuantizedBvh_reportBoxCastOverlappingNodex(
            self,
            nodeCallback,
            raySource,
            rayTarget,
            aabbMin,
            aabbMax,
        )
    }
    #[inline]
    pub unsafe fn calculateSerializeBufferSize(&self) -> ::std::os::raw::c_uint {
        btQuantizedBvh_calculateSerializeBufferSize(self)
    }
    #[inline]
    pub unsafe fn deSerializeInPlace(
        i_alignedDataBuffer: *mut ::std::os::raw::c_void,
        i_dataBufferSize: ::std::os::raw::c_uint,
        i_swapEndian: bool,
    ) -> *mut btQuantizedBvh {
        btQuantizedBvh_deSerializeInPlace(i_alignedDataBuffer, i_dataBufferSize, i_swapEndian)
    }
    #[inline]
    pub unsafe fn getAlignmentSerializationPadding() -> ::std::os::raw::c_uint {
        btQuantizedBvh_getAlignmentSerializationPadding()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btQuantizedBvh_btQuantizedBvh(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN14btQuantizedBvhD1Ev"]
    pub fn btQuantizedBvh_btQuantizedBvh_destructor(this: *mut btQuantizedBvh);
}
extern "C" {
    /// Data buffer MUST be 16 byte aligned
    #[link_name = "\u{1}_ZNK14btQuantizedBvh9serializeEPvjb"]
    pub fn btQuantizedBvh_serialize(
        this: *mut ::std::os::raw::c_void,
        o_alignedDataBuffer: *mut ::std::os::raw::c_void,
        i_dataBufferSize: ::std::os::raw::c_uint,
        i_swapEndian: bool,
    ) -> bool;
}
extern "C" {
    ///
    #[link_name = "\u{1}_ZNK14btQuantizedBvh31calculateSerializeBufferSizeNewEv"]
    pub fn btQuantizedBvh_calculateSerializeBufferSizeNew(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK14btQuantizedBvh9serializeEPvP12btSerializer"]
    pub fn btQuantizedBvh_serialize1(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN14btQuantizedBvh16deSerializeFloatER23btQuantizedBvhFloatData"]
    pub fn btQuantizedBvh_deSerializeFloat(
        this: *mut ::std::os::raw::c_void,
        quantizedBvhFloatData: *mut btQuantizedBvhFloatData,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14btQuantizedBvh17deSerializeDoubleER24btQuantizedBvhDoubleData"]
    pub fn btQuantizedBvh_deSerializeDouble(
        this: *mut ::std::os::raw::c_void,
        quantizedBvhDoubleData: *mut btQuantizedBvhDoubleData,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btBvhSubtreeInfoData {
    pub m_rootNodeIndex: ::std::os::raw::c_int,
    pub m_subtreeSize: ::std::os::raw::c_int,
    pub m_quantizedAabbMin: [::std::os::raw::c_ushort; 3usize],
    pub m_quantizedAabbMax: [::std::os::raw::c_ushort; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btOptimizedBvhNodeFloatData {
    pub m_aabbMinOrg: btVector3FloatData,
    pub m_aabbMaxOrg: btVector3FloatData,
    pub m_escapeIndex: ::std::os::raw::c_int,
    pub m_subPart: ::std::os::raw::c_int,
    pub m_triangleIndex: ::std::os::raw::c_int,
    pub m_pad: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btOptimizedBvhNodeDoubleData {
    pub m_aabbMinOrg: btVector3DoubleData,
    pub m_aabbMaxOrg: btVector3DoubleData,
    pub m_escapeIndex: ::std::os::raw::c_int,
    pub m_subPart: ::std::os::raw::c_int,
    pub m_triangleIndex: ::std::os::raw::c_int,
    pub m_pad: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btQuantizedBvhNodeData {
    pub m_quantizedAabbMin: [::std::os::raw::c_ushort; 3usize],
    pub m_quantizedAabbMax: [::std::os::raw::c_ushort; 3usize],
    pub m_escapeIndexOrTriangleIndex: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btQuantizedBvhFloatData {
    pub m_bvhAabbMin: btVector3FloatData,
    pub m_bvhAabbMax: btVector3FloatData,
    pub m_bvhQuantization: btVector3FloatData,
    pub m_curNodeIndex: ::std::os::raw::c_int,
    pub m_useQuantization: ::std::os::raw::c_int,
    pub m_numContiguousLeafNodes: ::std::os::raw::c_int,
    pub m_numQuantizedContiguousNodes: ::std::os::raw::c_int,
    pub m_contiguousNodesPtr: *mut btOptimizedBvhNodeFloatData,
    pub m_quantizedContiguousNodesPtr: *mut btQuantizedBvhNodeData,
    pub m_subTreeInfoPtr: *mut btBvhSubtreeInfoData,
    pub m_traversalMode: ::std::os::raw::c_int,
    pub m_numSubtreeHeaders: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btQuantizedBvhDoubleData {
    pub m_bvhAabbMin: btVector3DoubleData,
    pub m_bvhAabbMax: btVector3DoubleData,
    pub m_bvhQuantization: btVector3DoubleData,
    pub m_curNodeIndex: ::std::os::raw::c_int,
    pub m_useQuantization: ::std::os::raw::c_int,
    pub m_numContiguousLeafNodes: ::std::os::raw::c_int,
    pub m_numQuantizedContiguousNodes: ::std::os::raw::c_int,
    pub m_contiguousNodesPtr: *mut btOptimizedBvhNodeDoubleData,
    pub m_quantizedContiguousNodesPtr: *mut btQuantizedBvhNodeData,
    pub m_traversalMode: ::std::os::raw::c_int,
    pub m_numSubtreeHeaders: ::std::os::raw::c_int,
    pub m_subTreeInfoPtr: *mut btBvhSubtreeInfoData,
}
/// The btOptimizedBvh extends the btQuantizedBvh to create AABB tree for triangle meshes, through the btStridingMeshInterface.
#[repr(C)]
#[derive(Debug)]
pub struct btOptimizedBvh {
    pub _base: btQuantizedBvh,
}
extern "C" {
    #[link_name = "\u{1}_ZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_"]
    pub fn btOptimizedBvh_build(
        this: *mut btOptimizedBvh,
        triangles: *mut btStridingMeshInterface,
        useQuantizedAabbCompression: bool,
        bvhAabbMin: *const btVector3,
        bvhAabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14btOptimizedBvh5refitEP23btStridingMeshInterfaceRK9btVector3S4_"]
    pub fn btOptimizedBvh_refit(
        this: *mut btOptimizedBvh,
        triangles: *mut btStridingMeshInterface,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14btOptimizedBvh12refitPartialEP23btStridingMeshInterfaceRK9btVector3S4_"]
    pub fn btOptimizedBvh_refitPartial(
        this: *mut btOptimizedBvh,
        triangles: *mut btStridingMeshInterface,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14btOptimizedBvh14updateBvhNodesEP23btStridingMeshInterfaceiii"]
    pub fn btOptimizedBvh_updateBvhNodes(
        this: *mut btOptimizedBvh,
        meshInterface: *mut btStridingMeshInterface,
        firstNode: ::std::os::raw::c_int,
        endNode: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// deSerializeInPlace loads and initializes a BVH from a buffer in memory 'in place'
    #[link_name = "\u{1}_ZN14btOptimizedBvh18deSerializeInPlaceEPvjb"]
    pub fn btOptimizedBvh_deSerializeInPlace(
        i_alignedDataBuffer: *mut ::std::os::raw::c_void,
        i_dataBufferSize: ::std::os::raw::c_uint,
        i_swapEndian: bool,
    ) -> *mut btOptimizedBvh;
}
extern "C" {
    #[link_name = "\u{1}_ZN14btOptimizedBvhC1Ev"]
    pub fn btOptimizedBvh_btOptimizedBvh(this: *mut btOptimizedBvh);
}
impl btOptimizedBvh {
    #[inline]
    pub unsafe fn build(
        &mut self,
        triangles: *mut btStridingMeshInterface,
        useQuantizedAabbCompression: bool,
        bvhAabbMin: *const btVector3,
        bvhAabbMax: *const btVector3,
    ) {
        btOptimizedBvh_build(
            self,
            triangles,
            useQuantizedAabbCompression,
            bvhAabbMin,
            bvhAabbMax,
        )
    }
    #[inline]
    pub unsafe fn refit(
        &mut self,
        triangles: *mut btStridingMeshInterface,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    ) {
        btOptimizedBvh_refit(self, triangles, aabbMin, aabbMax)
    }
    #[inline]
    pub unsafe fn refitPartial(
        &mut self,
        triangles: *mut btStridingMeshInterface,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    ) {
        btOptimizedBvh_refitPartial(self, triangles, aabbMin, aabbMax)
    }
    #[inline]
    pub unsafe fn updateBvhNodes(
        &mut self,
        meshInterface: *mut btStridingMeshInterface,
        firstNode: ::std::os::raw::c_int,
        endNode: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) {
        btOptimizedBvh_updateBvhNodes(self, meshInterface, firstNode, endNode, index)
    }
    #[inline]
    pub unsafe fn deSerializeInPlace(
        i_alignedDataBuffer: *mut ::std::os::raw::c_void,
        i_dataBufferSize: ::std::os::raw::c_uint,
        i_swapEndian: bool,
    ) -> *mut btOptimizedBvh {
        btOptimizedBvh_deSerializeInPlace(i_alignedDataBuffer, i_dataBufferSize, i_swapEndian)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btOptimizedBvh_btOptimizedBvh(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN14btOptimizedBvhD1Ev"]
    pub fn btOptimizedBvh_btOptimizedBvh_destructor(this: *mut btOptimizedBvh);
}
/// The btBvhTriangleMeshShape is a static-triangle mesh shape, it can only be used for fixed/non-moving objects.
/// If you required moving concave triangle meshes, it is recommended to perform convex decomposition
/// using HACD, see Bullet/Demos/ConvexDecompositionDemo.
/// Alternatively, you can use btGimpactMeshShape for moving concave triangle meshes.
/// btBvhTriangleMeshShape has several optimizations, such as bounding volume hierarchy and
/// cache friendly traversal for PlayStation 3 Cell SPU.
/// It is recommended to enable useQuantizedAabbCompression for better memory usage.
/// It takes a triangle mesh as input, for example a btTriangleMesh or btTriangleIndexVertexArray. The btBvhTriangleMeshShape class allows for triangle mesh deformations by a refit or partialRefit method.
/// Instead of building the bounding volume hierarchy acceleration structure, it is also possible to serialize (save) and deserialize (load) the structure from disk.
/// See Demos\ConcaveDemo\ConcavePhysicsDemo.cpp for an example.
#[repr(C)]
#[derive(Debug)]
pub struct btBvhTriangleMeshShape {
    pub _base: btTriangleMeshShape,
    pub m_bvh: *mut btOptimizedBvh,
    pub m_triangleInfoMap: *mut btTriangleInfoMap,
    pub m_useQuantizedAabbCompression: bool,
    pub m_ownsBvh: bool,
    pub m_pad: [bool; 11usize],
}
extern "C" {
    #[link_name = "\u{1}_ZN22btBvhTriangleMeshShape14performRaycastEP18btTriangleCallbackRK9btVector3S4_"]
    pub fn btBvhTriangleMeshShape_performRaycast(
        this: *mut btBvhTriangleMeshShape,
        callback: *mut btTriangleCallback,
        raySource: *const btVector3,
        rayTarget: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_"]
    pub fn btBvhTriangleMeshShape_performConvexcast(
        this: *mut btBvhTriangleMeshShape,
        callback: *mut btTriangleCallback,
        boxSource: *const btVector3,
        boxTarget: *const btVector3,
        boxMin: *const btVector3,
        boxMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN22btBvhTriangleMeshShape9refitTreeERK9btVector3S2_"]
    pub fn btBvhTriangleMeshShape_refitTree(
        this: *mut btBvhTriangleMeshShape,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    /// for a fast incremental refit of parts of the tree. Note: the entire AABB of the tree will become more conservative, it never shrinks
    #[link_name = "\u{1}_ZN22btBvhTriangleMeshShape16partialRefitTreeERK9btVector3S2_"]
    pub fn btBvhTriangleMeshShape_partialRefitTree(
        this: *mut btBvhTriangleMeshShape,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN22btBvhTriangleMeshShape15setOptimizedBvhEP14btOptimizedBvhRK9btVector3"]
    pub fn btBvhTriangleMeshShape_setOptimizedBvh(
        this: *mut btBvhTriangleMeshShape,
        bvh: *mut btOptimizedBvh,
        localScaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN22btBvhTriangleMeshShape17buildOptimizedBvhEv"]
    pub fn btBvhTriangleMeshShape_buildOptimizedBvh(this: *mut btBvhTriangleMeshShape);
}
extern "C" {
    #[link_name = "\u{1}_ZN22btBvhTriangleMeshShapeC1EP23btStridingMeshInterfacebb"]
    pub fn btBvhTriangleMeshShape_btBvhTriangleMeshShape(
        this: *mut btBvhTriangleMeshShape,
        meshInterface: *mut btStridingMeshInterface,
        useQuantizedAabbCompression: bool,
        buildBvh: bool,
    );
}
extern "C" {
    /// optionally pass in a larger bvh aabb, used for quantization. This allows for deformations within this aabb
    #[link_name = "\u{1}_ZN22btBvhTriangleMeshShapeC1EP23btStridingMeshInterfacebRK9btVector3S4_b"]
    pub fn btBvhTriangleMeshShape_btBvhTriangleMeshShape1(
        this: *mut btBvhTriangleMeshShape,
        meshInterface: *mut btStridingMeshInterface,
        useQuantizedAabbCompression: bool,
        bvhAabbMin: *const btVector3,
        bvhAabbMax: *const btVector3,
        buildBvh: bool,
    );
}
impl btBvhTriangleMeshShape {
    #[inline]
    pub unsafe fn performRaycast(
        &mut self,
        callback: *mut btTriangleCallback,
        raySource: *const btVector3,
        rayTarget: *const btVector3,
    ) {
        btBvhTriangleMeshShape_performRaycast(self, callback, raySource, rayTarget)
    }
    #[inline]
    pub unsafe fn performConvexcast(
        &mut self,
        callback: *mut btTriangleCallback,
        boxSource: *const btVector3,
        boxTarget: *const btVector3,
        boxMin: *const btVector3,
        boxMax: *const btVector3,
    ) {
        btBvhTriangleMeshShape_performConvexcast(
            self, callback, boxSource, boxTarget, boxMin, boxMax,
        )
    }
    #[inline]
    pub unsafe fn refitTree(&mut self, aabbMin: *const btVector3, aabbMax: *const btVector3) {
        btBvhTriangleMeshShape_refitTree(self, aabbMin, aabbMax)
    }
    #[inline]
    pub unsafe fn partialRefitTree(
        &mut self,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    ) {
        btBvhTriangleMeshShape_partialRefitTree(self, aabbMin, aabbMax)
    }
    #[inline]
    pub unsafe fn setOptimizedBvh(
        &mut self,
        bvh: *mut btOptimizedBvh,
        localScaling: *const btVector3,
    ) {
        btBvhTriangleMeshShape_setOptimizedBvh(self, bvh, localScaling)
    }
    #[inline]
    pub unsafe fn buildOptimizedBvh(&mut self) {
        btBvhTriangleMeshShape_buildOptimizedBvh(self)
    }
    #[inline]
    pub unsafe fn new(
        meshInterface: *mut btStridingMeshInterface,
        useQuantizedAabbCompression: bool,
        buildBvh: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btBvhTriangleMeshShape_btBvhTriangleMeshShape(
            &mut __bindgen_tmp,
            meshInterface,
            useQuantizedAabbCompression,
            buildBvh,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        meshInterface: *mut btStridingMeshInterface,
        useQuantizedAabbCompression: bool,
        bvhAabbMin: *const btVector3,
        bvhAabbMax: *const btVector3,
        buildBvh: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btBvhTriangleMeshShape_btBvhTriangleMeshShape1(
            &mut __bindgen_tmp,
            meshInterface,
            useQuantizedAabbCompression,
            bvhAabbMin,
            bvhAabbMax,
            buildBvh,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN22btBvhTriangleMeshShapeD1Ev"]
    pub fn btBvhTriangleMeshShape_btBvhTriangleMeshShape_destructor(
        this: *mut btBvhTriangleMeshShape,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_"]
    pub fn btBvhTriangleMeshShape_processAllTriangles(
        this: *mut ::std::os::raw::c_void,
        callback: *mut btTriangleCallback,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN22btBvhTriangleMeshShape15setLocalScalingERK9btVector3"]
    pub fn btBvhTriangleMeshShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK22btBvhTriangleMeshShape28calculateSerializeBufferSizeEv"]
    pub fn btBvhTriangleMeshShape_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK22btBvhTriangleMeshShape9serializeEPvP12btSerializer"]
    pub fn btBvhTriangleMeshShape_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK22btBvhTriangleMeshShape18serializeSingleBvhEP12btSerializer"]
    pub fn btBvhTriangleMeshShape_serializeSingleBvh(
        this: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK22btBvhTriangleMeshShape30serializeSingleTriangleInfoMapEP12btSerializer"]
    pub fn btBvhTriangleMeshShape_serializeSingleTriangleInfoMap(
        this: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    );
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTriangleMeshShapeData {
    pub m_collisionShapeData: btCollisionShapeData,
    pub m_meshInterface: btStridingMeshInterfaceData,
    pub m_quantizedFloatBvh: *mut btQuantizedBvhFloatData,
    pub m_quantizedDoubleBvh: *mut btQuantizedBvhDoubleData,
    pub m_triangleInfoMap: *mut btTriangleInfoMapData,
    pub m_collisionMargin: f32,
    pub m_pad3: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMaterial {
    pub m_friction: btScalar,
    pub m_restitution: btScalar,
    pub pad: [::std::os::raw::c_int; 2usize],
}
/// The BvhTriangleMaterialMeshShape extends the btBvhTriangleMeshShape. Its main contribution is the interface into a material array, which allows per-triangle friction and restitution.
#[repr(C)]
#[derive(Debug)]
pub struct btMultimaterialTriangleMeshShape {
    pub _base: btBvhTriangleMeshShape,
    pub m_materialList: btAlignedObjectArray<*mut btMaterial>,
}
extern "C" {
    /// Obtains the material for a specific triangle
    #[link_name = "\u{1}_ZN32btMultimaterialTriangleMeshShape21getMaterialPropertiesEii"]
    pub fn btMultimaterialTriangleMeshShape_getMaterialProperties(
        this: *mut btMultimaterialTriangleMeshShape,
        partID: ::std::os::raw::c_int,
        triIndex: ::std::os::raw::c_int,
    ) -> *const btMaterial;
}
impl btMultimaterialTriangleMeshShape {
    #[inline]
    pub unsafe fn getMaterialProperties(
        &mut self,
        partID: ::std::os::raw::c_int,
        triIndex: ::std::os::raw::c_int,
    ) -> *const btMaterial {
        btMultimaterialTriangleMeshShape_getMaterialProperties(self, partID, triIndex)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct btSdfCollisionShape {
    pub _base: btConcaveShape,
    pub m_data: *mut btSdfCollisionShapeInternalData,
}
extern "C" {
    #[link_name = "\u{1}_ZN19btSdfCollisionShape13initializeSDFEPKci"]
    pub fn btSdfCollisionShape_initializeSDF(
        this: *mut btSdfCollisionShape,
        sdfData: *const ::std::os::raw::c_char,
        sizeInBytes: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN19btSdfCollisionShape10queryPointERK9btVector3RfRS0_"]
    pub fn btSdfCollisionShape_queryPoint(
        this: *mut btSdfCollisionShape,
        ptInSDF: *const btVector3,
        distOut: *mut btScalar,
        normal: *mut btVector3,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN19btSdfCollisionShapeC1Ev"]
    pub fn btSdfCollisionShape_btSdfCollisionShape(this: *mut btSdfCollisionShape);
}
impl btSdfCollisionShape {
    #[inline]
    pub unsafe fn initializeSDF(
        &mut self,
        sdfData: *const ::std::os::raw::c_char,
        sizeInBytes: ::std::os::raw::c_int,
    ) -> bool {
        btSdfCollisionShape_initializeSDF(self, sdfData, sizeInBytes)
    }
    #[inline]
    pub unsafe fn queryPoint(
        &mut self,
        ptInSDF: *const btVector3,
        distOut: *mut btScalar,
        normal: *mut btVector3,
    ) -> bool {
        btSdfCollisionShape_queryPoint(self, ptInSDF, distOut, normal)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSdfCollisionShape_btSdfCollisionShape(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN19btSdfCollisionShapeD1Ev"]
    pub fn btSdfCollisionShape_btSdfCollisionShape_destructor(this: *mut btSdfCollisionShape);
}
extern "C" {
    #[link_name = "\u{1}_ZNK19btSdfCollisionShape7getAabbERK11btTransformR9btVector3S4_"]
    pub fn btSdfCollisionShape_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN19btSdfCollisionShape15setLocalScalingERK9btVector3"]
    pub fn btSdfCollisionShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK19btSdfCollisionShape15getLocalScalingEv"]
    pub fn btSdfCollisionShape_getLocalScaling(
        this: *mut ::std::os::raw::c_void,
    ) -> *const btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19btSdfCollisionShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btSdfCollisionShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK19btSdfCollisionShape7getNameEv"]
    pub fn btSdfCollisionShape_getName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN19btSdfCollisionShape9setMarginEf"]
    pub fn btSdfCollisionShape_setMargin(this: *mut ::std::os::raw::c_void, margin: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZNK19btSdfCollisionShape9getMarginEv"]
    pub fn btSdfCollisionShape_getMargin(this: *mut ::std::os::raw::c_void) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19btSdfCollisionShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_"]
    pub fn btSdfCollisionShape_processAllTriangles(
        this: *mut ::std::os::raw::c_void,
        callback: *mut btTriangleCallback,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
/// The btShapeHull class takes a btConvexShape, builds a simplified convex hull using btConvexHull and provides triangle indices and vertices.
/// It can be useful for to simplify a complex convex object and for visualization of a non-polyhedral convex object.
/// It approximates the convex hull using the supporting vertex of 42 directions.
#[repr(C)]
#[derive(Debug)]
pub struct btShapeHull {
    pub m_vertices: btAlignedObjectArray<btVector3>,
    pub m_indices: btAlignedObjectArray<::std::os::raw::c_uint>,
    pub m_numIndices: ::std::os::raw::c_uint,
    pub m_shape: *const btConvexShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN11btShapeHull19getUnitSpherePointsEi"]
    pub fn btShapeHull_getUnitSpherePoints(highres: ::std::os::raw::c_int) -> *mut btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN11btShapeHull9buildHullEfi"]
    pub fn btShapeHull_buildHull(
        this: *mut btShapeHull,
        margin: btScalar,
        highres: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btShapeHull12numTrianglesEv"]
    pub fn btShapeHull_numTriangles(this: *const btShapeHull) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btShapeHull11numVerticesEv"]
    pub fn btShapeHull_numVertices(this: *const btShapeHull) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btShapeHull10numIndicesEv"]
    pub fn btShapeHull_numIndices(this: *const btShapeHull) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN11btShapeHullC1EPK13btConvexShape"]
    pub fn btShapeHull_btShapeHull(this: *mut btShapeHull, shape: *const btConvexShape);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btShapeHullD1Ev"]
    pub fn btShapeHull_btShapeHull_destructor(this: *mut btShapeHull);
}
impl btShapeHull {
    #[inline]
    pub unsafe fn getUnitSpherePoints(highres: ::std::os::raw::c_int) -> *mut btVector3 {
        btShapeHull_getUnitSpherePoints(highres)
    }
    #[inline]
    pub unsafe fn buildHull(&mut self, margin: btScalar, highres: ::std::os::raw::c_int) -> bool {
        btShapeHull_buildHull(self, margin, highres)
    }
    #[inline]
    pub unsafe fn numTriangles(&self) -> ::std::os::raw::c_int {
        btShapeHull_numTriangles(self)
    }
    #[inline]
    pub unsafe fn numVertices(&self) -> ::std::os::raw::c_int {
        btShapeHull_numVertices(self)
    }
    #[inline]
    pub unsafe fn numIndices(&self) -> ::std::os::raw::c_int {
        btShapeHull_numIndices(self)
    }
    #[inline]
    pub unsafe fn new(shape: *const btConvexShape) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btShapeHull_btShapeHull(&mut __bindgen_tmp, shape);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        btShapeHull_btShapeHull_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTriangle {
    pub m_vertex0: btVector3,
    pub m_vertex1: btVector3,
    pub m_vertex2: btVector3,
    pub m_partId: ::std::os::raw::c_int,
    pub m_triangleIndex: ::std::os::raw::c_int,
}
/// The btTriangleBuffer callback can be useful to collect and store overlapping triangles between AABB and concave objects that support 'processAllTriangles'
/// Example usage of this class:
/// btTriangleBuffer	triBuf;
/// concaveShape->processAllTriangles(&triBuf,aabbMin, aabbMax);
/// for (int i=0;i<triBuf.getNumTriangles();i++)
/// {
/// const btTriangle& tri = triBuf.getTriangle(i);
/// //do something useful here with the triangle
/// }
#[repr(C)]
#[derive(Debug)]
pub struct btTriangleBuffer {
    pub _base: btTriangleCallback,
    pub m_triangleBuffer: btAlignedObjectArray<btTriangle>,
}
extern "C" {
    #[link_name = "\u{1}_ZN16btTriangleBuffer15processTriangleEP9btVector3ii"]
    pub fn btTriangleBuffer_processTriangle(
        this: *mut ::std::os::raw::c_void,
        triangle: *mut btVector3,
        partId: ::std::os::raw::c_int,
        triangleIndex: ::std::os::raw::c_int,
    );
}
/// The btIndexedMesh indexes a single vertex and index array. Multiple btIndexedMesh objects can be passed into a btTriangleIndexVertexArray using addIndexedMesh.
/// Instead of the number of indices, we pass the number of triangles.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btIndexedMesh {
    pub m_numTriangles: ::std::os::raw::c_int,
    pub m_triangleIndexBase: *const ::std::os::raw::c_uchar,
    pub m_triangleIndexStride: ::std::os::raw::c_int,
    pub m_numVertices: ::std::os::raw::c_int,
    pub m_vertexBase: *const ::std::os::raw::c_uchar,
    pub m_vertexStride: ::std::os::raw::c_int,
    pub m_indexType: PHY_ScalarType,
    pub m_vertexType: PHY_ScalarType,
}
pub type IndexedMeshArray = btAlignedObjectArray<btIndexedMesh>;
/// The btTriangleIndexVertexArray allows to access multiple triangle meshes, by indexing into existing triangle/index arrays.
/// Additional meshes can be added using addIndexedMesh
/// No duplicate is made of the vertex/index data, it only indexes into external vertex/index arrays.
/// So keep those arrays around during the lifetime of this btTriangleIndexVertexArray.
#[repr(C)]
#[derive(Debug)]
pub struct btTriangleIndexVertexArray {
    pub _base: btStridingMeshInterface,
    pub m_indexedMeshes: IndexedMeshArray,
    pub m_pad: [::std::os::raw::c_int; 2usize],
    pub m_hasAabb: ::std::os::raw::c_int,
    pub m_aabbMin: btVector3,
    pub m_aabbMax: btVector3,
}
extern "C" {
    #[link_name = "\u{1}_ZN26btTriangleIndexVertexArrayC1EiPiiiPfi"]
    pub fn btTriangleIndexVertexArray_btTriangleIndexVertexArray(
        this: *mut btTriangleIndexVertexArray,
        numTriangles: ::std::os::raw::c_int,
        triangleIndexBase: *mut ::std::os::raw::c_int,
        triangleIndexStride: ::std::os::raw::c_int,
        numVertices: ::std::os::raw::c_int,
        vertexBase: *mut btScalar,
        vertexStride: ::std::os::raw::c_int,
    );
}
impl btTriangleIndexVertexArray {
    #[inline]
    pub unsafe fn new(
        numTriangles: ::std::os::raw::c_int,
        triangleIndexBase: *mut ::std::os::raw::c_int,
        triangleIndexStride: ::std::os::raw::c_int,
        numVertices: ::std::os::raw::c_int,
        vertexBase: *mut btScalar,
        vertexStride: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btTriangleIndexVertexArray_btTriangleIndexVertexArray(
            &mut __bindgen_tmp,
            numTriangles,
            triangleIndexBase,
            triangleIndexStride,
            numVertices,
            vertexBase,
            vertexStride,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN26btTriangleIndexVertexArrayD1Ev"]
    pub fn btTriangleIndexVertexArray_btTriangleIndexVertexArray_destructor(
        this: *mut btTriangleIndexVertexArray,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN26btTriangleIndexVertexArray24getLockedVertexIndexBaseEPPhRiR14PHY_ScalarTypeS2_S1_S2_S2_S4_i"]
    pub fn btTriangleIndexVertexArray_getLockedVertexIndexBase(
        this: *mut ::std::os::raw::c_void,
        vertexbase: *mut *mut ::std::os::raw::c_uchar,
        numverts: *mut ::std::os::raw::c_int,
        type_: *mut PHY_ScalarType,
        vertexStride: *mut ::std::os::raw::c_int,
        indexbase: *mut *mut ::std::os::raw::c_uchar,
        indexstride: *mut ::std::os::raw::c_int,
        numfaces: *mut ::std::os::raw::c_int,
        indicestype: *mut PHY_ScalarType,
        subpart: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK26btTriangleIndexVertexArray32getLockedReadOnlyVertexIndexBaseEPPKhRiR14PHY_ScalarTypeS3_S2_S3_S3_S5_i"]
    pub fn btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase(
        this: *mut ::std::os::raw::c_void,
        vertexbase: *mut *const ::std::os::raw::c_uchar,
        numverts: *mut ::std::os::raw::c_int,
        type_: *mut PHY_ScalarType,
        vertexStride: *mut ::std::os::raw::c_int,
        indexbase: *mut *const ::std::os::raw::c_uchar,
        indexstride: *mut ::std::os::raw::c_int,
        numfaces: *mut ::std::os::raw::c_int,
        indicestype: *mut PHY_ScalarType,
        subpart: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK26btTriangleIndexVertexArray14hasPremadeAabbEv"]
    pub fn btTriangleIndexVertexArray_hasPremadeAabb(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK26btTriangleIndexVertexArray14setPremadeAabbERK9btVector3S2_"]
    pub fn btTriangleIndexVertexArray_setPremadeAabb(
        this: *mut ::std::os::raw::c_void,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK26btTriangleIndexVertexArray14getPremadeAabbEP9btVector3S1_"]
    pub fn btTriangleIndexVertexArray_getPremadeAabb(
        this: *mut ::std::os::raw::c_void,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMaterialProperties {
    /// m_materialBase ==========> 2 btScalar values make up one material, friction then restitution
    pub m_numMaterials: ::std::os::raw::c_int,
    pub m_materialBase: *const ::std::os::raw::c_uchar,
    pub m_materialStride: ::std::os::raw::c_int,
    pub m_materialType: PHY_ScalarType,
    /// m_numTriangles <=========== This exists in the btIndexedMesh object for the same subpart, but since we're
    /// ///                           padding the structure, it can be reproduced at no real cost
    /// ///m_triangleMaterials =====> 1 integer value makes up one entry
    /// ///                           eg: m_triangleMaterials[1] = 5; // This will set triangle 2 to use material 5
    pub m_numTriangles: ::std::os::raw::c_int,
    pub m_triangleMaterialsBase: *const ::std::os::raw::c_uchar,
    pub m_triangleMaterialStride: ::std::os::raw::c_int,
    /// m_triangleType <========== Automatically set in addMaterialProperties
    pub m_triangleType: PHY_ScalarType,
}
pub type MaterialArray = btAlignedObjectArray<btMaterialProperties>;
/// Teh btTriangleIndexVertexMaterialArray is built on TriangleIndexVertexArray
/// The addition of a material array allows for the utilization of the partID and
/// triangleIndex that are returned in the ContactAddedCallback.  As with
/// TriangleIndexVertexArray, no duplicate is made of the material data, so it
/// is the users responsibility to maintain the array during the lifetime of the
/// TriangleIndexVertexMaterialArray.
#[repr(C)]
#[derive(Debug)]
pub struct btTriangleIndexVertexMaterialArray {
    pub _base: btTriangleIndexVertexArray,
    pub m_materials: MaterialArray,
}
extern "C" {
    #[link_name = "\u{1}_ZN34btTriangleIndexVertexMaterialArrayC1EiPiiiPfiiPhiS0_i"]
    pub fn btTriangleIndexVertexMaterialArray_btTriangleIndexVertexMaterialArray(
        this: *mut btTriangleIndexVertexMaterialArray,
        numTriangles: ::std::os::raw::c_int,
        triangleIndexBase: *mut ::std::os::raw::c_int,
        triangleIndexStride: ::std::os::raw::c_int,
        numVertices: ::std::os::raw::c_int,
        vertexBase: *mut btScalar,
        vertexStride: ::std::os::raw::c_int,
        numMaterials: ::std::os::raw::c_int,
        materialBase: *mut ::std::os::raw::c_uchar,
        materialStride: ::std::os::raw::c_int,
        triangleMaterialsBase: *mut ::std::os::raw::c_int,
        materialIndexStride: ::std::os::raw::c_int,
    );
}
impl btTriangleIndexVertexMaterialArray {
    #[inline]
    pub unsafe fn new(
        numTriangles: ::std::os::raw::c_int,
        triangleIndexBase: *mut ::std::os::raw::c_int,
        triangleIndexStride: ::std::os::raw::c_int,
        numVertices: ::std::os::raw::c_int,
        vertexBase: *mut btScalar,
        vertexStride: ::std::os::raw::c_int,
        numMaterials: ::std::os::raw::c_int,
        materialBase: *mut ::std::os::raw::c_uchar,
        materialStride: ::std::os::raw::c_int,
        triangleMaterialsBase: *mut ::std::os::raw::c_int,
        materialIndexStride: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btTriangleIndexVertexMaterialArray_btTriangleIndexVertexMaterialArray(
            &mut __bindgen_tmp,
            numTriangles,
            triangleIndexBase,
            triangleIndexStride,
            numVertices,
            vertexBase,
            vertexStride,
            numMaterials,
            materialBase,
            materialStride,
            triangleMaterialsBase,
            materialIndexStride,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN34btTriangleIndexVertexMaterialArray21getLockedMaterialBaseEPPhRiR14PHY_ScalarTypeS2_S1_S2_S2_S4_i"]
    pub fn btTriangleIndexVertexMaterialArray_getLockedMaterialBase(
        this: *mut ::std::os::raw::c_void,
        materialBase: *mut *mut ::std::os::raw::c_uchar,
        numMaterials: *mut ::std::os::raw::c_int,
        materialType: *mut PHY_ScalarType,
        materialStride: *mut ::std::os::raw::c_int,
        triangleMaterialBase: *mut *mut ::std::os::raw::c_uchar,
        numTriangles: *mut ::std::os::raw::c_int,
        triangleMaterialStride: *mut ::std::os::raw::c_int,
        triangleType: *mut PHY_ScalarType,
        subpart: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN34btTriangleIndexVertexMaterialArray29getLockedReadOnlyMaterialBaseEPPKhRiR14PHY_ScalarTypeS3_S2_S3_S3_S5_i"]
    pub fn btTriangleIndexVertexMaterialArray_getLockedReadOnlyMaterialBase(
        this: *mut ::std::os::raw::c_void,
        materialBase: *mut *const ::std::os::raw::c_uchar,
        numMaterials: *mut ::std::os::raw::c_int,
        materialType: *mut PHY_ScalarType,
        materialStride: *mut ::std::os::raw::c_int,
        triangleMaterialBase: *mut *const ::std::os::raw::c_uchar,
        numTriangles: *mut ::std::os::raw::c_int,
        triangleMaterialStride: *mut ::std::os::raw::c_int,
        triangleType: *mut PHY_ScalarType,
        subpart: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCompoundShapeChild {
    pub m_transform: btTransform,
    pub m_childShape: *mut btCollisionShape,
    pub m_childShapeType: ::std::os::raw::c_int,
    pub m_childMargin: btScalar,
    pub m_node: *mut btDbvtNode,
}
/// The btCompoundShape allows to store multiple other btCollisionShapes
/// This allows for moving concave collision objects. This is more general then the static concave btBvhTriangleMeshShape.
/// It has an (optional) dynamic aabb tree to accelerate early rejection tests.
/// @todo: This aabb tree can also be use to speed up ray tests on btCompoundShape, see http://code.google.com/p/bullet/issues/detail?id=25
/// Currently, removal of child shapes is only supported when disabling the aabb tree (pass 'false' in the constructor of btCompoundShape)
#[repr(C)]
#[derive(Debug)]
pub struct btCompoundShape {
    pub _base: btCollisionShape,
    pub m_children: btAlignedObjectArray<btCompoundShapeChild>,
    pub m_localAabbMin: btVector3,
    pub m_localAabbMax: btVector3,
    pub m_dynamicAabbTree: *mut btDbvt,
    /// increment m_updateRevision when adding/removing/replacing child shapes, so that some caches can be updated
    pub m_updateRevision: ::std::os::raw::c_int,
    pub m_collisionMargin: btScalar,
    pub m_localScaling: btVector3,
}
extern "C" {
    #[link_name = "\u{1}_ZN15btCompoundShape13addChildShapeERK11btTransformP16btCollisionShape"]
    pub fn btCompoundShape_addChildShape(
        this: *mut btCompoundShape,
        localTransform: *const btTransform,
        shape: *mut btCollisionShape,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN15btCompoundShape23removeChildShapeByIndexEi"]
    pub fn btCompoundShape_removeChildShapeByIndex(
        this: *mut btCompoundShape,
        childShapeindex: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// set a new transform for a child, and update internal data structures (local aabb and dynamic tree)
    #[link_name = "\u{1}_ZN15btCompoundShape20updateChildTransformEiRK11btTransformb"]
    pub fn btCompoundShape_updateChildTransform(
        this: *mut btCompoundShape,
        childIndex: ::std::os::raw::c_int,
        newChildTransform: *const btTransform,
        shouldRecalculateLocalAabb: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN15btCompoundShape26createAabbTreeFromChildrenEv"]
    pub fn btCompoundShape_createAabbTreeFromChildren(this: *mut btCompoundShape);
}
extern "C" {
    /// computes the exact moment of inertia and the transform from the coordinate system defined by the principal axes of the moment of inertia
    /// ///and the center of mass to the current coordinate system. "masses" points to an array of masses of the children. The resulting transform
    /// ///"principal" has to be applied inversely to all children transforms in order for the local coordinate system of the compound
    /// ///shape to be centered at the center of mass and to coincide with the principal axes. This also necessitates a correction of the world transform
    /// ///of the collision object by the principal transform.
    #[link_name = "\u{1}_ZNK15btCompoundShape31calculatePrincipalAxisTransformEPKfR11btTransformR9btVector3"]
    pub fn btCompoundShape_calculatePrincipalAxisTransform(
        this: *const btCompoundShape,
        masses: *const btScalar,
        principal: *mut btTransform,
        inertia: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN15btCompoundShapeC1Ebi"]
    pub fn btCompoundShape_btCompoundShape(
        this: *mut btCompoundShape,
        enableDynamicAabbTree: bool,
        initialChildCapacity: ::std::os::raw::c_int,
    );
}
impl btCompoundShape {
    #[inline]
    pub unsafe fn addChildShape(
        &mut self,
        localTransform: *const btTransform,
        shape: *mut btCollisionShape,
    ) {
        btCompoundShape_addChildShape(self, localTransform, shape)
    }
    #[inline]
    pub unsafe fn removeChildShapeByIndex(&mut self, childShapeindex: ::std::os::raw::c_int) {
        btCompoundShape_removeChildShapeByIndex(self, childShapeindex)
    }
    #[inline]
    pub unsafe fn updateChildTransform(
        &mut self,
        childIndex: ::std::os::raw::c_int,
        newChildTransform: *const btTransform,
        shouldRecalculateLocalAabb: bool,
    ) {
        btCompoundShape_updateChildTransform(
            self,
            childIndex,
            newChildTransform,
            shouldRecalculateLocalAabb,
        )
    }
    #[inline]
    pub unsafe fn createAabbTreeFromChildren(&mut self) {
        btCompoundShape_createAabbTreeFromChildren(self)
    }
    #[inline]
    pub unsafe fn calculatePrincipalAxisTransform(
        &self,
        masses: *const btScalar,
        principal: *mut btTransform,
        inertia: *mut btVector3,
    ) {
        btCompoundShape_calculatePrincipalAxisTransform(self, masses, principal, inertia)
    }
    #[inline]
    pub unsafe fn new(
        enableDynamicAabbTree: bool,
        initialChildCapacity: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btCompoundShape_btCompoundShape(
            &mut __bindgen_tmp,
            enableDynamicAabbTree,
            initialChildCapacity,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN15btCompoundShapeD1Ev"]
    pub fn btCompoundShape_btCompoundShape_destructor(this: *mut btCompoundShape);
}
extern "C" {
    /// Remove all children shapes that contain the specified shape
    #[link_name = "\u{1}_ZN15btCompoundShape16removeChildShapeEP16btCollisionShape"]
    pub fn btCompoundShape_removeChildShape(
        this: *mut ::std::os::raw::c_void,
        shape: *mut btCollisionShape,
    );
}
extern "C" {
    /// getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version
    #[link_name = "\u{1}_ZNK15btCompoundShape7getAabbERK11btTransformR9btVector3S4_"]
    pub fn btCompoundShape_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    /// Re-calculate the local Aabb. Is called at the end of removeChildShapes.
    /// Use this yourself if you modify the children or their transforms.
    #[link_name = "\u{1}_ZN15btCompoundShape20recalculateLocalAabbEv"]
    pub fn btCompoundShape_recalculateLocalAabb(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN15btCompoundShape15setLocalScalingERK9btVector3"]
    pub fn btCompoundShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btCompoundShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btCompoundShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btCompoundShape28calculateSerializeBufferSizeEv"]
    pub fn btCompoundShape_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK15btCompoundShape9serializeEPvP12btSerializer"]
    pub fn btCompoundShape_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCompoundShapeChildData {
    pub m_transform: btTransformFloatData,
    pub m_childShape: *mut btCollisionShapeData,
    pub m_childShapeType: ::std::os::raw::c_int,
    pub m_childMargin: f32,
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCompoundShapeData {
    pub m_collisionShapeData: btCollisionShapeData,
    pub m_childShapePtr: *mut btCompoundShapeChildData,
    pub m_numChildShapes: ::std::os::raw::c_int,
    pub m_collisionMargin: f32,
}
/// The btBoxShape is a box primitive around the origin, its sides axis aligned with length specified by half extents, in local shape coordinates. When used as part of a btCollisionObject or btRigidBody it will be an oriented box in world space.
#[repr(C)]
#[derive(Debug)]
pub struct btBoxShape {
    pub _base: btPolyhedralConvexShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN10btBoxShapeC1ERK9btVector3"]
    pub fn btBoxShape_btBoxShape(this: *mut btBoxShape, boxHalfExtents: *const btVector3);
}
impl btBoxShape {
    #[inline]
    pub unsafe fn new(boxHalfExtents: *const btVector3) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btBoxShape_btBoxShape(&mut __bindgen_tmp, boxHalfExtents);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK10btBoxShape7getAabbERK11btTransformR9btVector3S4_"]
    pub fn btBoxShape_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK10btBoxShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btBoxShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btTriangleShape {
    pub _base: btPolyhedralConvexShape,
    pub m_vertices1: [btVector3; 3usize],
}
/// The btBU_Simplex1to4 implements tetrahedron, triangle, line, vertex collision shapes. In most cases it is better to use btConvexHullShape instead.
#[repr(C)]
#[derive(Debug)]
pub struct btBU_Simplex1to4 {
    pub _base: btPolyhedralConvexAabbCachingShape,
    pub m_numVertices: ::std::os::raw::c_int,
    pub m_vertices: [btVector3; 4usize],
}
extern "C" {
    #[link_name = "\u{1}_ZN16btBU_Simplex1to49addVertexERK9btVector3"]
    pub fn btBU_Simplex1to4_addVertex(this: *mut btBU_Simplex1to4, pt: *const btVector3);
}
extern "C" {
    #[link_name = "\u{1}_ZN16btBU_Simplex1to4C1Ev"]
    pub fn btBU_Simplex1to4_btBU_Simplex1to4(this: *mut btBU_Simplex1to4);
}
extern "C" {
    #[link_name = "\u{1}_ZN16btBU_Simplex1to4C1ERK9btVector3"]
    pub fn btBU_Simplex1to4_btBU_Simplex1to41(this: *mut btBU_Simplex1to4, pt0: *const btVector3);
}
extern "C" {
    #[link_name = "\u{1}_ZN16btBU_Simplex1to4C1ERK9btVector3S2_"]
    pub fn btBU_Simplex1to4_btBU_Simplex1to42(
        this: *mut btBU_Simplex1to4,
        pt0: *const btVector3,
        pt1: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btBU_Simplex1to4C1ERK9btVector3S2_S2_"]
    pub fn btBU_Simplex1to4_btBU_Simplex1to43(
        this: *mut btBU_Simplex1to4,
        pt0: *const btVector3,
        pt1: *const btVector3,
        pt2: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btBU_Simplex1to4C1ERK9btVector3S2_S2_S2_"]
    pub fn btBU_Simplex1to4_btBU_Simplex1to44(
        this: *mut btBU_Simplex1to4,
        pt0: *const btVector3,
        pt1: *const btVector3,
        pt2: *const btVector3,
        pt3: *const btVector3,
    );
}
impl btBU_Simplex1to4 {
    #[inline]
    pub unsafe fn addVertex(&mut self, pt: *const btVector3) {
        btBU_Simplex1to4_addVertex(self, pt)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btBU_Simplex1to4_btBU_Simplex1to4(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(pt0: *const btVector3) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btBU_Simplex1to4_btBU_Simplex1to41(&mut __bindgen_tmp, pt0);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(pt0: *const btVector3, pt1: *const btVector3) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btBU_Simplex1to4_btBU_Simplex1to42(&mut __bindgen_tmp, pt0, pt1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new3(
        pt0: *const btVector3,
        pt1: *const btVector3,
        pt2: *const btVector3,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btBU_Simplex1to4_btBU_Simplex1to43(&mut __bindgen_tmp, pt0, pt1, pt2);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new4(
        pt0: *const btVector3,
        pt1: *const btVector3,
        pt2: *const btVector3,
        pt3: *const btVector3,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btBU_Simplex1to4_btBU_Simplex1to44(&mut __bindgen_tmp, pt0, pt1, pt2, pt3);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btBU_Simplex1to47getAabbERK11btTransformR9btVector3S4_"]
    pub fn btBU_Simplex1to4_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btBU_Simplex1to414getNumVerticesEv"]
    pub fn btBU_Simplex1to4_getNumVertices(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btBU_Simplex1to411getNumEdgesEv"]
    pub fn btBU_Simplex1to4_getNumEdges(this: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btBU_Simplex1to47getEdgeEiR9btVector3S1_"]
    pub fn btBU_Simplex1to4_getEdge(
        this: *mut ::std::os::raw::c_void,
        i: ::std::os::raw::c_int,
        pa: *mut btVector3,
        pb: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btBU_Simplex1to49getVertexEiR9btVector3"]
    pub fn btBU_Simplex1to4_getVertex(
        this: *mut ::std::os::raw::c_void,
        i: ::std::os::raw::c_int,
        vtx: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btBU_Simplex1to412getNumPlanesEv"]
    pub fn btBU_Simplex1to4_getNumPlanes(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btBU_Simplex1to48getPlaneER9btVector3S1_i"]
    pub fn btBU_Simplex1to4_getPlane(
        this: *mut ::std::os::raw::c_void,
        planeNormal: *mut btVector3,
        planeSupport: *mut btVector3,
        i: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btBU_Simplex1to48getIndexEi"]
    pub fn btBU_Simplex1to4_getIndex(
        this: *mut ::std::os::raw::c_void,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btBU_Simplex1to48isInsideERK9btVector3f"]
    pub fn btBU_Simplex1to4_isInside(
        this: *mut ::std::os::raw::c_void,
        pt: *const btVector3,
        tolerance: btScalar,
    ) -> bool;
}
pub const eBT_PLANE_INTERSECTION_TYPE_BT_CONST_BACK_PLANE: eBT_PLANE_INTERSECTION_TYPE = 0;
pub const eBT_PLANE_INTERSECTION_TYPE_BT_CONST_COLLIDE_PLANE: eBT_PLANE_INTERSECTION_TYPE = 1;
pub const eBT_PLANE_INTERSECTION_TYPE_BT_CONST_FRONT_PLANE: eBT_PLANE_INTERSECTION_TYPE = 2;
pub type eBT_PLANE_INTERSECTION_TYPE = u32;
/// !  Class for transforming a model1 to the space of model0
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BT_BOX_BOX_TRANSFORM_CACHE {
    /// !< Transforms translation of model1 to model 0
    pub m_T1to0: btVector3,
    /// !< Transforms Rotation of model1 to model 0, equal  to R0' * R1
    pub m_R1to0: btMatrix3x3,
    /// !< Absolute value of m_R1to0
    pub m_AR: btMatrix3x3,
}
/// ! Axis aligned box
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btAABB {
    pub m_min: btVector3,
    pub m_max: btVector3,
}
/// The btGeometryUtil helper class provides a few methods to convert between plane equations and vertices.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btGeometryUtil {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN14btGeometryUtil29getPlaneEquationsFromVerticesER20btAlignedObjectArrayI9btVector3ES3_"]
    pub fn btGeometryUtil_getPlaneEquationsFromVertices(
        vertices: *mut btAlignedObjectArray<btVector3>,
        planeEquationsOut: *mut btAlignedObjectArray<btVector3>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14btGeometryUtil29getVerticesFromPlaneEquationsERK20btAlignedObjectArrayI9btVector3ERS2_"]
    pub fn btGeometryUtil_getVerticesFromPlaneEquations(
        planeEquations: *const btAlignedObjectArray<btVector3>,
        verticesOut: *mut btAlignedObjectArray<btVector3>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14btGeometryUtil8isInsideERK20btAlignedObjectArrayI9btVector3ERKS1_f"]
    pub fn btGeometryUtil_isInside(
        vertices: *const btAlignedObjectArray<btVector3>,
        planeNormal: *const btVector3,
        margin: btScalar,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN14btGeometryUtil19isPointInsidePlanesERK20btAlignedObjectArrayI9btVector3ERKS1_f"]
    pub fn btGeometryUtil_isPointInsidePlanes(
        planeEquations: *const btAlignedObjectArray<btVector3>,
        point: *const btVector3,
        margin: btScalar,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN14btGeometryUtil22areVerticesBehindPlaneERK9btVector3RK20btAlignedObjectArrayIS0_Ef"]
    pub fn btGeometryUtil_areVerticesBehindPlane(
        planeNormal: *const btVector3,
        vertices: *const btAlignedObjectArray<btVector3>,
        margin: btScalar,
    ) -> bool;
}
impl btGeometryUtil {
    #[inline]
    pub unsafe fn getPlaneEquationsFromVertices(
        vertices: *mut btAlignedObjectArray<btVector3>,
        planeEquationsOut: *mut btAlignedObjectArray<btVector3>,
    ) {
        btGeometryUtil_getPlaneEquationsFromVertices(vertices, planeEquationsOut)
    }
    #[inline]
    pub unsafe fn getVerticesFromPlaneEquations(
        planeEquations: *const btAlignedObjectArray<btVector3>,
        verticesOut: *mut btAlignedObjectArray<btVector3>,
    ) {
        btGeometryUtil_getVerticesFromPlaneEquations(planeEquations, verticesOut)
    }
    #[inline]
    pub unsafe fn isInside(
        vertices: *const btAlignedObjectArray<btVector3>,
        planeNormal: *const btVector3,
        margin: btScalar,
    ) -> bool {
        btGeometryUtil_isInside(vertices, planeNormal, margin)
    }
    #[inline]
    pub unsafe fn isPointInsidePlanes(
        planeEquations: *const btAlignedObjectArray<btVector3>,
        point: *const btVector3,
        margin: btScalar,
    ) -> bool {
        btGeometryUtil_isPointInsidePlanes(planeEquations, point, margin)
    }
    #[inline]
    pub unsafe fn areVerticesBehindPlane(
        planeNormal: *const btVector3,
        vertices: *const btAlignedObjectArray<btVector3>,
        margin: btScalar,
    ) -> bool {
        btGeometryUtil_areVerticesBehindPlane(planeNormal, vertices, margin)
    }
}
/// ! Structure for collision
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GIM_TRIANGLE_CONTACT {
    pub m_penetration_depth: btScalar,
    pub m_point_count: ::std::os::raw::c_int,
    pub m_separating_normal: btVector4,
    pub m_points: [btVector3; 16usize],
}
extern "C" {
    /// ! classify points that are closer
    #[link_name = "\u{1}_ZN20GIM_TRIANGLE_CONTACT12merge_pointsERK9btVector4fPK9btVector3i"]
    pub fn GIM_TRIANGLE_CONTACT_merge_points(
        this: *mut GIM_TRIANGLE_CONTACT,
        plane: *const btVector4,
        margin: btScalar,
        points: *const btVector3,
        point_count: ::std::os::raw::c_int,
    );
}
impl GIM_TRIANGLE_CONTACT {
    #[inline]
    pub unsafe fn merge_points(
        &mut self,
        plane: *const btVector4,
        margin: btScalar,
        points: *const btVector3,
        point_count: ::std::os::raw::c_int,
    ) {
        GIM_TRIANGLE_CONTACT_merge_points(self, plane, margin, points, point_count)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btPrimitiveTriangle {
    pub m_vertices: [btVector3; 3usize],
    pub m_plane: btVector4,
    pub m_margin: btScalar,
    pub m_dummy: btScalar,
}
extern "C" {
    /// ! Test if triangles could collide
    #[link_name = "\u{1}_ZN19btPrimitiveTriangle25overlap_test_conservativeERKS_"]
    pub fn btPrimitiveTriangle_overlap_test_conservative(
        this: *mut btPrimitiveTriangle,
        other: *const btPrimitiveTriangle,
    ) -> bool;
}
extern "C" {
    /// ! Clips the triangle against this
    /// /*!
    /// \pre clipped_points must have MAX_TRI_CLIPPING size, and this triangle must have its plane calculated.
    /// \return the number of clipped points
    /// */
    #[link_name = "\u{1}_ZN19btPrimitiveTriangle13clip_triangleERS_P9btVector3"]
    pub fn btPrimitiveTriangle_clip_triangle(
        this: *mut btPrimitiveTriangle,
        other: *mut btPrimitiveTriangle,
        clipped_points: *mut btVector3,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// ! Find collision using the clipping method
    /// /*!
    /// \pre this triangle and other must have their triangles calculated
    /// */
    #[link_name = "\u{1}_ZN19btPrimitiveTriangle35find_triangle_collision_clip_methodERS_R20GIM_TRIANGLE_CONTACT"]
    pub fn btPrimitiveTriangle_find_triangle_collision_clip_method(
        this: *mut btPrimitiveTriangle,
        other: *mut btPrimitiveTriangle,
        contacts: *mut GIM_TRIANGLE_CONTACT,
    ) -> bool;
}
impl btPrimitiveTriangle {
    #[inline]
    pub unsafe fn overlap_test_conservative(&mut self, other: *const btPrimitiveTriangle) -> bool {
        btPrimitiveTriangle_overlap_test_conservative(self, other)
    }
    #[inline]
    pub unsafe fn clip_triangle(
        &mut self,
        other: *mut btPrimitiveTriangle,
        clipped_points: *mut btVector3,
    ) -> ::std::os::raw::c_int {
        btPrimitiveTriangle_clip_triangle(self, other, clipped_points)
    }
    #[inline]
    pub unsafe fn find_triangle_collision_clip_method(
        &mut self,
        other: *mut btPrimitiveTriangle,
        contacts: *mut GIM_TRIANGLE_CONTACT,
    ) -> bool {
        btPrimitiveTriangle_find_triangle_collision_clip_method(self, other, contacts)
    }
}
/// ! Helper class for colliding Bullet Triangle Shapes
/// *!
/// This class implements a better getAabb method than the previous btTriangleShape class
/// */
#[repr(C)]
#[derive(Debug)]
pub struct btTriangleShapeEx {
    pub _base: btTriangleShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN17btTriangleShapeEx25overlap_test_conservativeERKS_"]
    pub fn btTriangleShapeEx_overlap_test_conservative(
        this: *mut btTriangleShapeEx,
        other: *const btTriangleShapeEx,
    ) -> bool;
}
impl btTriangleShapeEx {
    #[inline]
    pub unsafe fn overlap_test_conservative(&mut self, other: *const btTriangleShapeEx) -> bool {
        btTriangleShapeEx_overlap_test_conservative(self, other)
    }
}
/// ! Overlapping pair
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GIM_PAIR {
    pub m_index1: ::std::os::raw::c_int,
    pub m_index2: ::std::os::raw::c_int,
}
/// GIM_BVH_DATA is an internal GIMPACT collision structure to contain axis aligned bounding box
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GIM_BVH_DATA {
    pub m_bound: btAABB,
    pub m_data: ::std::os::raw::c_int,
}
/// ! Node Structure for trees
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GIM_BVH_TREE_NODE {
    pub m_bound: btAABB,
    pub m_escapeIndexOrDataIndex: ::std::os::raw::c_int,
}
/// ! A pairset array
#[repr(C)]
#[derive(Debug)]
pub struct btPairSet {
    pub _base: btAlignedObjectArray<GIM_PAIR>,
}
#[repr(C)]
#[derive(Debug)]
pub struct GIM_BVH_DATA_ARRAY {
    pub _base: btAlignedObjectArray<GIM_BVH_DATA>,
}
#[repr(C)]
#[derive(Debug)]
pub struct GIM_BVH_TREE_NODE_ARRAY {
    pub _base: btAlignedObjectArray<GIM_BVH_TREE_NODE>,
}
/// ! Basic Box tree structure
#[repr(C)]
#[derive(Debug)]
pub struct btBvhTree {
    pub m_num_nodes: ::std::os::raw::c_int,
    pub m_node_array: GIM_BVH_TREE_NODE_ARRAY,
}
extern "C" {
    #[link_name = "\u{1}_ZN9btBvhTree30_sort_and_calc_splitting_indexER18GIM_BVH_DATA_ARRAYiii"]
    pub fn btBvhTree__sort_and_calc_splitting_index(
        this: *mut btBvhTree,
        primitive_boxes: *mut GIM_BVH_DATA_ARRAY,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
        splitAxis: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN9btBvhTree20_calc_splitting_axisER18GIM_BVH_DATA_ARRAYii"]
    pub fn btBvhTree__calc_splitting_axis(
        this: *mut btBvhTree,
        primitive_boxes: *mut GIM_BVH_DATA_ARRAY,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN9btBvhTree15_build_sub_treeER18GIM_BVH_DATA_ARRAYii"]
    pub fn btBvhTree__build_sub_tree(
        this: *mut btBvhTree,
        primitive_boxes: *mut GIM_BVH_DATA_ARRAY,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// ! prototype functions for box tree management
    /// //!@{
    #[link_name = "\u{1}_ZN9btBvhTree10build_treeER18GIM_BVH_DATA_ARRAY"]
    pub fn btBvhTree_build_tree(this: *mut btBvhTree, primitive_boxes: *mut GIM_BVH_DATA_ARRAY);
}
impl btBvhTree {
    #[inline]
    pub unsafe fn _sort_and_calc_splitting_index(
        &mut self,
        primitive_boxes: *mut GIM_BVH_DATA_ARRAY,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
        splitAxis: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        btBvhTree__sort_and_calc_splitting_index(
            self,
            primitive_boxes,
            startIndex,
            endIndex,
            splitAxis,
        )
    }
    #[inline]
    pub unsafe fn _calc_splitting_axis(
        &mut self,
        primitive_boxes: *mut GIM_BVH_DATA_ARRAY,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        btBvhTree__calc_splitting_axis(self, primitive_boxes, startIndex, endIndex)
    }
    #[inline]
    pub unsafe fn _build_sub_tree(
        &mut self,
        primitive_boxes: *mut GIM_BVH_DATA_ARRAY,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
    ) {
        btBvhTree__build_sub_tree(self, primitive_boxes, startIndex, endIndex)
    }
    #[inline]
    pub unsafe fn build_tree(&mut self, primitive_boxes: *mut GIM_BVH_DATA_ARRAY) {
        btBvhTree_build_tree(self, primitive_boxes)
    }
}
#[repr(C)]
pub struct btPrimitiveManagerBase__bindgen_vtable(::std::os::raw::c_void);
/// ! Prototype Base class for primitive classification
/// *!
/// This class is a wrapper for primitive collections.
/// This tells relevant info for the Bounding Box set classes, which take care of space classification.
/// This class can manage Compound shapes and trimeshes, and if it is managing trimesh then the  Hierarchy Bounding Box classes will take advantage of primitive Vs Box overlapping tests for getting optimal results and less Per Box compairisons.
/// */
#[repr(C)]
#[derive(Debug)]
pub struct btPrimitiveManagerBase {
    pub vtable_: *const btPrimitiveManagerBase__bindgen_vtable,
}
/// ! Structure for containing Boxes
/// *!
/// This class offers an structure for managing a box tree of primitives.
/// Requires a Primitive prototype (like btPrimitiveManagerBase )
/// */
#[repr(C)]
#[derive(Debug)]
pub struct btGImpactBvh {
    pub m_box_tree: btBvhTree,
    pub m_primitive_manager: *mut btPrimitiveManagerBase,
}
extern "C" {
    #[link_name = "\u{1}_ZN12btGImpactBvh5refitEv"]
    pub fn btGImpactBvh_refit(this: *mut btGImpactBvh);
}
extern "C" {
    /// ! this rebuild the entire set
    #[link_name = "\u{1}_ZN12btGImpactBvh8buildSetEv"]
    pub fn btGImpactBvh_buildSet(this: *mut btGImpactBvh);
}
extern "C" {
    /// ! returns the indices of the primitives in the m_primitive_manager
    #[link_name = "\u{1}_ZNK12btGImpactBvh8boxQueryERK6btAABBR20btAlignedObjectArrayIiE"]
    pub fn btGImpactBvh_boxQuery(
        this: *const btGImpactBvh,
        box_: *const btAABB,
        collided_results: *mut btAlignedObjectArray<::std::os::raw::c_int>,
    ) -> bool;
}
extern "C" {
    /// ! returns the indices of the primitives in the m_primitive_manager
    #[link_name = "\u{1}_ZNK12btGImpactBvh8rayQueryERK9btVector3S2_R20btAlignedObjectArrayIiE"]
    pub fn btGImpactBvh_rayQuery(
        this: *const btGImpactBvh,
        ray_dir: *const btVector3,
        ray_origin: *const btVector3,
        collided_results: *mut btAlignedObjectArray<::std::os::raw::c_int>,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12btGImpactBvh14find_collisionEPS_RK11btTransformS0_S3_R9btPairSet"]
    pub fn btGImpactBvh_find_collision(
        boxset1: *mut btGImpactBvh,
        trans1: *const btTransform,
        boxset2: *mut btGImpactBvh,
        trans2: *const btTransform,
        collision_pairs: *mut btPairSet,
    );
}
impl btGImpactBvh {
    #[inline]
    pub unsafe fn refit(&mut self) {
        btGImpactBvh_refit(self)
    }
    #[inline]
    pub unsafe fn buildSet(&mut self) {
        btGImpactBvh_buildSet(self)
    }
    #[inline]
    pub unsafe fn boxQuery(
        &self,
        box_: *const btAABB,
        collided_results: *mut btAlignedObjectArray<::std::os::raw::c_int>,
    ) -> bool {
        btGImpactBvh_boxQuery(self, box_, collided_results)
    }
    #[inline]
    pub unsafe fn rayQuery(
        &self,
        ray_dir: *const btVector3,
        ray_origin: *const btVector3,
        collided_results: *mut btAlignedObjectArray<::std::os::raw::c_int>,
    ) -> bool {
        btGImpactBvh_rayQuery(self, ray_dir, ray_origin, collided_results)
    }
    #[inline]
    pub unsafe fn find_collision(
        boxset1: *mut btGImpactBvh,
        trans1: *const btTransform,
        boxset2: *mut btGImpactBvh,
        trans2: *const btTransform,
        collision_pairs: *mut btPairSet,
    ) {
        btGImpactBvh_find_collision(boxset1, trans1, boxset2, trans2, collision_pairs)
    }
}
/// btQuantizedBvhNode is a compressed aabb node, 16 bytes.
/// Node can be used for leafnode or internal node. Leafnodes can point to 32-bit triangle index (non-negative range).
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BT_QUANTIZED_BVH_NODE {
    pub m_quantizedAabbMin: [::std::os::raw::c_ushort; 3usize],
    pub m_quantizedAabbMax: [::std::os::raw::c_ushort; 3usize],
    pub m_escapeIndexOrDataIndex: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct GIM_QUANTIZED_BVH_NODE_ARRAY {
    pub _base: btAlignedObjectArray<BT_QUANTIZED_BVH_NODE>,
}
/// ! Basic Box tree structure
#[repr(C)]
#[derive(Debug)]
pub struct btQuantizedBvhTree {
    pub m_num_nodes: ::std::os::raw::c_int,
    pub m_node_array: GIM_QUANTIZED_BVH_NODE_ARRAY,
    pub m_global_bound: btAABB,
    pub m_bvhQuantization: btVector3,
}
extern "C" {
    #[link_name = "\u{1}_ZN18btQuantizedBvhTree17calc_quantizationER18GIM_BVH_DATA_ARRAYf"]
    pub fn btQuantizedBvhTree_calc_quantization(
        this: *mut btQuantizedBvhTree,
        primitive_boxes: *mut GIM_BVH_DATA_ARRAY,
        boundMargin: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18btQuantizedBvhTree30_sort_and_calc_splitting_indexER18GIM_BVH_DATA_ARRAYiii"]
    pub fn btQuantizedBvhTree__sort_and_calc_splitting_index(
        this: *mut btQuantizedBvhTree,
        primitive_boxes: *mut GIM_BVH_DATA_ARRAY,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
        splitAxis: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN18btQuantizedBvhTree20_calc_splitting_axisER18GIM_BVH_DATA_ARRAYii"]
    pub fn btQuantizedBvhTree__calc_splitting_axis(
        this: *mut btQuantizedBvhTree,
        primitive_boxes: *mut GIM_BVH_DATA_ARRAY,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN18btQuantizedBvhTree15_build_sub_treeER18GIM_BVH_DATA_ARRAYii"]
    pub fn btQuantizedBvhTree__build_sub_tree(
        this: *mut btQuantizedBvhTree,
        primitive_boxes: *mut GIM_BVH_DATA_ARRAY,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// ! prototype functions for box tree management
    /// //!@{
    #[link_name = "\u{1}_ZN18btQuantizedBvhTree10build_treeER18GIM_BVH_DATA_ARRAY"]
    pub fn btQuantizedBvhTree_build_tree(
        this: *mut btQuantizedBvhTree,
        primitive_boxes: *mut GIM_BVH_DATA_ARRAY,
    );
}
impl btQuantizedBvhTree {
    #[inline]
    pub unsafe fn calc_quantization(
        &mut self,
        primitive_boxes: *mut GIM_BVH_DATA_ARRAY,
        boundMargin: btScalar,
    ) {
        btQuantizedBvhTree_calc_quantization(self, primitive_boxes, boundMargin)
    }
    #[inline]
    pub unsafe fn _sort_and_calc_splitting_index(
        &mut self,
        primitive_boxes: *mut GIM_BVH_DATA_ARRAY,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
        splitAxis: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        btQuantizedBvhTree__sort_and_calc_splitting_index(
            self,
            primitive_boxes,
            startIndex,
            endIndex,
            splitAxis,
        )
    }
    #[inline]
    pub unsafe fn _calc_splitting_axis(
        &mut self,
        primitive_boxes: *mut GIM_BVH_DATA_ARRAY,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        btQuantizedBvhTree__calc_splitting_axis(self, primitive_boxes, startIndex, endIndex)
    }
    #[inline]
    pub unsafe fn _build_sub_tree(
        &mut self,
        primitive_boxes: *mut GIM_BVH_DATA_ARRAY,
        startIndex: ::std::os::raw::c_int,
        endIndex: ::std::os::raw::c_int,
    ) {
        btQuantizedBvhTree__build_sub_tree(self, primitive_boxes, startIndex, endIndex)
    }
    #[inline]
    pub unsafe fn build_tree(&mut self, primitive_boxes: *mut GIM_BVH_DATA_ARRAY) {
        btQuantizedBvhTree_build_tree(self, primitive_boxes)
    }
}
/// ! Structure for containing Boxes
/// *!
/// This class offers an structure for managing a box tree of primitives.
/// Requires a Primitive prototype (like btPrimitiveManagerBase )
/// */
#[repr(C)]
#[derive(Debug)]
pub struct btGImpactQuantizedBvh {
    pub m_box_tree: btQuantizedBvhTree,
    pub m_primitive_manager: *mut btPrimitiveManagerBase,
}
extern "C" {
    #[link_name = "\u{1}_ZN21btGImpactQuantizedBvh5refitEv"]
    pub fn btGImpactQuantizedBvh_refit(this: *mut btGImpactQuantizedBvh);
}
extern "C" {
    /// ! this rebuild the entire set
    #[link_name = "\u{1}_ZN21btGImpactQuantizedBvh8buildSetEv"]
    pub fn btGImpactQuantizedBvh_buildSet(this: *mut btGImpactQuantizedBvh);
}
extern "C" {
    /// ! returns the indices of the primitives in the m_primitive_manager
    #[link_name = "\u{1}_ZNK21btGImpactQuantizedBvh8boxQueryERK6btAABBR20btAlignedObjectArrayIiE"]
    pub fn btGImpactQuantizedBvh_boxQuery(
        this: *const btGImpactQuantizedBvh,
        box_: *const btAABB,
        collided_results: *mut btAlignedObjectArray<::std::os::raw::c_int>,
    ) -> bool;
}
extern "C" {
    /// ! returns the indices of the primitives in the m_primitive_manager
    #[link_name = "\u{1}_ZNK21btGImpactQuantizedBvh8rayQueryERK9btVector3S2_R20btAlignedObjectArrayIiE"]
    pub fn btGImpactQuantizedBvh_rayQuery(
        this: *const btGImpactQuantizedBvh,
        ray_dir: *const btVector3,
        ray_origin: *const btVector3,
        collided_results: *mut btAlignedObjectArray<::std::os::raw::c_int>,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN21btGImpactQuantizedBvh14find_collisionEPKS_RK11btTransformS1_S4_R9btPairSet"]
    pub fn btGImpactQuantizedBvh_find_collision(
        boxset1: *const btGImpactQuantizedBvh,
        trans1: *const btTransform,
        boxset2: *const btGImpactQuantizedBvh,
        trans2: *const btTransform,
        collision_pairs: *mut btPairSet,
    );
}
impl btGImpactQuantizedBvh {
    #[inline]
    pub unsafe fn refit(&mut self) {
        btGImpactQuantizedBvh_refit(self)
    }
    #[inline]
    pub unsafe fn buildSet(&mut self) {
        btGImpactQuantizedBvh_buildSet(self)
    }
    #[inline]
    pub unsafe fn boxQuery(
        &self,
        box_: *const btAABB,
        collided_results: *mut btAlignedObjectArray<::std::os::raw::c_int>,
    ) -> bool {
        btGImpactQuantizedBvh_boxQuery(self, box_, collided_results)
    }
    #[inline]
    pub unsafe fn rayQuery(
        &self,
        ray_dir: *const btVector3,
        ray_origin: *const btVector3,
        collided_results: *mut btAlignedObjectArray<::std::os::raw::c_int>,
    ) -> bool {
        btGImpactQuantizedBvh_rayQuery(self, ray_dir, ray_origin, collided_results)
    }
    #[inline]
    pub unsafe fn find_collision(
        boxset1: *const btGImpactQuantizedBvh,
        trans1: *const btTransform,
        boxset2: *const btGImpactQuantizedBvh,
        trans2: *const btTransform,
        collision_pairs: *mut btPairSet,
    ) {
        btGImpactQuantizedBvh_find_collision(boxset1, trans1, boxset2, trans2, collision_pairs)
    }
}
/// ! declare Quantized trees, (you can change to float based trees)
pub type btGImpactBoxSet = btGImpactQuantizedBvh;
pub const eGIMPACT_SHAPE_TYPE_CONST_GIMPACT_COMPOUND_SHAPE: eGIMPACT_SHAPE_TYPE = 0;
pub const eGIMPACT_SHAPE_TYPE_CONST_GIMPACT_TRIMESH_SHAPE_PART: eGIMPACT_SHAPE_TYPE = 1;
pub const eGIMPACT_SHAPE_TYPE_CONST_GIMPACT_TRIMESH_SHAPE: eGIMPACT_SHAPE_TYPE = 2;
pub type eGIMPACT_SHAPE_TYPE = u32;
/// ! Helper class for tetrahedrons
#[repr(C)]
#[derive(Debug)]
pub struct btTetrahedronShapeEx {
    pub _base: btBU_Simplex1to4,
}
/// ! Base class for gimpact shapes
#[repr(C)]
#[derive(Debug)]
pub struct btGImpactShapeInterface {
    pub _base: btConcaveShape,
    pub m_localAABB: btAABB,
    pub m_needs_update: bool,
    pub localScaling: btVector3,
    pub m_box_set: btGImpactBoxSet,
}
/// ! btGImpactCompoundShape allows to handle multiple btCollisionShape objects at once
/// *!
/// This class only can manage Convex subshapes
/// */
#[repr(C)]
#[derive(Debug)]
pub struct btGImpactCompoundShape {
    pub _base: btGImpactShapeInterface,
    pub m_primitive_manager: btGImpactCompoundShape_CompoundPrimitiveManager,
    pub m_childTransforms: btAlignedObjectArray<btTransform>,
    pub m_childShapes: btAlignedObjectArray<*mut btCollisionShape>,
}
/// ! compound primitive manager
#[repr(C)]
#[derive(Debug)]
pub struct btGImpactCompoundShape_CompoundPrimitiveManager {
    pub _base: btPrimitiveManagerBase,
    pub m_compoundShape: *mut btGImpactCompoundShape,
}
extern "C" {
    /// ! Calculates the exact inertia tensor for this shape
    #[link_name = "\u{1}_ZNK22btGImpactCompoundShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btGImpactCompoundShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
/// ! This class manages a sub part of a mesh supplied by the btStridingMeshInterface interface.
/// *!
/// - Simply create this shape by passing the btStridingMeshInterface to the constructor btGImpactMeshShapePart, then you must call updateBound() after creating the mesh
/// - When making operations with this shape, you must call <b>lock</b> before accessing to the trimesh primitives, and then call <b>unlock</b>
/// - You can handle deformable meshes with this shape, by calling postUpdate() every time when changing the mesh vertices.
///
/// */
#[repr(C)]
#[derive(Debug)]
pub struct btGImpactMeshShapePart {
    pub _base: btGImpactShapeInterface,
    pub m_primitive_manager: btGImpactMeshShapePart_TrimeshPrimitiveManager,
}
/// ! Trimesh primitive manager
/// /*!
/// Manages the info from btStridingMeshInterface object and controls the Lock/Unlock mechanism
/// */
#[repr(C)]
#[derive(Debug)]
pub struct btGImpactMeshShapePart_TrimeshPrimitiveManager {
    pub _base: btPrimitiveManagerBase,
    pub m_margin: btScalar,
    pub m_meshInterface: *mut btStridingMeshInterface,
    pub m_scale: btVector3,
    pub m_part: ::std::os::raw::c_int,
    pub m_lock_count: ::std::os::raw::c_int,
    pub vertexbase: *const ::std::os::raw::c_uchar,
    pub numverts: ::std::os::raw::c_int,
    pub type_: PHY_ScalarType,
    pub stride: ::std::os::raw::c_int,
    pub indexbase: *const ::std::os::raw::c_uchar,
    pub indexstride: ::std::os::raw::c_int,
    pub numfaces: ::std::os::raw::c_int,
    pub indicestype: PHY_ScalarType,
}
extern "C" {
    #[link_name = "\u{1}_ZN22btGImpactMeshShapePartC1EP23btStridingMeshInterfacei"]
    pub fn btGImpactMeshShapePart_btGImpactMeshShapePart(
        this: *mut btGImpactMeshShapePart,
        meshInterface: *mut btStridingMeshInterface,
        part: ::std::os::raw::c_int,
    );
}
impl btGImpactMeshShapePart {
    #[inline]
    pub unsafe fn new(
        meshInterface: *mut btStridingMeshInterface,
        part: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btGImpactMeshShapePart_btGImpactMeshShapePart(&mut __bindgen_tmp, meshInterface, part);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN22btGImpactMeshShapePartD1Ev"]
    pub fn btGImpactMeshShapePart_btGImpactMeshShapePart_destructor(
        this: *mut btGImpactMeshShapePart,
    );
}
extern "C" {
    /// ! call when reading child shapes
    #[link_name = "\u{1}_ZNK22btGImpactMeshShapePart15lockChildShapesEv"]
    pub fn btGImpactMeshShapePart_lockChildShapes(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK22btGImpactMeshShapePart17unlockChildShapesEv"]
    pub fn btGImpactMeshShapePart_unlockChildShapes(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK22btGImpactMeshShapePart21calculateLocalInertiaEfR9btVector3"]
    pub fn btGImpactMeshShapePart_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK22btGImpactMeshShapePart19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_"]
    pub fn btGImpactMeshShapePart_processAllTriangles(
        this: *mut ::std::os::raw::c_void,
        callback: *mut btTriangleCallback,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK22btGImpactMeshShapePart22processAllTrianglesRayEP18btTriangleCallbackRK9btVector3S4_"]
    pub fn btGImpactMeshShapePart_processAllTrianglesRay(
        this: *mut ::std::os::raw::c_void,
        callback: *mut btTriangleCallback,
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
    );
}
/// ! This class manages a mesh supplied by the btStridingMeshInterface interface.
/// *!
/// Set of btGImpactMeshShapePart parts
/// - Simply create this shape by passing the btStridingMeshInterface to the constructor btGImpactMeshShape, then you must call updateBound() after creating the mesh
///
/// - You can handle deformable meshes with this shape, by calling postUpdate() every time when changing the mesh vertices.
///
/// */
#[repr(C)]
#[derive(Debug)]
pub struct btGImpactMeshShape {
    pub _base: btGImpactShapeInterface,
    pub m_meshInterface: *mut btStridingMeshInterface,
    pub m_mesh_parts: btAlignedObjectArray<*mut btGImpactMeshShapePart>,
}
extern "C" {
    #[link_name = "\u{1}_ZNK18btGImpactMeshShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btGImpactMeshShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK18btGImpactMeshShape7rayTestERK9btVector3S2_RN16btCollisionWorld17RayResultCallbackE"]
    pub fn btGImpactMeshShape_rayTest(
        this: *mut ::std::os::raw::c_void,
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
        resultCallback: *mut btCollisionWorld_RayResultCallback,
    );
}
extern "C" {
    /// ! Function for retrieve triangles.
    /// /*!
    /// It gives the triangles in local space
    /// */
    #[link_name = "\u{1}_ZNK18btGImpactMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_"]
    pub fn btGImpactMeshShape_processAllTriangles(
        this: *mut ::std::os::raw::c_void,
        callback: *mut btTriangleCallback,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK18btGImpactMeshShape22processAllTrianglesRayEP18btTriangleCallbackRK9btVector3S4_"]
    pub fn btGImpactMeshShape_processAllTrianglesRay(
        this: *mut ::std::os::raw::c_void,
        callback: *mut btTriangleCallback,
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK18btGImpactMeshShape28calculateSerializeBufferSizeEv"]
    pub fn btGImpactMeshShape_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK18btGImpactMeshShape9serializeEPvP12btSerializer"]
    pub fn btGImpactMeshShape_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btGImpactMeshShapeData {
    pub m_collisionShapeData: btCollisionShapeData,
    pub m_meshInterface: btStridingMeshInterfaceData,
    pub m_localScaling: btVector3FloatData,
    pub m_collisionMargin: f32,
    pub m_gimpactSubType: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct btTriangleRaycastCallback {
    pub _base: btTriangleCallback,
    pub m_from: btVector3,
    pub m_to: btVector3,
    pub m_flags: ::std::os::raw::c_uint,
    pub m_hitFraction: btScalar,
}
pub const btTriangleRaycastCallback_EFlags_kF_None: btTriangleRaycastCallback_EFlags = 0;
pub const btTriangleRaycastCallback_EFlags_kF_FilterBackfaces: btTriangleRaycastCallback_EFlags = 1;
pub const btTriangleRaycastCallback_EFlags_kF_KeepUnflippedNormal:
    btTriangleRaycastCallback_EFlags = 2;
/// SubSimplexConvexCastRaytest is the default, even if kF_None is set.
pub const btTriangleRaycastCallback_EFlags_kF_UseSubSimplexConvexCastRaytest:
    btTriangleRaycastCallback_EFlags = 4;
/// SubSimplexConvexCastRaytest is the default, even if kF_None is set.
pub const btTriangleRaycastCallback_EFlags_kF_UseGjkConvexCastRaytest:
    btTriangleRaycastCallback_EFlags = 8;
/// SubSimplexConvexCastRaytest is the default, even if kF_None is set.
pub const btTriangleRaycastCallback_EFlags_kF_Terminator: btTriangleRaycastCallback_EFlags =
    4294967295;
pub type btTriangleRaycastCallback_EFlags = u32;
extern "C" {
    #[link_name = "\u{1}_ZN25btTriangleRaycastCallbackC2ERK9btVector3S2_j"]
    pub fn btTriangleRaycastCallback_btTriangleRaycastCallback(
        this: *mut btTriangleRaycastCallback,
        from: *const btVector3,
        to: *const btVector3,
        flags: ::std::os::raw::c_uint,
    );
}
impl btTriangleRaycastCallback {
    #[inline]
    pub unsafe fn new(
        from: *const btVector3,
        to: *const btVector3,
        flags: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btTriangleRaycastCallback_btTriangleRaycastCallback(&mut __bindgen_tmp, from, to, flags);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN25btTriangleRaycastCallback15processTriangleEP9btVector3ii"]
    pub fn btTriangleRaycastCallback_processTriangle(
        this: *mut ::std::os::raw::c_void,
        triangle: *mut btVector3,
        partId: ::std::os::raw::c_int,
        triangleIndex: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btTriangleConvexcastCallback {
    pub _base: btTriangleCallback,
    pub m_convexShape: *const btConvexShape,
    pub m_convexShapeFrom: btTransform,
    pub m_convexShapeTo: btTransform,
    pub m_triangleToWorld: btTransform,
    pub m_hitFraction: btScalar,
    pub m_triangleCollisionMargin: btScalar,
    pub m_allowedPenetration: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZN28btTriangleConvexcastCallbackC2EPK13btConvexShapeRK11btTransformS5_S5_f"]
    pub fn btTriangleConvexcastCallback_btTriangleConvexcastCallback(
        this: *mut btTriangleConvexcastCallback,
        convexShape: *const btConvexShape,
        convexShapeFrom: *const btTransform,
        convexShapeTo: *const btTransform,
        triangleToWorld: *const btTransform,
        triangleCollisionMargin: btScalar,
    );
}
impl btTriangleConvexcastCallback {
    #[inline]
    pub unsafe fn new(
        convexShape: *const btConvexShape,
        convexShapeFrom: *const btTransform,
        convexShapeTo: *const btTransform,
        triangleToWorld: *const btTransform,
        triangleCollisionMargin: btScalar,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btTriangleConvexcastCallback_btTriangleConvexcastCallback(
            &mut __bindgen_tmp,
            convexShape,
            convexShapeFrom,
            convexShapeTo,
            triangleToWorld,
            triangleCollisionMargin,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN28btTriangleConvexcastCallback15processTriangleEP9btVector3ii"]
    pub fn btTriangleConvexcastCallback_processTriangle(
        this: *mut ::std::os::raw::c_void,
        triangle: *mut btVector3,
        partId: ::std::os::raw::c_int,
        triangleIndex: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btCompoundFromGimpactShape {
    pub _base: btCompoundShape,
}
extern "C" {
    #[link_name = "\u{1}_Z32btCreateCompoundFromGimpactShapePK18btGImpactMeshShapef"]
    pub fn btCreateCompoundFromGimpactShape(
        gimpactMesh: *const btGImpactMeshShape,
        depth: btScalar,
    ) -> *mut btCompoundShape;
}
/// The GIM_CONTACT is an internal GIMPACT structure, similar to btManifoldPoint.
/// @todo: remove and replace GIM_CONTACT by btManifoldPoint.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GIM_CONTACT {
    pub m_point: btVector3,
    pub m_normal: btVector3,
    pub m_depth: btScalar,
    pub m_distance: btScalar,
    pub m_feature1: ::std::os::raw::c_int,
    pub m_feature2: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct btContactArray {
    pub _base: btAlignedObjectArray<GIM_CONTACT>,
}
extern "C" {
    #[link_name = "\u{1}_ZN14btContactArray14merge_contactsERKS_b"]
    pub fn btContactArray_merge_contacts(
        this: *mut btContactArray,
        contacts: *const btContactArray,
        normal_contact_average: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14btContactArray21merge_contacts_uniqueERKS_"]
    pub fn btContactArray_merge_contacts_unique(
        this: *mut btContactArray,
        contacts: *const btContactArray,
    );
}
impl btContactArray {
    #[inline]
    pub unsafe fn merge_contacts(
        &mut self,
        contacts: *const btContactArray,
        normal_contact_average: bool,
    ) {
        btContactArray_merge_contacts(self, contacts, normal_contact_average)
    }
    #[inline]
    pub unsafe fn merge_contacts_unique(&mut self, contacts: *const btContactArray) {
        btContactArray_merge_contacts_unique(self, contacts)
    }
}
/// The btStaticPlaneShape simulates an infinite non-moving (static) collision plane.
#[repr(C)]
#[derive(Debug)]
pub struct btStaticPlaneShape {
    pub _base: btConcaveShape,
    pub m_localAabbMin: btVector3,
    pub m_localAabbMax: btVector3,
    pub m_planeNormal: btVector3,
    pub m_planeConstant: btScalar,
    pub m_localScaling: btVector3,
}
extern "C" {
    #[link_name = "\u{1}_ZN18btStaticPlaneShapeC1ERK9btVector3f"]
    pub fn btStaticPlaneShape_btStaticPlaneShape(
        this: *mut btStaticPlaneShape,
        planeNormal: *const btVector3,
        planeConstant: btScalar,
    );
}
impl btStaticPlaneShape {
    #[inline]
    pub unsafe fn new(planeNormal: *const btVector3, planeConstant: btScalar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btStaticPlaneShape_btStaticPlaneShape(&mut __bindgen_tmp, planeNormal, planeConstant);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN18btStaticPlaneShapeD1Ev"]
    pub fn btStaticPlaneShape_btStaticPlaneShape_destructor(this: *mut btStaticPlaneShape);
}
extern "C" {
    #[link_name = "\u{1}_ZNK18btStaticPlaneShape7getAabbERK11btTransformR9btVector3S4_"]
    pub fn btStaticPlaneShape_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK18btStaticPlaneShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_"]
    pub fn btStaticPlaneShape_processAllTriangles(
        this: *mut ::std::os::raw::c_void,
        callback: *mut btTriangleCallback,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK18btStaticPlaneShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btStaticPlaneShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18btStaticPlaneShape15setLocalScalingERK9btVector3"]
    pub fn btStaticPlaneShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK18btStaticPlaneShape15getLocalScalingEv"]
    pub fn btStaticPlaneShape_getLocalScaling(
        this: *mut ::std::os::raw::c_void,
    ) -> *const btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK18btStaticPlaneShape28calculateSerializeBufferSizeEv"]
    pub fn btStaticPlaneShape_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK18btStaticPlaneShape9serializeEPvP12btSerializer"]
    pub fn btStaticPlaneShape_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btStaticPlaneShapeData {
    pub m_collisionShapeData: btCollisionShapeData,
    pub m_localScaling: btVector3FloatData,
    pub m_planeNormal: btVector3FloatData,
    pub m_planeConstant: f32,
    pub m_pad: [::std::os::raw::c_char; 4usize],
}
pub type btVertexArray = btAlignedObjectArray<btVector3>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btPolyhedralContactClipping {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN27btPolyhedralContactClipping19clipHullAgainstHullERK9btVector3RK18btConvexPolyhedronS5_RK11btTransformS8_ffR20btAlignedObjectArrayIS0_ESB_RN36btDiscreteCollisionDetectorInterface6ResultE"]
    pub fn btPolyhedralContactClipping_clipHullAgainstHull(
        separatingNormal1: *const btVector3,
        hullA: *const btConvexPolyhedron,
        hullB: *const btConvexPolyhedron,
        transA: *const btTransform,
        transB: *const btTransform,
        minDist: btScalar,
        maxDist: btScalar,
        worldVertsB1: *mut btVertexArray,
        worldVertsB2: *mut btVertexArray,
        resultOut: *mut btDiscreteCollisionDetectorInterface_Result,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btPolyhedralContactClipping19clipFaceAgainstHullERK9btVector3RK18btConvexPolyhedronRK11btTransformR20btAlignedObjectArrayIS0_ESB_ffRN36btDiscreteCollisionDetectorInterface6ResultE"]
    pub fn btPolyhedralContactClipping_clipFaceAgainstHull(
        separatingNormal: *const btVector3,
        hullA: *const btConvexPolyhedron,
        transA: *const btTransform,
        worldVertsB1: *mut btVertexArray,
        worldVertsB2: *mut btVertexArray,
        minDist: btScalar,
        maxDist: btScalar,
        resultOut: *mut btDiscreteCollisionDetectorInterface_Result,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btPolyhedralContactClipping18findSeparatingAxisERK18btConvexPolyhedronS2_RK11btTransformS5_R9btVector3RN36btDiscreteCollisionDetectorInterface6ResultE"]
    pub fn btPolyhedralContactClipping_findSeparatingAxis(
        hullA: *const btConvexPolyhedron,
        hullB: *const btConvexPolyhedron,
        transA: *const btTransform,
        transB: *const btTransform,
        sep: *mut btVector3,
        resultOut: *mut btDiscreteCollisionDetectorInterface_Result,
    ) -> bool;
}
extern "C" {
    /// the clipFace method is used internally
    #[link_name = "\u{1}_ZN27btPolyhedralContactClipping8clipFaceERK20btAlignedObjectArrayI9btVector3ERS2_RKS1_f"]
    pub fn btPolyhedralContactClipping_clipFace(
        pVtxIn: *const btVertexArray,
        ppVtxOut: *mut btVertexArray,
        planeNormalWS: *const btVector3,
        planeEqWS: btScalar,
    );
}
impl btPolyhedralContactClipping {
    #[inline]
    pub unsafe fn clipHullAgainstHull(
        separatingNormal1: *const btVector3,
        hullA: *const btConvexPolyhedron,
        hullB: *const btConvexPolyhedron,
        transA: *const btTransform,
        transB: *const btTransform,
        minDist: btScalar,
        maxDist: btScalar,
        worldVertsB1: *mut btVertexArray,
        worldVertsB2: *mut btVertexArray,
        resultOut: *mut btDiscreteCollisionDetectorInterface_Result,
    ) {
        btPolyhedralContactClipping_clipHullAgainstHull(
            separatingNormal1,
            hullA,
            hullB,
            transA,
            transB,
            minDist,
            maxDist,
            worldVertsB1,
            worldVertsB2,
            resultOut,
        )
    }
    #[inline]
    pub unsafe fn clipFaceAgainstHull(
        separatingNormal: *const btVector3,
        hullA: *const btConvexPolyhedron,
        transA: *const btTransform,
        worldVertsB1: *mut btVertexArray,
        worldVertsB2: *mut btVertexArray,
        minDist: btScalar,
        maxDist: btScalar,
        resultOut: *mut btDiscreteCollisionDetectorInterface_Result,
    ) {
        btPolyhedralContactClipping_clipFaceAgainstHull(
            separatingNormal,
            hullA,
            transA,
            worldVertsB1,
            worldVertsB2,
            minDist,
            maxDist,
            resultOut,
        )
    }
    #[inline]
    pub unsafe fn findSeparatingAxis(
        hullA: *const btConvexPolyhedron,
        hullB: *const btConvexPolyhedron,
        transA: *const btTransform,
        transB: *const btTransform,
        sep: *mut btVector3,
        resultOut: *mut btDiscreteCollisionDetectorInterface_Result,
    ) -> bool {
        btPolyhedralContactClipping_findSeparatingAxis(hullA, hullB, transA, transB, sep, resultOut)
    }
    #[inline]
    pub unsafe fn clipFace(
        pVtxIn: *const btVertexArray,
        ppVtxOut: *mut btVertexArray,
        planeNormalWS: *const btVector3,
        planeEqWS: btScalar,
    ) {
        btPolyhedralContactClipping_clipFace(pVtxIn, ppVtxOut, planeNormalWS, planeEqWS)
    }
}
/// The convexConvexAlgorithm collision algorithm implements time of impact, convex closest points and penetration depth calculations between two convex objects.
/// Multiple contact points are calculated by perturbing the orientation of the smallest object orthogonal to the separating normal.
/// This idea was described by Gino van den Bergen in this forum topic http://www.bulletphysics.com/Bullet/phpBB3/viewtopic.php?f=4&t=288&p=888#p888
#[repr(C)]
#[derive(Debug)]
pub struct btConvexConvexAlgorithm {
    pub _base: btActivatingCollisionAlgorithm,
    pub m_pdSolver: *mut btConvexPenetrationDepthSolver,
    pub worldVertsB1: btVertexArray,
    pub worldVertsB2: btVertexArray,
    pub m_ownManifold: bool,
    pub m_manifoldPtr: *mut btPersistentManifold,
    pub m_lowLevelOfDetail: bool,
    pub m_numPerturbationIterations: ::std::os::raw::c_int,
    pub m_minimumPointsPerturbationThreshold: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct btConvexConvexAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
    pub m_pdSolver: *mut btConvexPenetrationDepthSolver,
    pub m_numPerturbationIterations: ::std::os::raw::c_int,
    pub m_minimumPointsPerturbationThreshold: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN23btConvexConvexAlgorithm10CreateFuncC1EP30btConvexPenetrationDepthSolver"]
    pub fn btConvexConvexAlgorithm_CreateFunc_CreateFunc(
        this: *mut btConvexConvexAlgorithm_CreateFunc,
        pdSolver: *mut btConvexPenetrationDepthSolver,
    );
}
impl btConvexConvexAlgorithm_CreateFunc {
    #[inline]
    pub unsafe fn new(pdSolver: *mut btConvexPenetrationDepthSolver) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConvexConvexAlgorithm_CreateFunc_CreateFunc(&mut __bindgen_tmp, pdSolver);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN23btConvexConvexAlgorithm19setLowLevelOfDetailEb"]
    pub fn btConvexConvexAlgorithm_setLowLevelOfDetail(
        this: *mut btConvexConvexAlgorithm,
        useLowLevel: bool,
    );
}
extern "C" {
    /// cache separating vector to speedup collision detection
    #[link_name = "\u{1}_ZN23btConvexConvexAlgorithmC1EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS7_P30btConvexPenetrationDepthSolverii"]
    pub fn btConvexConvexAlgorithm_btConvexConvexAlgorithm(
        this: *mut btConvexConvexAlgorithm,
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        pdSolver: *mut btConvexPenetrationDepthSolver,
        numPerturbationIterations: ::std::os::raw::c_int,
        minimumPointsPerturbationThreshold: ::std::os::raw::c_int,
    );
}
impl btConvexConvexAlgorithm {
    #[inline]
    pub unsafe fn setLowLevelOfDetail(&mut self, useLowLevel: bool) {
        btConvexConvexAlgorithm_setLowLevelOfDetail(self, useLowLevel)
    }
    #[inline]
    pub unsafe fn new(
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        pdSolver: *mut btConvexPenetrationDepthSolver,
        numPerturbationIterations: ::std::os::raw::c_int,
        minimumPointsPerturbationThreshold: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConvexConvexAlgorithm_btConvexConvexAlgorithm(
            &mut __bindgen_tmp,
            mf,
            ci,
            body0Wrap,
            body1Wrap,
            pdSolver,
            numPerturbationIterations,
            minimumPointsPerturbationThreshold,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN23btConvexConvexAlgorithmD1Ev"]
    pub fn btConvexConvexAlgorithm_btConvexConvexAlgorithm_destructor(
        this: *mut btConvexConvexAlgorithm,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btConvexConvexAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btConvexConvexAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btConvexConvexAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN23btConvexConvexAlgorithm10CreateFuncD1Ev"]
    pub fn btConvexConvexAlgorithm_CreateFunc_CreateFunc_destructor(
        this: *mut btConvexConvexAlgorithm_CreateFunc,
    );
}
#[repr(C)]
pub struct btIDebugDraw__bindgen_vtable(::std::os::raw::c_void);
/// The btIDebugDraw interface class allows hooking up a debug renderer to visually debug simulations.
/// Typical use case: create a debug drawer object, and assign it to a btCollisionWorld or btDynamicsWorld using setDebugDrawer and call debugDrawWorld.
/// A class that implements the btIDebugDraw interface has to implement the drawLine method at a minimum.
/// For color arguments the X,Y,Z components refer to Red, Green and Blue each in the range [0..1]
#[repr(C)]
#[derive(Debug)]
pub struct btIDebugDraw {
    pub vtable_: *const btIDebugDraw__bindgen_vtable,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btIDebugDraw_DefaultColors {
    pub m_activeObject: btVector3,
    pub m_deactivatedObject: btVector3,
    pub m_wantsDeactivationObject: btVector3,
    pub m_disabledDeactivationObject: btVector3,
    pub m_disabledSimulationObject: btVector3,
    pub m_aabb: btVector3,
    pub m_contactPoint: btVector3,
}
pub const btIDebugDraw_DebugDrawModes_DBG_NoDebug: btIDebugDraw_DebugDrawModes = 0;
pub const btIDebugDraw_DebugDrawModes_DBG_DrawWireframe: btIDebugDraw_DebugDrawModes = 1;
pub const btIDebugDraw_DebugDrawModes_DBG_DrawAabb: btIDebugDraw_DebugDrawModes = 2;
pub const btIDebugDraw_DebugDrawModes_DBG_DrawFeaturesText: btIDebugDraw_DebugDrawModes = 4;
pub const btIDebugDraw_DebugDrawModes_DBG_DrawContactPoints: btIDebugDraw_DebugDrawModes = 8;
pub const btIDebugDraw_DebugDrawModes_DBG_NoDeactivation: btIDebugDraw_DebugDrawModes = 16;
pub const btIDebugDraw_DebugDrawModes_DBG_NoHelpText: btIDebugDraw_DebugDrawModes = 32;
pub const btIDebugDraw_DebugDrawModes_DBG_DrawText: btIDebugDraw_DebugDrawModes = 64;
pub const btIDebugDraw_DebugDrawModes_DBG_ProfileTimings: btIDebugDraw_DebugDrawModes = 128;
pub const btIDebugDraw_DebugDrawModes_DBG_EnableSatComparison: btIDebugDraw_DebugDrawModes = 256;
pub const btIDebugDraw_DebugDrawModes_DBG_DisableBulletLCP: btIDebugDraw_DebugDrawModes = 512;
pub const btIDebugDraw_DebugDrawModes_DBG_EnableCCD: btIDebugDraw_DebugDrawModes = 1024;
pub const btIDebugDraw_DebugDrawModes_DBG_DrawConstraints: btIDebugDraw_DebugDrawModes = 2048;
pub const btIDebugDraw_DebugDrawModes_DBG_DrawConstraintLimits: btIDebugDraw_DebugDrawModes = 4096;
pub const btIDebugDraw_DebugDrawModes_DBG_FastWireframe: btIDebugDraw_DebugDrawModes = 8192;
pub const btIDebugDraw_DebugDrawModes_DBG_DrawNormals: btIDebugDraw_DebugDrawModes = 16384;
pub const btIDebugDraw_DebugDrawModes_DBG_DrawFrames: btIDebugDraw_DebugDrawModes = 32768;
pub const btIDebugDraw_DebugDrawModes_DBG_MAX_DEBUG_DRAW_MODE: btIDebugDraw_DebugDrawModes = 32769;
pub type btIDebugDraw_DebugDrawModes = u32;
/// ! Collision Algorithm for GImpact Shapes
/// *!
/// For register this algorithm in Bullet, proceed as following:
/// \code
/// btCollisionDispatcher * dispatcher = static_cast<btCollisionDispatcher *>(m_dynamicsWorld ->getDispatcher());
/// btGImpactCollisionAlgorithm::registerAlgorithm(dispatcher);
/// \endcode
/// */
#[repr(C)]
#[derive(Debug)]
pub struct btGImpactCollisionAlgorithm {
    pub _base: btActivatingCollisionAlgorithm,
    pub m_convex_algorithm: *mut btCollisionAlgorithm,
    pub m_manifoldPtr: *mut btPersistentManifold,
    pub m_resultOut: *mut btManifoldResult,
    pub m_dispatchInfo: *const btDispatcherInfo,
    pub m_triface0: ::std::os::raw::c_int,
    pub m_part0: ::std::os::raw::c_int,
    pub m_triface1: ::std::os::raw::c_int,
    pub m_part1: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct btGImpactCollisionAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
extern "C" {
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithm15addContactPointEPK24btCollisionObjectWrapperS2_RK9btVector3S5_f"]
    pub fn btGImpactCollisionAlgorithm_addContactPoint(
        this: *mut btGImpactCollisionAlgorithm,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        point: *const btVector3,
        normal: *const btVector3,
        distance: btScalar,
    );
}
extern "C" {
    /// ! Collision routines
    /// !@{
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithm21collide_gjk_trianglesEPK24btCollisionObjectWrapperS2_PK22btGImpactMeshShapePartS5_PKii"]
    pub fn btGImpactCollisionAlgorithm_collide_gjk_triangles(
        this: *mut btGImpactCollisionAlgorithm,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btGImpactMeshShapePart,
        shape1: *const btGImpactMeshShapePart,
        pairs: *const ::std::os::raw::c_int,
        pair_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithm21collide_sat_trianglesEPK24btCollisionObjectWrapperS2_PK22btGImpactMeshShapePartS5_PKii"]
    pub fn btGImpactCollisionAlgorithm_collide_sat_triangles(
        this: *mut btGImpactCollisionAlgorithm,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btGImpactMeshShapePart,
        shape1: *const btGImpactMeshShapePart,
        pairs: *const ::std::os::raw::c_int,
        pair_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithm24shape_vs_shape_collisionEPK24btCollisionObjectWrapperS2_PK16btCollisionShapeS5_"]
    pub fn btGImpactCollisionAlgorithm_shape_vs_shape_collision(
        this: *mut btGImpactCollisionAlgorithm,
        body0: *const btCollisionObjectWrapper,
        body1: *const btCollisionObjectWrapper,
        shape0: *const btCollisionShape,
        shape1: *const btCollisionShape,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithm26convex_vs_convex_collisionEPK24btCollisionObjectWrapperS2_PK16btCollisionShapeS5_"]
    pub fn btGImpactCollisionAlgorithm_convex_vs_convex_collision(
        this: *mut btGImpactCollisionAlgorithm,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btCollisionShape,
        shape1: *const btCollisionShape,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithm29gimpact_vs_gimpact_find_pairsERK11btTransformS2_PK23btGImpactShapeInterfaceS5_R9btPairSet"]
    pub fn btGImpactCollisionAlgorithm_gimpact_vs_gimpact_find_pairs(
        this: *mut btGImpactCollisionAlgorithm,
        trans0: *const btTransform,
        trans1: *const btTransform,
        shape0: *const btGImpactShapeInterface,
        shape1: *const btGImpactShapeInterface,
        pairset: *mut btPairSet,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithm27gimpact_vs_shape_find_pairsERK11btTransformS2_PK23btGImpactShapeInterfacePK16btCollisionShapeR20btAlignedObjectArrayIiE"]
    pub fn btGImpactCollisionAlgorithm_gimpact_vs_shape_find_pairs(
        this: *mut btGImpactCollisionAlgorithm,
        trans0: *const btTransform,
        trans1: *const btTransform,
        shape0: *const btGImpactShapeInterface,
        shape1: *const btCollisionShape,
        collided_primitives: *mut btAlignedObjectArray<::std::os::raw::c_int>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithm37gimpacttrimeshpart_vs_plane_collisionEPK24btCollisionObjectWrapperS2_PK22btGImpactMeshShapePartPK18btStaticPlaneShapeb"]
    pub fn btGImpactCollisionAlgorithm_gimpacttrimeshpart_vs_plane_collision(
        this: *mut btGImpactCollisionAlgorithm,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btGImpactMeshShapePart,
        shape1: *const btStaticPlaneShape,
        swapped: bool,
    );
}
extern "C" {
    /// ! Use this function for register the algorithm externally
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithm17registerAlgorithmEP21btCollisionDispatcher"]
    pub fn btGImpactCollisionAlgorithm_registerAlgorithm(dispatcher: *mut btCollisionDispatcher);
}
extern "C" {
    /// ! Collides two gimpact shapes
    /// /*!
    /// \pre shape0 and shape1 couldn't be btGImpactMeshShape objects
    /// */
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithm18gimpact_vs_gimpactEPK24btCollisionObjectWrapperS2_PK23btGImpactShapeInterfaceS5_"]
    pub fn btGImpactCollisionAlgorithm_gimpact_vs_gimpact(
        this: *mut btGImpactCollisionAlgorithm,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btGImpactShapeInterface,
        shape1: *const btGImpactShapeInterface,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithm16gimpact_vs_shapeEPK24btCollisionObjectWrapperS2_PK23btGImpactShapeInterfacePK16btCollisionShapeb"]
    pub fn btGImpactCollisionAlgorithm_gimpact_vs_shape(
        this: *mut btGImpactCollisionAlgorithm,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btGImpactShapeInterface,
        shape1: *const btCollisionShape,
        swapped: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithm24gimpact_vs_compoundshapeEPK24btCollisionObjectWrapperS2_PK23btGImpactShapeInterfacePK15btCompoundShapeb"]
    pub fn btGImpactCollisionAlgorithm_gimpact_vs_compoundshape(
        this: *mut btGImpactCollisionAlgorithm,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btGImpactShapeInterface,
        shape1: *const btCompoundShape,
        swapped: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithm18gimpact_vs_concaveEPK24btCollisionObjectWrapperS2_PK23btGImpactShapeInterfacePK14btConcaveShapeb"]
    pub fn btGImpactCollisionAlgorithm_gimpact_vs_concave(
        this: *mut btGImpactCollisionAlgorithm,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btGImpactShapeInterface,
        shape1: *const btConcaveShape,
        swapped: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithmC1ERK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_"]
    pub fn btGImpactCollisionAlgorithm_btGImpactCollisionAlgorithm(
        this: *mut btGImpactCollisionAlgorithm,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
    );
}
impl btGImpactCollisionAlgorithm {
    #[inline]
    pub unsafe fn addContactPoint(
        &mut self,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        point: *const btVector3,
        normal: *const btVector3,
        distance: btScalar,
    ) {
        btGImpactCollisionAlgorithm_addContactPoint(
            self, body0Wrap, body1Wrap, point, normal, distance,
        )
    }
    #[inline]
    pub unsafe fn collide_gjk_triangles(
        &mut self,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btGImpactMeshShapePart,
        shape1: *const btGImpactMeshShapePart,
        pairs: *const ::std::os::raw::c_int,
        pair_count: ::std::os::raw::c_int,
    ) {
        btGImpactCollisionAlgorithm_collide_gjk_triangles(
            self, body0Wrap, body1Wrap, shape0, shape1, pairs, pair_count,
        )
    }
    #[inline]
    pub unsafe fn collide_sat_triangles(
        &mut self,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btGImpactMeshShapePart,
        shape1: *const btGImpactMeshShapePart,
        pairs: *const ::std::os::raw::c_int,
        pair_count: ::std::os::raw::c_int,
    ) {
        btGImpactCollisionAlgorithm_collide_sat_triangles(
            self, body0Wrap, body1Wrap, shape0, shape1, pairs, pair_count,
        )
    }
    #[inline]
    pub unsafe fn shape_vs_shape_collision(
        &mut self,
        body0: *const btCollisionObjectWrapper,
        body1: *const btCollisionObjectWrapper,
        shape0: *const btCollisionShape,
        shape1: *const btCollisionShape,
    ) {
        btGImpactCollisionAlgorithm_shape_vs_shape_collision(self, body0, body1, shape0, shape1)
    }
    #[inline]
    pub unsafe fn convex_vs_convex_collision(
        &mut self,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btCollisionShape,
        shape1: *const btCollisionShape,
    ) {
        btGImpactCollisionAlgorithm_convex_vs_convex_collision(
            self, body0Wrap, body1Wrap, shape0, shape1,
        )
    }
    #[inline]
    pub unsafe fn gimpact_vs_gimpact_find_pairs(
        &mut self,
        trans0: *const btTransform,
        trans1: *const btTransform,
        shape0: *const btGImpactShapeInterface,
        shape1: *const btGImpactShapeInterface,
        pairset: *mut btPairSet,
    ) {
        btGImpactCollisionAlgorithm_gimpact_vs_gimpact_find_pairs(
            self, trans0, trans1, shape0, shape1, pairset,
        )
    }
    #[inline]
    pub unsafe fn gimpact_vs_shape_find_pairs(
        &mut self,
        trans0: *const btTransform,
        trans1: *const btTransform,
        shape0: *const btGImpactShapeInterface,
        shape1: *const btCollisionShape,
        collided_primitives: *mut btAlignedObjectArray<::std::os::raw::c_int>,
    ) {
        btGImpactCollisionAlgorithm_gimpact_vs_shape_find_pairs(
            self,
            trans0,
            trans1,
            shape0,
            shape1,
            collided_primitives,
        )
    }
    #[inline]
    pub unsafe fn gimpacttrimeshpart_vs_plane_collision(
        &mut self,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btGImpactMeshShapePart,
        shape1: *const btStaticPlaneShape,
        swapped: bool,
    ) {
        btGImpactCollisionAlgorithm_gimpacttrimeshpart_vs_plane_collision(
            self, body0Wrap, body1Wrap, shape0, shape1, swapped,
        )
    }
    #[inline]
    pub unsafe fn registerAlgorithm(dispatcher: *mut btCollisionDispatcher) {
        btGImpactCollisionAlgorithm_registerAlgorithm(dispatcher)
    }
    #[inline]
    pub unsafe fn gimpact_vs_gimpact(
        &mut self,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btGImpactShapeInterface,
        shape1: *const btGImpactShapeInterface,
    ) {
        btGImpactCollisionAlgorithm_gimpact_vs_gimpact(self, body0Wrap, body1Wrap, shape0, shape1)
    }
    #[inline]
    pub unsafe fn gimpact_vs_shape(
        &mut self,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btGImpactShapeInterface,
        shape1: *const btCollisionShape,
        swapped: bool,
    ) {
        btGImpactCollisionAlgorithm_gimpact_vs_shape(
            self, body0Wrap, body1Wrap, shape0, shape1, swapped,
        )
    }
    #[inline]
    pub unsafe fn gimpact_vs_compoundshape(
        &mut self,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btGImpactShapeInterface,
        shape1: *const btCompoundShape,
        swapped: bool,
    ) {
        btGImpactCollisionAlgorithm_gimpact_vs_compoundshape(
            self, body0Wrap, body1Wrap, shape0, shape1, swapped,
        )
    }
    #[inline]
    pub unsafe fn gimpact_vs_concave(
        &mut self,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        shape0: *const btGImpactShapeInterface,
        shape1: *const btConcaveShape,
        swapped: bool,
    ) {
        btGImpactCollisionAlgorithm_gimpact_vs_concave(
            self, body0Wrap, body1Wrap, shape0, shape1, swapped,
        )
    }
    #[inline]
    pub unsafe fn new(
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btGImpactCollisionAlgorithm_btGImpactCollisionAlgorithm(
            &mut __bindgen_tmp,
            ci,
            body0Wrap,
            body1Wrap,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithmD1Ev"]
    pub fn btGImpactCollisionAlgorithm_btGImpactCollisionAlgorithm_destructor(
        this: *mut btGImpactCollisionAlgorithm,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btGImpactCollisionAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btGImpactCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btGImpactCollisionAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
/// ! Generic Pool class
#[repr(C)]
#[derive(Debug)]
pub struct btGenericMemoryPool {
    pub m_pool: *mut ::std::os::raw::c_uchar,
    pub m_free_nodes: *mut usize,
    pub m_allocated_sizes: *mut usize,
    pub m_allocated_count: usize,
    pub m_free_nodes_count: usize,
    pub m_element_size: usize,
    pub m_max_element_count: usize,
}
extern "C" {
    #[link_name = "\u{1}_ZN19btGenericMemoryPool24allocate_from_free_nodesEm"]
    pub fn btGenericMemoryPool_allocate_from_free_nodes(
        this: *mut btGenericMemoryPool,
        num_elements: usize,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN19btGenericMemoryPool18allocate_from_poolEm"]
    pub fn btGenericMemoryPool_allocate_from_pool(
        this: *mut btGenericMemoryPool,
        num_elements: usize,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN19btGenericMemoryPool9init_poolEmm"]
    pub fn btGenericMemoryPool_init_pool(
        this: *mut btGenericMemoryPool,
        element_size: usize,
        element_count: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN19btGenericMemoryPool8end_poolEv"]
    pub fn btGenericMemoryPool_end_pool(this: *mut btGenericMemoryPool);
}
extern "C" {
    /// ! Allocates memory in pool
    /// /*!
    /// \param size_bytes size in bytes of the buffer
    /// */
    #[link_name = "\u{1}_ZN19btGenericMemoryPool8allocateEm"]
    pub fn btGenericMemoryPool_allocate(
        this: *mut btGenericMemoryPool,
        size_bytes: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN19btGenericMemoryPool10freeMemoryEPv"]
    pub fn btGenericMemoryPool_freeMemory(
        this: *mut btGenericMemoryPool,
        pointer: *mut ::std::os::raw::c_void,
    ) -> bool;
}
impl btGenericMemoryPool {
    #[inline]
    pub unsafe fn allocate_from_free_nodes(&mut self, num_elements: usize) -> usize {
        btGenericMemoryPool_allocate_from_free_nodes(self, num_elements)
    }
    #[inline]
    pub unsafe fn allocate_from_pool(&mut self, num_elements: usize) -> usize {
        btGenericMemoryPool_allocate_from_pool(self, num_elements)
    }
    #[inline]
    pub unsafe fn init_pool(&mut self, element_size: usize, element_count: usize) {
        btGenericMemoryPool_init_pool(self, element_size, element_count)
    }
    #[inline]
    pub unsafe fn end_pool(&mut self) {
        btGenericMemoryPool_end_pool(self)
    }
    #[inline]
    pub unsafe fn allocate(&mut self, size_bytes: usize) -> *mut ::std::os::raw::c_void {
        btGenericMemoryPool_allocate(self, size_bytes)
    }
    #[inline]
    pub unsafe fn freeMemory(&mut self, pointer: *mut ::std::os::raw::c_void) -> bool {
        btGenericMemoryPool_freeMemory(self, pointer)
    }
}
#[repr(C)]
pub struct btGenericPoolAllocator__bindgen_vtable(::std::os::raw::c_void);
/// ! Generic Allocator with pools
/// *!
/// General purpose Allocator which can create Memory Pools dynamiacally as needed.
/// */
#[repr(C)]
#[derive(Debug)]
pub struct btGenericPoolAllocator {
    pub vtable_: *const btGenericPoolAllocator__bindgen_vtable,
    pub m_pool_element_size: usize,
    pub m_pool_element_count: usize,
    pub m_pools: [*mut btGenericMemoryPool; 16usize],
    pub m_pool_count: usize,
}
extern "C" {
    #[link_name = "\u{1}_ZN22btGenericPoolAllocator13push_new_poolEv"]
    pub fn btGenericPoolAllocator_push_new_pool(
        this: *mut btGenericPoolAllocator,
    ) -> *mut btGenericMemoryPool;
}
extern "C" {
    #[link_name = "\u{1}_ZN22btGenericPoolAllocator14failback_allocEm"]
    pub fn btGenericPoolAllocator_failback_alloc(
        this: *mut btGenericPoolAllocator,
        size_bytes: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN22btGenericPoolAllocator13failback_freeEPv"]
    pub fn btGenericPoolAllocator_failback_free(
        this: *mut btGenericPoolAllocator,
        pointer: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    /// ! Allocates memory in pool
    /// /*!
    /// \param size_bytes size in bytes of the buffer
    /// */
    #[link_name = "\u{1}_ZN22btGenericPoolAllocator8allocateEm"]
    pub fn btGenericPoolAllocator_allocate(
        this: *mut btGenericPoolAllocator,
        size_bytes: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN22btGenericPoolAllocator10freeMemoryEPv"]
    pub fn btGenericPoolAllocator_freeMemory(
        this: *mut btGenericPoolAllocator,
        pointer: *mut ::std::os::raw::c_void,
    ) -> bool;
}
impl btGenericPoolAllocator {
    #[inline]
    pub unsafe fn push_new_pool(&mut self) -> *mut btGenericMemoryPool {
        btGenericPoolAllocator_push_new_pool(self)
    }
    #[inline]
    pub unsafe fn failback_alloc(&mut self, size_bytes: usize) -> *mut ::std::os::raw::c_void {
        btGenericPoolAllocator_failback_alloc(self, size_bytes)
    }
    #[inline]
    pub unsafe fn failback_free(&mut self, pointer: *mut ::std::os::raw::c_void) -> bool {
        btGenericPoolAllocator_failback_free(self, pointer)
    }
    #[inline]
    pub unsafe fn allocate(&mut self, size_bytes: usize) -> *mut ::std::os::raw::c_void {
        btGenericPoolAllocator_allocate(self, size_bytes)
    }
    #[inline]
    pub unsafe fn freeMemory(&mut self, pointer: *mut ::std::os::raw::c_void) -> bool {
        btGenericPoolAllocator_freeMemory(self, pointer)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN22btGenericPoolAllocatorD1Ev"]
    pub fn btGenericPoolAllocator_btGenericPoolAllocator_destructor(
        this: *mut btGenericPoolAllocator,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z11btPoolAllocm"]
    pub fn btPoolAlloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z13btPoolReallocPvmm"]
    pub fn btPoolRealloc(
        ptr: *mut ::std::os::raw::c_void,
        oldsize: usize,
        newsize: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z10btPoolFreePv"]
    pub fn btPoolFree(ptr: *mut ::std::os::raw::c_void);
}
#[repr(C)]
pub struct btGjkCollisionDescription__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btGjkCollisionDescription {
    pub vtable_: *const btGjkCollisionDescription__bindgen_vtable,
    pub m_firstDir: btVector3,
    pub m_maxGjkIterations: ::std::os::raw::c_int,
    pub m_maximumDistanceSquared: btScalar,
    pub m_gjkRelError2: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btGjkEpaSolver3 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btGjkEpaSolver3_sResults {
    pub status: btGjkEpaSolver3_sResults_eStatus,
    pub witnesses: [btVector3; 2usize],
    pub normal: btVector3,
    pub distance: btScalar,
}
pub const btGjkEpaSolver3_sResults_eStatus_Separated: btGjkEpaSolver3_sResults_eStatus = 0;
pub const btGjkEpaSolver3_sResults_eStatus_Penetrating: btGjkEpaSolver3_sResults_eStatus = 1;
pub const btGjkEpaSolver3_sResults_eStatus_GJK_Failed: btGjkEpaSolver3_sResults_eStatus = 2;
pub const btGjkEpaSolver3_sResults_eStatus_EPA_Failed: btGjkEpaSolver3_sResults_eStatus = 3;
pub type btGjkEpaSolver3_sResults_eStatus = u32;
#[repr(C)]
pub struct btConvexCast__bindgen_vtable(::std::os::raw::c_void);
/// btConvexCast is an interface for Casting
#[repr(C)]
#[derive(Debug)]
pub struct btConvexCast {
    pub vtable_: *const btConvexCast__bindgen_vtable,
}
#[repr(C)]
pub struct btConvexCast_CastResult__bindgen_vtable(::std::os::raw::c_void);
/// RayResult stores the closest result
/// /// alternatively, add a callback method to decide about closest/all results
#[repr(C)]
#[derive(Debug)]
pub struct btConvexCast_CastResult {
    pub vtable_: *const btConvexCast_CastResult__bindgen_vtable,
    pub m_hitTransformA: btTransform,
    pub m_hitTransformB: btTransform,
    pub m_normal: btVector3,
    pub m_hitPoint: btVector3,
    pub m_fraction: btScalar,
    pub m_debugDrawer: *mut btIDebugDraw,
    pub m_allowedPenetration: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZN12btConvexCastD1Ev"]
    pub fn btConvexCast_btConvexCast_destructor(this: *mut btConvexCast);
}
/// btContinuousConvexCollision implements angular and linear time of impact for convex objects.
/// Based on Brian Mirtich's Conservative Advancement idea (PhD thesis).
/// Algorithm operates in worldspace, in order to keep in between motion globally consistent.
/// It uses GJK at the moment. Future improvement would use minkowski sum / supporting vertex, merging innerloops
#[repr(C)]
#[derive(Debug)]
pub struct btContinuousConvexCollision {
    pub _base: btConvexCast,
    pub m_simplexSolver: *mut btVoronoiSimplexSolver,
    pub m_penetrationDepthSolver: *mut btConvexPenetrationDepthSolver,
    pub m_convexA: *const btConvexShape,
    pub m_convexB1: *const btConvexShape,
    pub m_planeShape: *const btStaticPlaneShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN27btContinuousConvexCollisionC1EPK13btConvexShapeS2_P22btVoronoiSimplexSolverP30btConvexPenetrationDepthSolver"]
    pub fn btContinuousConvexCollision_btContinuousConvexCollision(
        this: *mut btContinuousConvexCollision,
        shapeA: *const btConvexShape,
        shapeB: *const btConvexShape,
        simplexSolver: *mut btVoronoiSimplexSolver,
        penetrationDepthSolver: *mut btConvexPenetrationDepthSolver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btContinuousConvexCollisionC1EPK13btConvexShapePK18btStaticPlaneShape"]
    pub fn btContinuousConvexCollision_btContinuousConvexCollision1(
        this: *mut btContinuousConvexCollision,
        shapeA: *const btConvexShape,
        plane: *const btStaticPlaneShape,
    );
}
impl btContinuousConvexCollision {
    #[inline]
    pub unsafe fn new(
        shapeA: *const btConvexShape,
        shapeB: *const btConvexShape,
        simplexSolver: *mut btVoronoiSimplexSolver,
        penetrationDepthSolver: *mut btConvexPenetrationDepthSolver,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btContinuousConvexCollision_btContinuousConvexCollision(
            &mut __bindgen_tmp,
            shapeA,
            shapeB,
            simplexSolver,
            penetrationDepthSolver,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(shapeA: *const btConvexShape, plane: *const btStaticPlaneShape) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btContinuousConvexCollision_btContinuousConvexCollision1(&mut __bindgen_tmp, shapeA, plane);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN27btContinuousConvexCollision16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE"]
    pub fn btContinuousConvexCollision_calcTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        fromA: *const btTransform,
        toA: *const btTransform,
        fromB: *const btTransform,
        toB: *const btTransform,
        result: *mut btConvexCast_CastResult,
    ) -> bool;
}
/// GjkConvexCast performs a raycast on a convex object using support mapping.
#[repr(C)]
#[derive(Debug)]
pub struct btGjkConvexCast {
    pub _base: btConvexCast,
    pub m_simplexSolver: *mut btVoronoiSimplexSolver,
    pub m_convexA: *const btConvexShape,
    pub m_convexB: *const btConvexShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN15btGjkConvexCastC1EPK13btConvexShapeS2_P22btVoronoiSimplexSolver"]
    pub fn btGjkConvexCast_btGjkConvexCast(
        this: *mut btGjkConvexCast,
        convexA: *const btConvexShape,
        convexB: *const btConvexShape,
        simplexSolver: *mut btVoronoiSimplexSolver,
    );
}
impl btGjkConvexCast {
    #[inline]
    pub unsafe fn new(
        convexA: *const btConvexShape,
        convexB: *const btConvexShape,
        simplexSolver: *mut btVoronoiSimplexSolver,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btGjkConvexCast_btGjkConvexCast(&mut __bindgen_tmp, convexA, convexB, simplexSolver);
        __bindgen_tmp
    }
}
extern "C" {
    /// cast a convex against another convex object
    #[link_name = "\u{1}_ZN15btGjkConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE"]
    pub fn btGjkConvexCast_calcTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        fromA: *const btTransform,
        toA: *const btTransform,
        fromB: *const btTransform,
        toB: *const btTransform,
        result: *mut btConvexCast_CastResult,
    ) -> bool;
}
#[repr(C)]
pub struct btConvexPenetrationDepthSolver__bindgen_vtable(::std::os::raw::c_void);
/// ConvexPenetrationDepthSolver provides an interface for penetration depth calculation.
#[repr(C)]
#[derive(Debug)]
pub struct btConvexPenetrationDepthSolver {
    pub vtable_: *const btConvexPenetrationDepthSolver__bindgen_vtable,
}
/// EpaPenetrationDepthSolver uses the Expanding Polytope Algorithm to
/// calculate the penetration depth between two convex shapes.
#[repr(C)]
#[derive(Debug)]
pub struct btGjkEpaPenetrationDepthSolver {
    pub _base: btConvexPenetrationDepthSolver,
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGjkEpaPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDraw"]
    pub fn btGjkEpaPenetrationDepthSolver_calcPenDepth(
        this: *mut ::std::os::raw::c_void,
        simplexSolver: *mut btVoronoiSimplexSolver,
        pConvexA: *const btConvexShape,
        pConvexB: *const btConvexShape,
        transformA: *const btTransform,
        transformB: *const btTransform,
        v: *mut btVector3,
        wWitnessOnA: *mut btVector3,
        wWitnessOnB: *mut btVector3,
        debugDraw: *mut btIDebugDraw,
    ) -> bool;
}
/// MinkowskiPenetrationDepthSolver implements bruteforce penetration depth estimation.
/// Implementation is based on sampling the depth using support mapping, and using GJK step to get the witness points.
#[repr(C)]
#[derive(Debug)]
pub struct btMinkowskiPenetrationDepthSolver {
    pub _base: btConvexPenetrationDepthSolver,
}
extern "C" {
    #[link_name = "\u{1}_ZN33btMinkowskiPenetrationDepthSolver24getPenetrationDirectionsEv"]
    pub fn btMinkowskiPenetrationDepthSolver_getPenetrationDirections() -> *mut btVector3;
}
impl btMinkowskiPenetrationDepthSolver {
    #[inline]
    pub unsafe fn getPenetrationDirections() -> *mut btVector3 {
        btMinkowskiPenetrationDepthSolver_getPenetrationDirections()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDraw"]
    pub fn btMinkowskiPenetrationDepthSolver_calcPenDepth(
        this: *mut ::std::os::raw::c_void,
        simplexSolver: *mut btVoronoiSimplexSolver,
        convexA: *const btConvexShape,
        convexB: *const btConvexShape,
        transA: *const btTransform,
        transB: *const btTransform,
        v: *mut btVector3,
        pa: *mut btVector3,
        pb: *mut btVector3,
        debugDraw: *mut btIDebugDraw,
    ) -> bool;
}
#[repr(C)]
pub struct btMprCollisionDescription__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btMprCollisionDescription {
    pub vtable_: *const btMprCollisionDescription__bindgen_vtable,
    pub m_firstDir: btVector3,
    pub m_maxGjkIterations: ::std::os::raw::c_int,
    pub m_maximumDistanceSquared: btScalar,
    pub m_gjkRelError2: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMprDistanceInfo {
    pub m_pointOnA: btVector3,
    pub m_pointOnB: btVector3,
    pub m_normalBtoA: btVector3,
    pub m_distance: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _btMprSupport_t {
    /// !< Support point in minkowski sum
    pub v: btVector3,
    /// !< Support point in obj1
    pub v1: btVector3,
    /// !< Support point in obj2
    pub v2: btVector3,
}
pub type btMprSupport_t = _btMprSupport_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _btMprSimplex_t {
    pub ps: [btMprSupport_t; 4usize],
    /// !< index of last added point
    pub last: ::std::os::raw::c_int,
}
pub type btMprSimplex_t = _btMprSimplex_t;
#[repr(C)]
#[derive(Debug)]
pub struct btPointCollector {
    pub _base: btDiscreteCollisionDetectorInterface_Result,
    pub m_normalOnBInWorld: btVector3,
    pub m_pointInWorld: btVector3,
    pub m_distance: btScalar,
    pub m_hasResult: bool,
}
/// btSubsimplexConvexCast implements Gino van den Bergens' paper
/// "Ray Casting against bteral Convex Objects with Application to Continuous Collision Detection"
/// GJK based Ray Cast, optimized version
/// Objects should not start in overlap, otherwise results are not defined.
#[repr(C)]
#[derive(Debug)]
pub struct btSubsimplexConvexCast {
    pub _base: btConvexCast,
    pub m_simplexSolver: *mut btVoronoiSimplexSolver,
    pub m_convexA: *const btConvexShape,
    pub m_convexB: *const btConvexShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN22btSubsimplexConvexCastC1EPK13btConvexShapeS2_P22btVoronoiSimplexSolver"]
    pub fn btSubsimplexConvexCast_btSubsimplexConvexCast(
        this: *mut btSubsimplexConvexCast,
        shapeA: *const btConvexShape,
        shapeB: *const btConvexShape,
        simplexSolver: *mut btVoronoiSimplexSolver,
    );
}
impl btSubsimplexConvexCast {
    #[inline]
    pub unsafe fn new(
        shapeA: *const btConvexShape,
        shapeB: *const btConvexShape,
        simplexSolver: *mut btVoronoiSimplexSolver,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSubsimplexConvexCast_btSubsimplexConvexCast(
            &mut __bindgen_tmp,
            shapeA,
            shapeB,
            simplexSolver,
        );
        __bindgen_tmp
    }
}
extern "C" {
    /// SimsimplexConvexCast calculateTimeOfImpact calculates the time of impact+normal for the linear cast (sweep) between two moving objects.
    /// ///Precondition is that objects should not penetration/overlap at the start from the interval. Overlap can be tested using btGjkPairDetector.
    #[link_name = "\u{1}_ZN22btSubsimplexConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE"]
    pub fn btSubsimplexConvexCast_calcTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        fromA: *const btTransform,
        toA: *const btTransform,
        fromB: *const btTransform,
        toB: *const btTransform,
        result: *mut btConvexCast_CastResult,
    ) -> bool;
}
pub const btRigidBodyFlags_BT_DISABLE_WORLD_GRAVITY: btRigidBodyFlags = 1;
/// BT_ENABLE_GYROPSCOPIC_FORCE flags is enabled by default in Bullet 2.83 and onwards.
/// ///and it BT_ENABLE_GYROPSCOPIC_FORCE becomes equivalent to BT_ENABLE_GYROSCOPIC_FORCE_IMPLICIT_BODY
/// ///See Demos/GyroscopicDemo and computeGyroscopicImpulseImplicit
pub const btRigidBodyFlags_BT_ENABLE_GYROSCOPIC_FORCE_EXPLICIT: btRigidBodyFlags = 2;
/// BT_ENABLE_GYROPSCOPIC_FORCE flags is enabled by default in Bullet 2.83 and onwards.
/// ///and it BT_ENABLE_GYROPSCOPIC_FORCE becomes equivalent to BT_ENABLE_GYROSCOPIC_FORCE_IMPLICIT_BODY
/// ///See Demos/GyroscopicDemo and computeGyroscopicImpulseImplicit
pub const btRigidBodyFlags_BT_ENABLE_GYROSCOPIC_FORCE_IMPLICIT_WORLD: btRigidBodyFlags = 4;
/// BT_ENABLE_GYROPSCOPIC_FORCE flags is enabled by default in Bullet 2.83 and onwards.
/// ///and it BT_ENABLE_GYROPSCOPIC_FORCE becomes equivalent to BT_ENABLE_GYROSCOPIC_FORCE_IMPLICIT_BODY
/// ///See Demos/GyroscopicDemo and computeGyroscopicImpulseImplicit
pub const btRigidBodyFlags_BT_ENABLE_GYROSCOPIC_FORCE_IMPLICIT_BODY: btRigidBodyFlags = 8;
/// BT_ENABLE_GYROPSCOPIC_FORCE flags is enabled by default in Bullet 2.83 and onwards.
/// ///and it BT_ENABLE_GYROPSCOPIC_FORCE becomes equivalent to BT_ENABLE_GYROSCOPIC_FORCE_IMPLICIT_BODY
/// ///See Demos/GyroscopicDemo and computeGyroscopicImpulseImplicit
pub const btRigidBodyFlags_BT_ENABLE_GYROPSCOPIC_FORCE: btRigidBodyFlags = 8;
pub type btRigidBodyFlags = u32;
/// The btRigidBody is the main class for rigid body objects. It is derived from btCollisionObject, so it keeps a pointer to a btCollisionShape.
/// It is recommended for performance and memory use to share btCollisionShape objects whenever possible.
/// There are 3 types of rigid bodies:
/// - A) Dynamic rigid bodies, with positive mass. Motion is controlled by rigid body dynamics.
/// - B) Fixed objects with zero mass. They are not moving (basically collision objects)
/// - C) Kinematic objects, which are objects without mass, but the user can move them. There is on-way interaction, and Bullet calculates a velocity based on the timestep and previous and current world transform.
/// Bullet automatically deactivates dynamic rigid bodies, when the velocity is below a threshold for a given time.
/// Deactivated (sleeping) rigid bodies don't take any processing time, except a minor broadphase collision detection impact (to allow active objects to activate/wake up sleeping objects)
#[repr(C)]
#[derive(Debug)]
pub struct btRigidBody {
    pub _base: btCollisionObject,
    pub m_invInertiaTensorWorld: btMatrix3x3,
    pub m_linearVelocity: btVector3,
    pub m_angularVelocity: btVector3,
    pub m_inverseMass: btScalar,
    pub m_linearFactor: btVector3,
    pub m_gravity: btVector3,
    pub m_gravity_acceleration: btVector3,
    pub m_invInertiaLocal: btVector3,
    pub m_totalForce: btVector3,
    pub m_totalTorque: btVector3,
    pub m_linearDamping: btScalar,
    pub m_angularDamping: btScalar,
    pub m_additionalDamping: bool,
    pub m_additionalDampingFactor: btScalar,
    pub m_additionalLinearDampingThresholdSqr: btScalar,
    pub m_additionalAngularDampingThresholdSqr: btScalar,
    pub m_additionalAngularDampingFactor: btScalar,
    pub m_linearSleepingThreshold: btScalar,
    pub m_angularSleepingThreshold: btScalar,
    pub m_optionalMotionState: *mut btMotionState,
    pub m_constraintRefs: btAlignedObjectArray<*mut btTypedConstraint>,
    pub m_rigidbodyFlags: ::std::os::raw::c_int,
    pub m_debugBodyId: ::std::os::raw::c_int,
    pub m_deltaLinearVelocity: btVector3,
    pub m_deltaAngularVelocity: btVector3,
    pub m_angularFactor: btVector3,
    pub m_invMass: btVector3,
    pub m_pushVelocity: btVector3,
    pub m_turnVelocity: btVector3,
    pub m_contactSolverType: ::std::os::raw::c_int,
    pub m_frictionSolverType: ::std::os::raw::c_int,
}
/// The btRigidBodyConstructionInfo structure provides information to create a rigid body. Setting mass to zero creates a fixed (non-dynamic) rigid body.
/// ///For dynamic objects, you can use the collision shape to approximate the local inertia tensor, otherwise use the zero vector (default argument)
/// ///You can use the motion state to synchronize the world transform between physics and graphics objects.
/// ///And if the motion state is provided, the rigid body will initialize its initial world transform from the motion state,
/// ///m_startWorldTransform is only used when you don't provide a motion state.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btRigidBody_btRigidBodyConstructionInfo {
    pub m_mass: btScalar,
    /// When a motionState is provided, the rigid body will initialize its world transform from the motion state
    /// ///In this case, m_startWorldTransform is ignored.
    pub m_motionState: *mut btMotionState,
    pub m_startWorldTransform: btTransform,
    pub m_collisionShape: *mut btCollisionShape,
    pub m_localInertia: btVector3,
    pub m_linearDamping: btScalar,
    pub m_angularDamping: btScalar,
    /// best simulation results when friction is non-zero
    pub m_friction: btScalar,
    /// the m_rollingFriction prevents rounded shapes, such as spheres, cylinders and capsules from rolling forever.
    /// ///See Bullet/Demos/RollingFrictionDemo for usage
    pub m_rollingFriction: btScalar,
    pub m_spinningFriction: btScalar,
    /// best simulation results using zero restitution.
    pub m_restitution: btScalar,
    pub m_linearSleepingThreshold: btScalar,
    pub m_angularSleepingThreshold: btScalar,
    pub m_additionalDamping: bool,
    pub m_additionalDampingFactor: btScalar,
    pub m_additionalLinearDampingThresholdSqr: btScalar,
    pub m_additionalAngularDampingThresholdSqr: btScalar,
    pub m_additionalAngularDampingFactor: btScalar,
}
extern "C" {
    /// setupRigidBody is only used internally by the constructor
    #[link_name = "\u{1}_ZN11btRigidBody14setupRigidBodyERKNS_27btRigidBodyConstructionInfoE"]
    pub fn btRigidBody_setupRigidBody(
        this: *mut btRigidBody,
        constructionInfo: *const btRigidBody_btRigidBodyConstructionInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btRigidBody18proceedToTransformERK11btTransform"]
    pub fn btRigidBody_proceedToTransform(this: *mut btRigidBody, newTrans: *const btTransform);
}
extern "C" {
    /// continuous collision detection needs prediction
    #[link_name = "\u{1}_ZN11btRigidBody26predictIntegratedTransformEfR11btTransform"]
    pub fn btRigidBody_predictIntegratedTransform(
        this: *mut btRigidBody,
        step: btScalar,
        predictedTransform: *mut btTransform,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btRigidBody18saveKinematicStateEf"]
    pub fn btRigidBody_saveKinematicState(this: *mut btRigidBody, step: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btRigidBody12applyGravityEv"]
    pub fn btRigidBody_applyGravity(this: *mut btRigidBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btRigidBody10setGravityERK9btVector3"]
    pub fn btRigidBody_setGravity(this: *mut btRigidBody, acceleration: *const btVector3);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btRigidBody10setDampingEff"]
    pub fn btRigidBody_setDamping(
        this: *mut btRigidBody,
        lin_damping: btScalar,
        ang_damping: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btRigidBody12applyDampingEf"]
    pub fn btRigidBody_applyDamping(this: *mut btRigidBody, timeStep: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btRigidBody12setMassPropsEfRK9btVector3"]
    pub fn btRigidBody_setMassProps(
        this: *mut btRigidBody,
        mass: btScalar,
        inertia: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btRigidBody19integrateVelocitiesEf"]
    pub fn btRigidBody_integrateVelocities(this: *mut btRigidBody, step: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btRigidBody24setCenterOfMassTransformERK11btTransform"]
    pub fn btRigidBody_setCenterOfMassTransform(this: *mut btRigidBody, xform: *const btTransform);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btRigidBody19updateInertiaTensorEv"]
    pub fn btRigidBody_updateInertiaTensor(this: *mut btRigidBody);
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btRigidBody14getOrientationEv"]
    pub fn btRigidBody_getOrientation(this: *const btRigidBody) -> btQuaternion;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btRigidBody7getAabbER9btVector3S1_"]
    pub fn btRigidBody_getAabb(
        this: *const btRigidBody,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btRigidBody16addConstraintRefEP17btTypedConstraint"]
    pub fn btRigidBody_addConstraintRef(this: *mut btRigidBody, c: *mut btTypedConstraint);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btRigidBody19removeConstraintRefEP17btTypedConstraint"]
    pub fn btRigidBody_removeConstraintRef(this: *mut btRigidBody, c: *mut btTypedConstraint);
}
extern "C" {
    /// perform implicit force computation in world space
    #[link_name = "\u{1}_ZNK11btRigidBody38computeGyroscopicImpulseImplicit_WorldEf"]
    pub fn btRigidBody_computeGyroscopicImpulseImplicit_World(
        this: *const btRigidBody,
        dt: btScalar,
    ) -> btVector3;
}
extern "C" {
    /// perform implicit force computation in body space (inertial frame)
    #[link_name = "\u{1}_ZNK11btRigidBody37computeGyroscopicImpulseImplicit_BodyEf"]
    pub fn btRigidBody_computeGyroscopicImpulseImplicit_Body(
        this: *const btRigidBody,
        step: btScalar,
    ) -> btVector3;
}
extern "C" {
    /// explicit version is best avoided, it gains energy
    #[link_name = "\u{1}_ZNK11btRigidBody30computeGyroscopicForceExplicitEf"]
    pub fn btRigidBody_computeGyroscopicForceExplicit(
        this: *const btRigidBody,
        maxGyroscopicForce: btScalar,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btRigidBody15getLocalInertiaEv"]
    pub fn btRigidBody_getLocalInertia(this: *const btRigidBody) -> btVector3;
}
extern "C" {
    /// btRigidBody constructor using construction info
    #[link_name = "\u{1}_ZN11btRigidBodyC1ERKNS_27btRigidBodyConstructionInfoE"]
    pub fn btRigidBody_btRigidBody(
        this: *mut btRigidBody,
        constructionInfo: *const btRigidBody_btRigidBodyConstructionInfo,
    );
}
extern "C" {
    /// btRigidBody constructor for backwards compatibility.
    /// ///To specify friction (etc) during rigid body construction, please use the other constructor (using btRigidBodyConstructionInfo)
    #[link_name = "\u{1}_ZN11btRigidBodyC1EfP13btMotionStateP16btCollisionShapeRK9btVector3"]
    pub fn btRigidBody_btRigidBody1(
        this: *mut btRigidBody,
        mass: btScalar,
        motionState: *mut btMotionState,
        collisionShape: *mut btCollisionShape,
        localInertia: *const btVector3,
    );
}
impl btRigidBody {
    #[inline]
    pub unsafe fn setupRigidBody(
        &mut self,
        constructionInfo: *const btRigidBody_btRigidBodyConstructionInfo,
    ) {
        btRigidBody_setupRigidBody(self, constructionInfo)
    }
    #[inline]
    pub unsafe fn proceedToTransform(&mut self, newTrans: *const btTransform) {
        btRigidBody_proceedToTransform(self, newTrans)
    }
    #[inline]
    pub unsafe fn predictIntegratedTransform(
        &mut self,
        step: btScalar,
        predictedTransform: *mut btTransform,
    ) {
        btRigidBody_predictIntegratedTransform(self, step, predictedTransform)
    }
    #[inline]
    pub unsafe fn saveKinematicState(&mut self, step: btScalar) {
        btRigidBody_saveKinematicState(self, step)
    }
    #[inline]
    pub unsafe fn applyGravity(&mut self) {
        btRigidBody_applyGravity(self)
    }
    #[inline]
    pub unsafe fn setGravity(&mut self, acceleration: *const btVector3) {
        btRigidBody_setGravity(self, acceleration)
    }
    #[inline]
    pub unsafe fn setDamping(&mut self, lin_damping: btScalar, ang_damping: btScalar) {
        btRigidBody_setDamping(self, lin_damping, ang_damping)
    }
    #[inline]
    pub unsafe fn applyDamping(&mut self, timeStep: btScalar) {
        btRigidBody_applyDamping(self, timeStep)
    }
    #[inline]
    pub unsafe fn setMassProps(&mut self, mass: btScalar, inertia: *const btVector3) {
        btRigidBody_setMassProps(self, mass, inertia)
    }
    #[inline]
    pub unsafe fn integrateVelocities(&mut self, step: btScalar) {
        btRigidBody_integrateVelocities(self, step)
    }
    #[inline]
    pub unsafe fn setCenterOfMassTransform(&mut self, xform: *const btTransform) {
        btRigidBody_setCenterOfMassTransform(self, xform)
    }
    #[inline]
    pub unsafe fn updateInertiaTensor(&mut self) {
        btRigidBody_updateInertiaTensor(self)
    }
    #[inline]
    pub unsafe fn getOrientation(&self) -> btQuaternion {
        btRigidBody_getOrientation(self)
    }
    #[inline]
    pub unsafe fn getAabb(&self, aabbMin: *mut btVector3, aabbMax: *mut btVector3) {
        btRigidBody_getAabb(self, aabbMin, aabbMax)
    }
    #[inline]
    pub unsafe fn addConstraintRef(&mut self, c: *mut btTypedConstraint) {
        btRigidBody_addConstraintRef(self, c)
    }
    #[inline]
    pub unsafe fn removeConstraintRef(&mut self, c: *mut btTypedConstraint) {
        btRigidBody_removeConstraintRef(self, c)
    }
    #[inline]
    pub unsafe fn computeGyroscopicImpulseImplicit_World(&self, dt: btScalar) -> btVector3 {
        btRigidBody_computeGyroscopicImpulseImplicit_World(self, dt)
    }
    #[inline]
    pub unsafe fn computeGyroscopicImpulseImplicit_Body(&self, step: btScalar) -> btVector3 {
        btRigidBody_computeGyroscopicImpulseImplicit_Body(self, step)
    }
    #[inline]
    pub unsafe fn computeGyroscopicForceExplicit(&self, maxGyroscopicForce: btScalar) -> btVector3 {
        btRigidBody_computeGyroscopicForceExplicit(self, maxGyroscopicForce)
    }
    #[inline]
    pub unsafe fn getLocalInertia(&self) -> btVector3 {
        btRigidBody_getLocalInertia(self)
    }
    #[inline]
    pub unsafe fn new(constructionInfo: *const btRigidBody_btRigidBodyConstructionInfo) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btRigidBody_btRigidBody(&mut __bindgen_tmp, constructionInfo);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        mass: btScalar,
        motionState: *mut btMotionState,
        collisionShape: *mut btCollisionShape,
        localInertia: *const btVector3,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btRigidBody_btRigidBody1(
            &mut __bindgen_tmp,
            mass,
            motionState,
            collisionShape,
            localInertia,
        );
        __bindgen_tmp
    }
}
extern "C" {
    ///
    #[link_name = "\u{1}_ZNK11btRigidBody28calculateSerializeBufferSizeEv"]
    pub fn btRigidBody_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK11btRigidBody9serializeEPvP12btSerializer"]
    pub fn btRigidBody_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btRigidBody21serializeSingleObjectEP12btSerializer"]
    pub fn btRigidBody_serializeSingleObject(
        this: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    );
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btRigidBodyFloatData {
    pub m_collisionObjectData: btCollisionObjectFloatData,
    pub m_invInertiaTensorWorld: btMatrix3x3FloatData,
    pub m_linearVelocity: btVector3FloatData,
    pub m_angularVelocity: btVector3FloatData,
    pub m_angularFactor: btVector3FloatData,
    pub m_linearFactor: btVector3FloatData,
    pub m_gravity: btVector3FloatData,
    pub m_gravity_acceleration: btVector3FloatData,
    pub m_invInertiaLocal: btVector3FloatData,
    pub m_totalForce: btVector3FloatData,
    pub m_totalTorque: btVector3FloatData,
    pub m_inverseMass: f32,
    pub m_linearDamping: f32,
    pub m_angularDamping: f32,
    pub m_additionalDampingFactor: f32,
    pub m_additionalLinearDampingThresholdSqr: f32,
    pub m_additionalAngularDampingThresholdSqr: f32,
    pub m_additionalAngularDampingFactor: f32,
    pub m_linearSleepingThreshold: f32,
    pub m_angularSleepingThreshold: f32,
    pub m_additionalDamping: ::std::os::raw::c_int,
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btRigidBodyDoubleData {
    pub m_collisionObjectData: btCollisionObjectDoubleData,
    pub m_invInertiaTensorWorld: btMatrix3x3DoubleData,
    pub m_linearVelocity: btVector3DoubleData,
    pub m_angularVelocity: btVector3DoubleData,
    pub m_angularFactor: btVector3DoubleData,
    pub m_linearFactor: btVector3DoubleData,
    pub m_gravity: btVector3DoubleData,
    pub m_gravity_acceleration: btVector3DoubleData,
    pub m_invInertiaLocal: btVector3DoubleData,
    pub m_totalForce: btVector3DoubleData,
    pub m_totalTorque: btVector3DoubleData,
    pub m_inverseMass: f64,
    pub m_linearDamping: f64,
    pub m_angularDamping: f64,
    pub m_additionalDampingFactor: f64,
    pub m_additionalLinearDampingThresholdSqr: f64,
    pub m_additionalAngularDampingThresholdSqr: f64,
    pub m_additionalAngularDampingFactor: f64,
    pub m_linearSleepingThreshold: f64,
    pub m_angularSleepingThreshold: f64,
    pub m_additionalDamping: ::std::os::raw::c_int,
    pub m_padding: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
pub struct btActionInterface__bindgen_vtable(::std::os::raw::c_void);
/// Basic interface to allow actions such as vehicles and characters to be updated inside a btDynamicsWorld
#[repr(C)]
#[derive(Debug)]
pub struct btActionInterface {
    pub vtable_: *const btActionInterface__bindgen_vtable,
}
extern "C" {
    #[link_name = "\u{1}_ZN17btActionInterface12getFixedBodyEv"]
    pub fn btActionInterface_getFixedBody() -> *mut btRigidBody;
}
impl btActionInterface {
    #[inline]
    pub unsafe fn getFixedBody() -> *mut btRigidBody {
        btActionInterface_getFixedBody()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct btCharacterControllerInterface {
    pub _base: btActionInterface,
}
/// btKinematicCharacterController is an object that supports a sliding motion in a world.
/// It uses a ghost object and convex sweep test to test for upcoming collisions. This is combined with discrete collision detection to recover from penetrations.
/// Interaction between btKinematicCharacterController and dynamic rigid bodies needs to be explicity implemented by the user.
#[repr(C)]
#[derive(Debug)]
pub struct btKinematicCharacterController {
    pub _base: btCharacterControllerInterface,
    pub m_halfHeight: btScalar,
    pub m_ghostObject: *mut btPairCachingGhostObject,
    pub m_convexShape: *mut btConvexShape,
    pub m_maxPenetrationDepth: btScalar,
    pub m_verticalVelocity: btScalar,
    pub m_verticalOffset: btScalar,
    pub m_fallSpeed: btScalar,
    pub m_jumpSpeed: btScalar,
    pub m_SetjumpSpeed: btScalar,
    pub m_maxJumpHeight: btScalar,
    pub m_maxSlopeRadians: btScalar,
    pub m_maxSlopeCosine: btScalar,
    pub m_gravity: btScalar,
    pub m_turnAngle: btScalar,
    pub m_stepHeight: btScalar,
    pub m_addedMargin: btScalar,
    /// this is the desired walk direction, set by the user
    pub m_walkDirection: btVector3,
    pub m_normalizedDirection: btVector3,
    pub m_AngVel: btVector3,
    pub m_jumpPosition: btVector3,
    pub m_currentPosition: btVector3,
    pub m_currentStepOffset: btScalar,
    pub m_targetPosition: btVector3,
    pub m_currentOrientation: btQuaternion,
    pub m_targetOrientation: btQuaternion,
    /// keep track of the contact manifolds
    pub m_manifoldArray: btManifoldArray,
    pub m_touchingContact: bool,
    pub m_touchingNormal: btVector3,
    pub m_linearDamping: btScalar,
    pub m_angularDamping: btScalar,
    pub m_wasOnGround: bool,
    pub m_wasJumping: bool,
    pub m_useGhostObjectSweepTest: bool,
    pub m_useWalkDirection: bool,
    pub m_velocityTimeInterval: btScalar,
    pub m_up: btVector3,
    pub m_jumpAxis: btVector3,
    pub m_interpolateUp: bool,
    pub full_drop: bool,
    pub bounce_fix: bool,
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController19getUpAxisDirectionsEv"]
    pub fn btKinematicCharacterController_getUpAxisDirections() -> *mut btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController26computeReflectionDirectionERK9btVector3S2_"]
    pub fn btKinematicCharacterController_computeReflectionDirection(
        this: *mut btKinematicCharacterController,
        direction: *const btVector3,
        normal: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController17parallelComponentERK9btVector3S2_"]
    pub fn btKinematicCharacterController_parallelComponent(
        this: *mut btKinematicCharacterController,
        direction: *const btVector3,
        normal: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController22perpindicularComponentERK9btVector3S2_"]
    pub fn btKinematicCharacterController_perpindicularComponent(
        this: *mut btKinematicCharacterController,
        direction: *const btVector3,
        normal: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController22recoverFromPenetrationEP16btCollisionWorld"]
    pub fn btKinematicCharacterController_recoverFromPenetration(
        this: *mut btKinematicCharacterController,
        collisionWorld: *mut btCollisionWorld,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController6stepUpEP16btCollisionWorld"]
    pub fn btKinematicCharacterController_stepUp(
        this: *mut btKinematicCharacterController,
        collisionWorld: *mut btCollisionWorld,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController36updateTargetPositionBasedOnCollisionERK9btVector3ff"]
    pub fn btKinematicCharacterController_updateTargetPositionBasedOnCollision(
        this: *mut btKinematicCharacterController,
        hit_normal: *const btVector3,
        tangentMag: btScalar,
        normalMag: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController20stepForwardAndStrafeEP16btCollisionWorldRK9btVector3"]
    pub fn btKinematicCharacterController_stepForwardAndStrafe(
        this: *mut btKinematicCharacterController,
        collisionWorld: *mut btCollisionWorld,
        walkMove: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController8stepDownEP16btCollisionWorldf"]
    pub fn btKinematicCharacterController_stepDown(
        this: *mut btKinematicCharacterController,
        collisionWorld: *mut btCollisionWorld,
        dt: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController11setUpVectorERK9btVector3"]
    pub fn btKinematicCharacterController_setUpVector(
        this: *mut btKinematicCharacterController,
        up: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK30btKinematicCharacterController11getRotationER9btVector3S1_"]
    pub fn btKinematicCharacterController_getRotation(
        this: *const btKinematicCharacterController,
        v0: *mut btVector3,
        v1: *mut btVector3,
    ) -> btQuaternion;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController5setUpERK9btVector3"]
    pub fn btKinematicCharacterController_setUp(
        this: *mut btKinematicCharacterController,
        up: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController13setStepHeightEf"]
    pub fn btKinematicCharacterController_setStepHeight(
        this: *mut btKinematicCharacterController,
        h: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController12setFallSpeedEf"]
    pub fn btKinematicCharacterController_setFallSpeed(
        this: *mut btKinematicCharacterController,
        fallSpeed: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController12setJumpSpeedEf"]
    pub fn btKinematicCharacterController_setJumpSpeed(
        this: *mut btKinematicCharacterController,
        jumpSpeed: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController16setMaxJumpHeightEf"]
    pub fn btKinematicCharacterController_setMaxJumpHeight(
        this: *mut btKinematicCharacterController,
        maxJumpHeight: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController10setGravityERK9btVector3"]
    pub fn btKinematicCharacterController_setGravity(
        this: *mut btKinematicCharacterController,
        gravity: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK30btKinematicCharacterController10getGravityEv"]
    pub fn btKinematicCharacterController_getGravity(
        this: *const btKinematicCharacterController,
    ) -> btVector3;
}
extern "C" {
    /// The max slope determines the maximum angle that the controller can walk up.
    /// /// The slope angle is measured in radians.
    #[link_name = "\u{1}_ZN30btKinematicCharacterController11setMaxSlopeEf"]
    pub fn btKinematicCharacterController_setMaxSlope(
        this: *mut btKinematicCharacterController,
        slopeRadians: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK30btKinematicCharacterController11getMaxSlopeEv"]
    pub fn btKinematicCharacterController_getMaxSlope(
        this: *const btKinematicCharacterController,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController22setMaxPenetrationDepthEf"]
    pub fn btKinematicCharacterController_setMaxPenetrationDepth(
        this: *mut btKinematicCharacterController,
        d: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK30btKinematicCharacterController22getMaxPenetrationDepthEv"]
    pub fn btKinematicCharacterController_getMaxPenetrationDepth(
        this: *const btKinematicCharacterController,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController14getGhostObjectEv"]
    pub fn btKinematicCharacterController_getGhostObject(
        this: *mut btKinematicCharacterController,
    ) -> *mut btPairCachingGhostObject;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterControllerC1EP24btPairCachingGhostObjectP13btConvexShapefRK9btVector3"]
    pub fn btKinematicCharacterController_btKinematicCharacterController(
        this: *mut btKinematicCharacterController,
        ghostObject: *mut btPairCachingGhostObject,
        convexShape: *mut btConvexShape,
        stepHeight: btScalar,
        up: *const btVector3,
    );
}
impl btKinematicCharacterController {
    #[inline]
    pub unsafe fn getUpAxisDirections() -> *mut btVector3 {
        btKinematicCharacterController_getUpAxisDirections()
    }
    #[inline]
    pub unsafe fn computeReflectionDirection(
        &mut self,
        direction: *const btVector3,
        normal: *const btVector3,
    ) -> btVector3 {
        btKinematicCharacterController_computeReflectionDirection(self, direction, normal)
    }
    #[inline]
    pub unsafe fn parallelComponent(
        &mut self,
        direction: *const btVector3,
        normal: *const btVector3,
    ) -> btVector3 {
        btKinematicCharacterController_parallelComponent(self, direction, normal)
    }
    #[inline]
    pub unsafe fn perpindicularComponent(
        &mut self,
        direction: *const btVector3,
        normal: *const btVector3,
    ) -> btVector3 {
        btKinematicCharacterController_perpindicularComponent(self, direction, normal)
    }
    #[inline]
    pub unsafe fn recoverFromPenetration(&mut self, collisionWorld: *mut btCollisionWorld) -> bool {
        btKinematicCharacterController_recoverFromPenetration(self, collisionWorld)
    }
    #[inline]
    pub unsafe fn stepUp(&mut self, collisionWorld: *mut btCollisionWorld) {
        btKinematicCharacterController_stepUp(self, collisionWorld)
    }
    #[inline]
    pub unsafe fn updateTargetPositionBasedOnCollision(
        &mut self,
        hit_normal: *const btVector3,
        tangentMag: btScalar,
        normalMag: btScalar,
    ) {
        btKinematicCharacterController_updateTargetPositionBasedOnCollision(
            self, hit_normal, tangentMag, normalMag,
        )
    }
    #[inline]
    pub unsafe fn stepForwardAndStrafe(
        &mut self,
        collisionWorld: *mut btCollisionWorld,
        walkMove: *const btVector3,
    ) {
        btKinematicCharacterController_stepForwardAndStrafe(self, collisionWorld, walkMove)
    }
    #[inline]
    pub unsafe fn stepDown(&mut self, collisionWorld: *mut btCollisionWorld, dt: btScalar) {
        btKinematicCharacterController_stepDown(self, collisionWorld, dt)
    }
    #[inline]
    pub unsafe fn setUpVector(&mut self, up: *const btVector3) {
        btKinematicCharacterController_setUpVector(self, up)
    }
    #[inline]
    pub unsafe fn getRotation(&self, v0: *mut btVector3, v1: *mut btVector3) -> btQuaternion {
        btKinematicCharacterController_getRotation(self, v0, v1)
    }
    #[inline]
    pub unsafe fn setUp(&mut self, up: *const btVector3) {
        btKinematicCharacterController_setUp(self, up)
    }
    #[inline]
    pub unsafe fn setStepHeight(&mut self, h: btScalar) {
        btKinematicCharacterController_setStepHeight(self, h)
    }
    #[inline]
    pub unsafe fn setFallSpeed(&mut self, fallSpeed: btScalar) {
        btKinematicCharacterController_setFallSpeed(self, fallSpeed)
    }
    #[inline]
    pub unsafe fn setJumpSpeed(&mut self, jumpSpeed: btScalar) {
        btKinematicCharacterController_setJumpSpeed(self, jumpSpeed)
    }
    #[inline]
    pub unsafe fn setMaxJumpHeight(&mut self, maxJumpHeight: btScalar) {
        btKinematicCharacterController_setMaxJumpHeight(self, maxJumpHeight)
    }
    #[inline]
    pub unsafe fn setGravity(&mut self, gravity: *const btVector3) {
        btKinematicCharacterController_setGravity(self, gravity)
    }
    #[inline]
    pub unsafe fn getGravity(&self) -> btVector3 {
        btKinematicCharacterController_getGravity(self)
    }
    #[inline]
    pub unsafe fn setMaxSlope(&mut self, slopeRadians: btScalar) {
        btKinematicCharacterController_setMaxSlope(self, slopeRadians)
    }
    #[inline]
    pub unsafe fn getMaxSlope(&self) -> btScalar {
        btKinematicCharacterController_getMaxSlope(self)
    }
    #[inline]
    pub unsafe fn setMaxPenetrationDepth(&mut self, d: btScalar) {
        btKinematicCharacterController_setMaxPenetrationDepth(self, d)
    }
    #[inline]
    pub unsafe fn getMaxPenetrationDepth(&self) -> btScalar {
        btKinematicCharacterController_getMaxPenetrationDepth(self)
    }
    #[inline]
    pub unsafe fn getGhostObject(&mut self) -> *mut btPairCachingGhostObject {
        btKinematicCharacterController_getGhostObject(self)
    }
    #[inline]
    pub unsafe fn new(
        ghostObject: *mut btPairCachingGhostObject,
        convexShape: *mut btConvexShape,
        stepHeight: btScalar,
        up: *const btVector3,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btKinematicCharacterController_btKinematicCharacterController(
            &mut __bindgen_tmp,
            ghostObject,
            convexShape,
            stepHeight,
            up,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController14needsCollisionEPK17btCollisionObjectS2_"]
    pub fn btKinematicCharacterController_needsCollision(
        this: *mut ::std::os::raw::c_void,
        body0: *const btCollisionObject,
        body1: *const btCollisionObject,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterControllerD1Ev"]
    pub fn btKinematicCharacterController_btKinematicCharacterController_destructor(
        this: *mut btKinematicCharacterController,
    );
}
extern "C" {
    /// btActionInterface interface
    #[link_name = "\u{1}_ZN30btKinematicCharacterController9debugDrawEP12btIDebugDraw"]
    pub fn btKinematicCharacterController_debugDraw(
        this: *mut ::std::os::raw::c_void,
        debugDrawer: *mut btIDebugDraw,
    );
}
extern "C" {
    /// This should probably be called setPositionIncrementPerSimulatorStep.
    /// /// This is neither a direction nor a velocity, but the amount to
    /// ///	increment the position each simulation iteration, regardless
    /// ///	of dt.
    /// /// This call will reset any velocity set by setVelocityForTimeInterval().
    #[link_name = "\u{1}_ZN30btKinematicCharacterController16setWalkDirectionERK9btVector3"]
    pub fn btKinematicCharacterController_setWalkDirection(
        this: *mut ::std::os::raw::c_void,
        walkDirection: *const btVector3,
    );
}
extern "C" {
    /// Caller provides a velocity with which the character should move for
    /// ///	the given time period.  After the time period, velocity is reset
    /// ///	to zero.
    /// /// This call will reset any walk direction set by setWalkDirection().
    /// /// Negative time intervals will result in no motion.
    #[link_name = "\u{1}_ZN30btKinematicCharacterController26setVelocityForTimeIntervalERK9btVector3f"]
    pub fn btKinematicCharacterController_setVelocityForTimeInterval(
        this: *mut ::std::os::raw::c_void,
        velocity: *const btVector3,
        timeInterval: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController18setAngularVelocityERK9btVector3"]
    pub fn btKinematicCharacterController_setAngularVelocity(
        this: *mut ::std::os::raw::c_void,
        velocity: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK30btKinematicCharacterController18getAngularVelocityEv"]
    pub fn btKinematicCharacterController_getAngularVelocity(
        this: *mut ::std::os::raw::c_void,
    ) -> *const btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController17setLinearVelocityERK9btVector3"]
    pub fn btKinematicCharacterController_setLinearVelocity(
        this: *mut ::std::os::raw::c_void,
        velocity: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK30btKinematicCharacterController17getLinearVelocityEv"]
    pub fn btKinematicCharacterController_getLinearVelocity(
        this: *mut ::std::os::raw::c_void,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController5resetEP16btCollisionWorld"]
    pub fn btKinematicCharacterController_reset(
        this: *mut ::std::os::raw::c_void,
        collisionWorld: *mut btCollisionWorld,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController4warpERK9btVector3"]
    pub fn btKinematicCharacterController_warp(
        this: *mut ::std::os::raw::c_void,
        origin: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController7preStepEP16btCollisionWorld"]
    pub fn btKinematicCharacterController_preStep(
        this: *mut ::std::os::raw::c_void,
        collisionWorld: *mut btCollisionWorld,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController10playerStepEP16btCollisionWorldf"]
    pub fn btKinematicCharacterController_playerStep(
        this: *mut ::std::os::raw::c_void,
        collisionWorld: *mut btCollisionWorld,
        dt: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK30btKinematicCharacterController7canJumpEv"]
    pub fn btKinematicCharacterController_canJump(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController4jumpERK9btVector3"]
    pub fn btKinematicCharacterController_jump(
        this: *mut ::std::os::raw::c_void,
        v: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK30btKinematicCharacterController8onGroundEv"]
    pub fn btKinematicCharacterController_onGround(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btKinematicCharacterController16setUpInterpolateEb"]
    pub fn btKinematicCharacterController_setUpInterpolate(
        this: *mut ::std::os::raw::c_void,
        value: bool,
    );
}
/// Jacobian entry is an abstraction that allows to describe constraints
/// it can be used in combination with a constraint solver
/// Can be used to relate the effect of an impulse to the constraint error
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btJacobianEntry {
    pub m_linearJointAxis: btVector3,
    pub m_aJ: btVector3,
    pub m_bJ: btVector3,
    pub m_0MinvJt: btVector3,
    pub m_1MinvJt: btVector3,
    pub m_Adiag: btScalar,
}
/// The btSolverBody is an internal datastructure for the constraint solver. Only necessary data is packed to increase cache coherence/performance.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSolverBody {
    pub m_worldTransform: btTransform,
    pub m_deltaLinearVelocity: btVector3,
    pub m_deltaAngularVelocity: btVector3,
    pub m_angularFactor: btVector3,
    pub m_linearFactor: btVector3,
    pub m_invMass: btVector3,
    pub m_pushVelocity: btVector3,
    pub m_turnVelocity: btVector3,
    pub m_linearVelocity: btVector3,
    pub m_angularVelocity: btVector3,
    pub m_externalForceImpulse: btVector3,
    pub m_externalTorqueImpulse: btVector3,
    pub m_originalBody: *mut btRigidBody,
}
/// 1D constraint along a normal axis between bodyA and bodyB. It can be combined to solve contact and friction constraints.
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btSolverConstraint {
    pub m_relpos1CrossNormal: btVector3,
    pub m_contactNormal1: btVector3,
    pub m_relpos2CrossNormal: btVector3,
    pub m_contactNormal2: btVector3,
    pub m_angularComponentA: btVector3,
    pub m_angularComponentB: btVector3,
    pub m_appliedPushImpulse: btScalar,
    pub m_appliedImpulse: btScalar,
    pub m_friction: btScalar,
    pub m_jacDiagABInv: btScalar,
    pub m_rhs: btScalar,
    pub m_cfm: btScalar,
    pub m_lowerLimit: btScalar,
    pub m_upperLimit: btScalar,
    pub m_rhsPenetration: btScalar,
    pub __bindgen_anon_1: btSolverConstraint__bindgen_ty_1,
    pub m_overrideNumSolverIterations: ::std::os::raw::c_int,
    pub m_frictionIndex: ::std::os::raw::c_int,
    pub m_solverBodyIdA: ::std::os::raw::c_int,
    pub m_solverBodyIdB: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btSolverConstraint__bindgen_ty_1 {
    pub m_originalContactPoint: *mut ::std::os::raw::c_void,
    pub m_unusedPadding4: btScalar,
    pub m_numRowsForNonContactConstraint: ::std::os::raw::c_int,
    _bindgen_union_align: u64,
}
pub const btSolverConstraint_btSolverConstraintType_BT_SOLVER_CONTACT_1D:
    btSolverConstraint_btSolverConstraintType = 0;
pub const btSolverConstraint_btSolverConstraintType_BT_SOLVER_FRICTION_1D:
    btSolverConstraint_btSolverConstraintType = 1;
pub type btSolverConstraint_btSolverConstraintType = u32;
pub type btConstraintArray = btAlignedObjectArray<btSolverConstraint>;
pub const btTypedConstraintType_POINT2POINT_CONSTRAINT_TYPE: btTypedConstraintType = 3;
pub const btTypedConstraintType_HINGE_CONSTRAINT_TYPE: btTypedConstraintType = 4;
pub const btTypedConstraintType_CONETWIST_CONSTRAINT_TYPE: btTypedConstraintType = 5;
pub const btTypedConstraintType_D6_CONSTRAINT_TYPE: btTypedConstraintType = 6;
pub const btTypedConstraintType_SLIDER_CONSTRAINT_TYPE: btTypedConstraintType = 7;
pub const btTypedConstraintType_CONTACT_CONSTRAINT_TYPE: btTypedConstraintType = 8;
pub const btTypedConstraintType_D6_SPRING_CONSTRAINT_TYPE: btTypedConstraintType = 9;
pub const btTypedConstraintType_GEAR_CONSTRAINT_TYPE: btTypedConstraintType = 10;
pub const btTypedConstraintType_FIXED_CONSTRAINT_TYPE: btTypedConstraintType = 11;
pub const btTypedConstraintType_D6_SPRING_2_CONSTRAINT_TYPE: btTypedConstraintType = 12;
pub const btTypedConstraintType_MAX_CONSTRAINT_TYPE: btTypedConstraintType = 13;
pub type btTypedConstraintType = u32;
pub const btConstraintParams_BT_CONSTRAINT_ERP: btConstraintParams = 1;
pub const btConstraintParams_BT_CONSTRAINT_STOP_ERP: btConstraintParams = 2;
pub const btConstraintParams_BT_CONSTRAINT_CFM: btConstraintParams = 3;
pub const btConstraintParams_BT_CONSTRAINT_STOP_CFM: btConstraintParams = 4;
pub type btConstraintParams = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btJointFeedback {
    pub m_appliedForceBodyA: btVector3,
    pub m_appliedTorqueBodyA: btVector3,
    pub m_appliedForceBodyB: btVector3,
    pub m_appliedTorqueBodyB: btVector3,
}
#[repr(C)]
pub struct btTypedConstraint__bindgen_vtable(::std::os::raw::c_void);
/// TypedConstraint is the baseclass for Bullet constraints and vehicles
#[repr(C)]
pub struct btTypedConstraint {
    pub vtable_: *const btTypedConstraint__bindgen_vtable,
    pub _base: btTypedObject,
    pub m_userConstraintType: ::std::os::raw::c_int,
    pub __bindgen_anon_1: btTypedConstraint__bindgen_ty_1,
    pub m_breakingImpulseThreshold: btScalar,
    pub m_isEnabled: bool,
    pub m_needsFeedback: bool,
    pub m_overrideNumSolverIterations: ::std::os::raw::c_int,
    pub m_rbA: *mut btRigidBody,
    pub m_rbB: *mut btRigidBody,
    pub m_appliedImpulse: btScalar,
    pub m_dbgDrawSize: btScalar,
    pub m_jointFeedback: *mut btJointFeedback,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btTypedConstraint__bindgen_ty_1 {
    pub m_userConstraintId: ::std::os::raw::c_int,
    pub m_userConstraintPtr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTypedConstraint_btConstraintInfo1 {
    pub m_numConstraintRows: ::std::os::raw::c_int,
    pub nub: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTypedConstraint_btConstraintInfo2 {
    pub fps: btScalar,
    pub erp: btScalar,
    pub m_J1linearAxis: *mut btScalar,
    pub m_J1angularAxis: *mut btScalar,
    pub m_J2linearAxis: *mut btScalar,
    pub m_J2angularAxis: *mut btScalar,
    pub rowskip: ::std::os::raw::c_int,
    pub m_constraintError: *mut btScalar,
    pub cfm: *mut btScalar,
    pub m_lowerLimit: *mut btScalar,
    pub m_upperLimit: *mut btScalar,
    pub m_numIterations: ::std::os::raw::c_int,
    pub m_damping: btScalar,
}
extern "C" {
    /// internal method used by the constraint solver, don't use them directly
    #[link_name = "\u{1}_ZN17btTypedConstraint14getMotorFactorEfffff"]
    pub fn btTypedConstraint_getMotorFactor(
        this: *mut btTypedConstraint,
        pos: btScalar,
        lowLim: btScalar,
        uppLim: btScalar,
        vel: btScalar,
        timeFact: btScalar,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN17btTypedConstraint12getFixedBodyEv"]
    pub fn btTypedConstraint_getFixedBody() -> *mut btRigidBody;
}
extern "C" {
    #[link_name = "\u{1}_ZN17btTypedConstraintC2E21btTypedConstraintTypeR11btRigidBody"]
    pub fn btTypedConstraint_btTypedConstraint(
        this: *mut btTypedConstraint,
        type_: btTypedConstraintType,
        rbA: *mut btRigidBody,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btTypedConstraintC2E21btTypedConstraintTypeR11btRigidBodyS2_"]
    pub fn btTypedConstraint_btTypedConstraint1(
        this: *mut btTypedConstraint,
        type_: btTypedConstraintType,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
    );
}
impl btTypedConstraint {
    #[inline]
    pub unsafe fn getMotorFactor(
        &mut self,
        pos: btScalar,
        lowLim: btScalar,
        uppLim: btScalar,
        vel: btScalar,
        timeFact: btScalar,
    ) -> btScalar {
        btTypedConstraint_getMotorFactor(self, pos, lowLim, uppLim, vel, timeFact)
    }
    #[inline]
    pub unsafe fn getFixedBody() -> *mut btRigidBody {
        btTypedConstraint_getFixedBody()
    }
    #[inline]
    pub unsafe fn new(type_: btTypedConstraintType, rbA: *mut btRigidBody) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btTypedConstraint_btTypedConstraint(&mut __bindgen_tmp, type_, rbA);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        type_: btTypedConstraintType,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btTypedConstraint_btTypedConstraint1(&mut __bindgen_tmp, type_, rbA, rbB);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btTypedConstraint28calculateSerializeBufferSizeEv"]
    pub fn btTypedConstraint_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK17btTypedConstraint9serializeEPvP12btSerializer"]
    pub fn btTypedConstraint_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTypedConstraintFloatData {
    pub m_rbA: *mut btRigidBodyFloatData,
    pub m_rbB: *mut btRigidBodyFloatData,
    pub m_name: *mut ::std::os::raw::c_char,
    pub m_objectType: ::std::os::raw::c_int,
    pub m_userConstraintType: ::std::os::raw::c_int,
    pub m_userConstraintId: ::std::os::raw::c_int,
    pub m_needsFeedback: ::std::os::raw::c_int,
    pub m_appliedImpulse: f32,
    pub m_dbgDrawSize: f32,
    pub m_disableCollisionsBetweenLinkedBodies: ::std::os::raw::c_int,
    pub m_overrideNumSolverIterations: ::std::os::raw::c_int,
    pub m_breakingImpulseThreshold: f32,
    pub m_isEnabled: ::std::os::raw::c_int,
}
/// this structure is not used, except for loading pre-2.82 .bullet files
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTypedConstraintData {
    pub m_rbA: *mut btRigidBodyFloatData,
    pub m_rbB: *mut btRigidBodyFloatData,
    pub m_name: *mut ::std::os::raw::c_char,
    pub m_objectType: ::std::os::raw::c_int,
    pub m_userConstraintType: ::std::os::raw::c_int,
    pub m_userConstraintId: ::std::os::raw::c_int,
    pub m_needsFeedback: ::std::os::raw::c_int,
    pub m_appliedImpulse: f32,
    pub m_dbgDrawSize: f32,
    pub m_disableCollisionsBetweenLinkedBodies: ::std::os::raw::c_int,
    pub m_overrideNumSolverIterations: ::std::os::raw::c_int,
    pub m_breakingImpulseThreshold: f32,
    pub m_isEnabled: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTypedConstraintDoubleData {
    pub m_rbA: *mut btRigidBodyDoubleData,
    pub m_rbB: *mut btRigidBodyDoubleData,
    pub m_name: *mut ::std::os::raw::c_char,
    pub m_objectType: ::std::os::raw::c_int,
    pub m_userConstraintType: ::std::os::raw::c_int,
    pub m_userConstraintId: ::std::os::raw::c_int,
    pub m_needsFeedback: ::std::os::raw::c_int,
    pub m_appliedImpulse: f64,
    pub m_dbgDrawSize: f64,
    pub m_disableCollisionsBetweenLinkedBodies: ::std::os::raw::c_int,
    pub m_overrideNumSolverIterations: ::std::os::raw::c_int,
    pub m_breakingImpulseThreshold: f64,
    pub m_isEnabled: ::std::os::raw::c_int,
    pub padding: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btAngularLimit {
    pub m_center: btScalar,
    pub m_halfRange: btScalar,
    pub m_softness: btScalar,
    pub m_biasFactor: btScalar,
    pub m_relaxationFactor: btScalar,
    pub m_correction: btScalar,
    pub m_sign: btScalar,
    pub m_solveLimit: bool,
}
extern "C" {
    /// Sets all limit's parameters.
    /// /// When low > high limit becomes inactive.
    /// /// When high - low > 2PI limit is ineffective too becouse no angle can exceed the limit
    #[link_name = "\u{1}_ZN14btAngularLimit3setEfffff"]
    pub fn btAngularLimit_set(
        this: *mut btAngularLimit,
        low: btScalar,
        high: btScalar,
        _softness: btScalar,
        _biasFactor: btScalar,
        _relaxationFactor: btScalar,
    );
}
extern "C" {
    /// Checks conastaint angle against limit. If limit is active and the angle violates the limit
    /// /// correction is calculated.
    #[link_name = "\u{1}_ZN14btAngularLimit4testEf"]
    pub fn btAngularLimit_test(this: *mut btAngularLimit, angle: btScalar);
}
extern "C" {
    /// Checks given angle against limit. If limit is active and angle doesn't fit it, the angle
    /// /// returned is modified so it equals to the limit closest to given angle.
    #[link_name = "\u{1}_ZNK14btAngularLimit3fitERf"]
    pub fn btAngularLimit_fit(this: *const btAngularLimit, angle: *mut btScalar);
}
extern "C" {
    /// Returns correction value multiplied by sign value
    #[link_name = "\u{1}_ZNK14btAngularLimit8getErrorEv"]
    pub fn btAngularLimit_getError(this: *const btAngularLimit) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK14btAngularLimit6getLowEv"]
    pub fn btAngularLimit_getLow(this: *const btAngularLimit) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK14btAngularLimit7getHighEv"]
    pub fn btAngularLimit_getHigh(this: *const btAngularLimit) -> btScalar;
}
impl btAngularLimit {
    #[inline]
    pub unsafe fn set(
        &mut self,
        low: btScalar,
        high: btScalar,
        _softness: btScalar,
        _biasFactor: btScalar,
        _relaxationFactor: btScalar,
    ) {
        btAngularLimit_set(self, low, high, _softness, _biasFactor, _relaxationFactor)
    }
    #[inline]
    pub unsafe fn test(&mut self, angle: btScalar) {
        btAngularLimit_test(self, angle)
    }
    #[inline]
    pub unsafe fn fit(&self, angle: *mut btScalar) {
        btAngularLimit_fit(self, angle)
    }
    #[inline]
    pub unsafe fn getError(&self) -> btScalar {
        btAngularLimit_getError(self)
    }
    #[inline]
    pub unsafe fn getLow(&self) -> btScalar {
        btAngularLimit_getLow(self)
    }
    #[inline]
    pub unsafe fn getHigh(&self) -> btScalar {
        btAngularLimit_getHigh(self)
    }
}
/// btContactConstraint can be automatically created to solve contact constraints using the unified btTypedConstraint interface
#[repr(C)]
pub struct btContactConstraint {
    pub _base: btTypedConstraint,
    pub m_contactManifold: btPersistentManifold,
}
extern "C" {
    #[link_name = "\u{1}_ZN19btContactConstraint18setContactManifoldEP20btPersistentManifold"]
    pub fn btContactConstraint_setContactManifold(
        this: *mut btContactConstraint,
        contactManifold: *mut btPersistentManifold,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN19btContactConstraintC2EP20btPersistentManifoldR11btRigidBodyS3_"]
    pub fn btContactConstraint_btContactConstraint(
        this: *mut btContactConstraint,
        contactManifold: *mut btPersistentManifold,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
    );
}
impl btContactConstraint {
    #[inline]
    pub unsafe fn setContactManifold(&mut self, contactManifold: *mut btPersistentManifold) {
        btContactConstraint_setContactManifold(self, contactManifold)
    }
    #[inline]
    pub unsafe fn new(
        contactManifold: *mut btPersistentManifold,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btContactConstraint_btContactConstraint(&mut __bindgen_tmp, contactManifold, rbA, rbB);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN19btContactConstraintD1Ev"]
    pub fn btContactConstraint_btContactConstraint_destructor(this: *mut btContactConstraint);
}
extern "C" {
    #[link_name = "\u{1}_ZN19btContactConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E"]
    pub fn btContactConstraint_getInfo1(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo1,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN19btContactConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E"]
    pub fn btContactConstraint_getInfo2(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo2,
    );
}
extern "C" {
    /// obsolete methods
    #[link_name = "\u{1}_ZN19btContactConstraint13buildJacobianEv"]
    pub fn btContactConstraint_buildJacobian(this: *mut ::std::os::raw::c_void);
}
pub const btSolverMode_SOLVER_RANDMIZE_ORDER: btSolverMode = 1;
pub const btSolverMode_SOLVER_FRICTION_SEPARATE: btSolverMode = 2;
pub const btSolverMode_SOLVER_USE_WARMSTARTING: btSolverMode = 4;
pub const btSolverMode_SOLVER_USE_2_FRICTION_DIRECTIONS: btSolverMode = 16;
pub const btSolverMode_SOLVER_ENABLE_FRICTION_DIRECTION_CACHING: btSolverMode = 32;
pub const btSolverMode_SOLVER_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION: btSolverMode = 64;
pub const btSolverMode_SOLVER_CACHE_FRIENDLY: btSolverMode = 128;
pub const btSolverMode_SOLVER_SIMD: btSolverMode = 256;
pub const btSolverMode_SOLVER_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS: btSolverMode = 512;
pub const btSolverMode_SOLVER_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS: btSolverMode = 1024;
pub const btSolverMode_SOLVER_DISABLE_IMPLICIT_CONE_FRICTION: btSolverMode = 2048;
pub type btSolverMode = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btContactSolverInfoData {
    pub m_tau: btScalar,
    pub m_damping: btScalar,
    pub m_friction: btScalar,
    pub m_timeStep: btScalar,
    pub m_restitution: btScalar,
    pub m_numIterations: ::std::os::raw::c_int,
    pub m_maxErrorReduction: btScalar,
    pub m_sor: btScalar,
    pub m_erp: btScalar,
    pub m_erp2: btScalar,
    pub m_globalCfm: btScalar,
    pub m_frictionERP: btScalar,
    pub m_frictionCFM: btScalar,
    pub m_splitImpulse: ::std::os::raw::c_int,
    pub m_splitImpulsePenetrationThreshold: btScalar,
    pub m_splitImpulseTurnErp: btScalar,
    pub m_linearSlop: btScalar,
    pub m_warmstartingFactor: btScalar,
    pub m_solverMode: ::std::os::raw::c_int,
    pub m_restingContactRestitutionThreshold: ::std::os::raw::c_int,
    pub m_minimumSolverBatchSize: ::std::os::raw::c_int,
    pub m_maxGyroscopicForce: btScalar,
    pub m_singleAxisRollingFrictionThreshold: btScalar,
    pub m_leastSquaresResidualThreshold: btScalar,
    pub m_restitutionVelocityThreshold: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btContactSolverInfo {
    pub _base: btContactSolverInfoData,
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btContactSolverInfoDoubleData {
    pub m_tau: f64,
    pub m_damping: f64,
    pub m_friction: f64,
    pub m_timeStep: f64,
    pub m_restitution: f64,
    pub m_maxErrorReduction: f64,
    pub m_sor: f64,
    pub m_erp: f64,
    pub m_erp2: f64,
    pub m_globalCfm: f64,
    pub m_splitImpulsePenetrationThreshold: f64,
    pub m_splitImpulseTurnErp: f64,
    pub m_linearSlop: f64,
    pub m_warmstartingFactor: f64,
    pub m_maxGyroscopicForce: f64,
    /// it is only used for 'explicit' version of gyroscopic force
    pub m_singleAxisRollingFrictionThreshold: f64,
    pub m_numIterations: ::std::os::raw::c_int,
    pub m_solverMode: ::std::os::raw::c_int,
    pub m_restingContactRestitutionThreshold: ::std::os::raw::c_int,
    pub m_minimumSolverBatchSize: ::std::os::raw::c_int,
    pub m_splitImpulse: ::std::os::raw::c_int,
    pub m_padding: [::std::os::raw::c_char; 4usize],
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btContactSolverInfoFloatData {
    pub m_tau: f32,
    pub m_damping: f32,
    pub m_friction: f32,
    pub m_timeStep: f32,
    pub m_restitution: f32,
    pub m_maxErrorReduction: f32,
    pub m_sor: f32,
    pub m_erp: f32,
    pub m_erp2: f32,
    pub m_globalCfm: f32,
    pub m_splitImpulsePenetrationThreshold: f32,
    pub m_splitImpulseTurnErp: f32,
    pub m_linearSlop: f32,
    pub m_warmstartingFactor: f32,
    pub m_maxGyroscopicForce: f32,
    pub m_singleAxisRollingFrictionThreshold: f32,
    pub m_numIterations: ::std::os::raw::c_int,
    pub m_solverMode: ::std::os::raw::c_int,
    pub m_restingContactRestitutionThreshold: ::std::os::raw::c_int,
    pub m_minimumSolverBatchSize: ::std::os::raw::c_int,
    pub m_splitImpulse: ::std::os::raw::c_int,
    pub m_padding: [::std::os::raw::c_char; 4usize],
}
pub const btConstraintSolverType_BT_SEQUENTIAL_IMPULSE_SOLVER: btConstraintSolverType = 1;
pub const btConstraintSolverType_BT_MLCP_SOLVER: btConstraintSolverType = 2;
pub const btConstraintSolverType_BT_NNCG_SOLVER: btConstraintSolverType = 4;
/// btConstraintSolver provides solver interface
pub type btConstraintSolverType = u32;
#[repr(C)]
pub struct btConstraintSolver__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btConstraintSolver {
    pub vtable_: *const btConstraintSolver__bindgen_vtable,
}
pub type btSingleConstraintRowSolver = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut btSolverBody,
        arg2: *mut btSolverBody,
        arg3: *const btSolverConstraint,
    ) -> btScalar,
>;
/// The btSequentialImpulseConstraintSolver is a fast SIMD implementation of the Projected Gauss Seidel (iterative LCP) method.
#[repr(C)]
pub struct btSequentialImpulseConstraintSolver {
    pub _base: btConstraintSolver,
    pub m_tmpSolverBodyPool: btAlignedObjectArray<btSolverBody>,
    pub m_tmpSolverContactConstraintPool: btConstraintArray,
    pub m_tmpSolverNonContactConstraintPool: btConstraintArray,
    pub m_tmpSolverContactFrictionConstraintPool: btConstraintArray,
    pub m_tmpSolverContactRollingFrictionConstraintPool: btConstraintArray,
    pub m_orderTmpConstraintPool: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_orderNonContactConstraintPool: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_orderFrictionConstraintPool: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_tmpConstraintSizesPool: btAlignedObjectArray<btTypedConstraint_btConstraintInfo1>,
    pub m_maxOverrideNumSolverIterations: ::std::os::raw::c_int,
    pub m_fixedBodyId: ::std::os::raw::c_int,
    pub m_kinematicBodyUniqueIdToSolverBodyTable: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_resolveSingleConstraintRowGeneric: btSingleConstraintRowSolver,
    pub m_resolveSingleConstraintRowLowerLimit: btSingleConstraintRowSolver,
    pub m_resolveSplitPenetrationImpulse: btSingleConstraintRowSolver,
    pub m_cachedSolverMode: ::std::os::raw::c_int,
    pub m_leastSquaresResidual: btScalar,
    /// m_btSeed2 is used for re-arranging the constraint rows. improves convergence/quality of friction
    pub m_btSeed2: ::std::os::raw::c_ulong,
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver20setupSolverFunctionsEb"]
    pub fn btSequentialImpulseConstraintSolver_setupSolverFunctions(
        this: *mut btSequentialImpulseConstraintSolver,
        useSimd: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver23setupFrictionConstraintER18btSolverConstraintRK9btVector3iiR15btManifoldPointS4_S4_P17btCollisionObjectS8_fRK19btContactSolverInfoff"]
    pub fn btSequentialImpulseConstraintSolver_setupFrictionConstraint(
        this: *mut btSequentialImpulseConstraintSolver,
        solverConstraint: *mut btSolverConstraint,
        normalAxis: *const btVector3,
        solverBodyIdA: ::std::os::raw::c_int,
        solverBodyIdB: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        rel_pos1: *const btVector3,
        rel_pos2: *const btVector3,
        colObj0: *mut btCollisionObject,
        colObj1: *mut btCollisionObject,
        relaxation: btScalar,
        infoGlobal: *const btContactSolverInfo,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver32setupTorsionalFrictionConstraintER18btSolverConstraintRK9btVector3iiR15btManifoldPointfS4_S4_P17btCollisionObjectS8_fff"]
    pub fn btSequentialImpulseConstraintSolver_setupTorsionalFrictionConstraint(
        this: *mut btSequentialImpulseConstraintSolver,
        solverConstraint: *mut btSolverConstraint,
        normalAxis: *const btVector3,
        solverBodyIdA: ::std::os::raw::c_int,
        solverBodyIdB: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        combinedTorsionalFriction: btScalar,
        rel_pos1: *const btVector3,
        rel_pos2: *const btVector3,
        colObj0: *mut btCollisionObject,
        colObj1: *mut btCollisionObject,
        relaxation: btScalar,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver21addFrictionConstraintERK9btVector3iiiR15btManifoldPointS2_S2_P17btCollisionObjectS6_fRK19btContactSolverInfoff"]
    pub fn btSequentialImpulseConstraintSolver_addFrictionConstraint(
        this: *mut btSequentialImpulseConstraintSolver,
        normalAxis: *const btVector3,
        solverBodyIdA: ::std::os::raw::c_int,
        solverBodyIdB: ::std::os::raw::c_int,
        frictionIndex: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        rel_pos1: *const btVector3,
        rel_pos2: *const btVector3,
        colObj0: *mut btCollisionObject,
        colObj1: *mut btCollisionObject,
        relaxation: btScalar,
        infoGlobal: *const btContactSolverInfo,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    ) -> *mut btSolverConstraint;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver30addTorsionalFrictionConstraintERK9btVector3iiiR15btManifoldPointfS2_S2_P17btCollisionObjectS6_fff"]
    pub fn btSequentialImpulseConstraintSolver_addTorsionalFrictionConstraint(
        this: *mut btSequentialImpulseConstraintSolver,
        normalAxis: *const btVector3,
        solverBodyIdA: ::std::os::raw::c_int,
        solverBodyIdB: ::std::os::raw::c_int,
        frictionIndex: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        torsionalFriction: btScalar,
        rel_pos1: *const btVector3,
        rel_pos2: *const btVector3,
        colObj0: *mut btCollisionObject,
        colObj1: *mut btCollisionObject,
        relaxation: btScalar,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    ) -> *mut btSolverConstraint;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver22setupContactConstraintER18btSolverConstraintiiR15btManifoldPointRK19btContactSolverInfoRfRK9btVector3SA_"]
    pub fn btSequentialImpulseConstraintSolver_setupContactConstraint(
        this: *mut btSequentialImpulseConstraintSolver,
        solverConstraint: *mut btSolverConstraint,
        solverBodyIdA: ::std::os::raw::c_int,
        solverBodyIdB: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        infoGlobal: *const btContactSolverInfo,
        relaxation: *mut btScalar,
        rel_pos1: *const btVector3,
        rel_pos2: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver24applyAnisotropicFrictionEP17btCollisionObjectR9btVector3i"]
    pub fn btSequentialImpulseConstraintSolver_applyAnisotropicFriction(
        colObj: *mut btCollisionObject,
        frictionDirection: *mut btVector3,
        frictionMode: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver28setFrictionConstraintImpulseER18btSolverConstraintiiR15btManifoldPointRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolver_setFrictionConstraintImpulse(
        this: *mut btSequentialImpulseConstraintSolver,
        solverConstraint: *mut btSolverConstraint,
        solverBodyIdA: ::std::os::raw::c_int,
        solverBodyIdB: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver16restitutionCurveEfff"]
    pub fn btSequentialImpulseConstraintSolver_restitutionCurve(
        this: *mut btSequentialImpulseConstraintSolver,
        rel_vel: btScalar,
        restitution: btScalar,
        velocityThreshold: btScalar,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver14convertContactEP20btPersistentManifoldRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolver_convertContact(
        this: *mut btSequentialImpulseConstraintSolver,
        manifold: *mut btPersistentManifold,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver12convertJointEP18btSolverConstraintP17btTypedConstraintRKNS2_17btConstraintInfo1EiiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolver_convertJoint(
        this: *mut btSequentialImpulseConstraintSolver,
        currentConstraintRow: *mut btSolverConstraint,
        constraint: *mut btTypedConstraint,
        info1: *const btTypedConstraint_btConstraintInfo1,
        solverBodyIdA: ::std::os::raw::c_int,
        solverBodyIdB: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver19getOrInitSolverBodyER17btCollisionObjectf"]
    pub fn btSequentialImpulseConstraintSolver_getOrInitSolverBody(
        this: *mut btSequentialImpulseConstraintSolver,
        body: *mut btCollisionObject,
        timeStep: btScalar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver14initSolverBodyEP12btSolverBodyP17btCollisionObjectf"]
    pub fn btSequentialImpulseConstraintSolver_initSolverBody(
        this: *mut btSequentialImpulseConstraintSolver,
        solverBody: *mut btSolverBody,
        collisionObject: *mut btCollisionObject,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver33resolveSingleConstraintRowGenericER12btSolverBodyS1_RK18btSolverConstraint"]
    pub fn btSequentialImpulseConstraintSolver_resolveSingleConstraintRowGeneric(
        this: *mut btSequentialImpulseConstraintSolver,
        bodyA: *mut btSolverBody,
        bodyB: *mut btSolverBody,
        contactConstraint: *const btSolverConstraint,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver37resolveSingleConstraintRowGenericSIMDER12btSolverBodyS1_RK18btSolverConstraint"]
    pub fn btSequentialImpulseConstraintSolver_resolveSingleConstraintRowGenericSIMD(
        this: *mut btSequentialImpulseConstraintSolver,
        bodyA: *mut btSolverBody,
        bodyB: *mut btSolverBody,
        contactConstraint: *const btSolverConstraint,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver36resolveSingleConstraintRowLowerLimitER12btSolverBodyS1_RK18btSolverConstraint"]
    pub fn btSequentialImpulseConstraintSolver_resolveSingleConstraintRowLowerLimit(
        this: *mut btSequentialImpulseConstraintSolver,
        bodyA: *mut btSolverBody,
        bodyB: *mut btSolverBody,
        contactConstraint: *const btSolverConstraint,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver40resolveSingleConstraintRowLowerLimitSIMDER12btSolverBodyS1_RK18btSolverConstraint"]
    pub fn btSequentialImpulseConstraintSolver_resolveSingleConstraintRowLowerLimitSIMD(
        this: *mut btSequentialImpulseConstraintSolver,
        bodyA: *mut btSolverBody,
        bodyB: *mut btSolverBody,
        contactConstraint: *const btSolverConstraint,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver17writeBackContactsEiiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolver_writeBackContacts(
        this: *mut btSequentialImpulseConstraintSolver,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver15writeBackJointsEiiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolver_writeBackJoints(
        this: *mut btSequentialImpulseConstraintSolver,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver15writeBackBodiesEiiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolver_writeBackBodies(
        this: *mut btSequentialImpulseConstraintSolver,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver7btRand2Ev"]
    pub fn btSequentialImpulseConstraintSolver_btRand2(
        this: *mut btSequentialImpulseConstraintSolver,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver10btRandInt2Ei"]
    pub fn btSequentialImpulseConstraintSolver_btRandInt2(
        this: *mut btSequentialImpulseConstraintSolver,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Various implementations of solving a single constraint row using a generic equality constraint, using scalar reference, SSE2 or SSE4
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver35getScalarConstraintRowSolverGenericEv"]
    pub fn btSequentialImpulseConstraintSolver_getScalarConstraintRowSolverGeneric(
        this: *mut btSequentialImpulseConstraintSolver,
    ) -> btSingleConstraintRowSolver;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver33getSSE2ConstraintRowSolverGenericEv"]
    pub fn btSequentialImpulseConstraintSolver_getSSE2ConstraintRowSolverGeneric(
        this: *mut btSequentialImpulseConstraintSolver,
    ) -> btSingleConstraintRowSolver;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver35getSSE4_1ConstraintRowSolverGenericEv"]
    pub fn btSequentialImpulseConstraintSolver_getSSE4_1ConstraintRowSolverGeneric(
        this: *mut btSequentialImpulseConstraintSolver,
    ) -> btSingleConstraintRowSolver;
}
extern "C" {
    /// Various implementations of solving a single constraint row using an inequality (lower limit) constraint, using scalar reference, SSE2 or SSE4
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver38getScalarConstraintRowSolverLowerLimitEv"]
    pub fn btSequentialImpulseConstraintSolver_getScalarConstraintRowSolverLowerLimit(
        this: *mut btSequentialImpulseConstraintSolver,
    ) -> btSingleConstraintRowSolver;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver36getSSE2ConstraintRowSolverLowerLimitEv"]
    pub fn btSequentialImpulseConstraintSolver_getSSE2ConstraintRowSolverLowerLimit(
        this: *mut btSequentialImpulseConstraintSolver,
    ) -> btSingleConstraintRowSolver;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver38getSSE4_1ConstraintRowSolverLowerLimitEv"]
    pub fn btSequentialImpulseConstraintSolver_getSSE4_1ConstraintRowSolverLowerLimit(
        this: *mut btSequentialImpulseConstraintSolver,
    ) -> btSingleConstraintRowSolver;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolverC1Ev"]
    pub fn btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver(
        this: *mut btSequentialImpulseConstraintSolver,
    );
}
impl btSequentialImpulseConstraintSolver {
    #[inline]
    pub unsafe fn setupSolverFunctions(&mut self, useSimd: bool) {
        btSequentialImpulseConstraintSolver_setupSolverFunctions(self, useSimd)
    }
    #[inline]
    pub unsafe fn setupFrictionConstraint(
        &mut self,
        solverConstraint: *mut btSolverConstraint,
        normalAxis: *const btVector3,
        solverBodyIdA: ::std::os::raw::c_int,
        solverBodyIdB: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        rel_pos1: *const btVector3,
        rel_pos2: *const btVector3,
        colObj0: *mut btCollisionObject,
        colObj1: *mut btCollisionObject,
        relaxation: btScalar,
        infoGlobal: *const btContactSolverInfo,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    ) {
        btSequentialImpulseConstraintSolver_setupFrictionConstraint(
            self,
            solverConstraint,
            normalAxis,
            solverBodyIdA,
            solverBodyIdB,
            cp,
            rel_pos1,
            rel_pos2,
            colObj0,
            colObj1,
            relaxation,
            infoGlobal,
            desiredVelocity,
            cfmSlip,
        )
    }
    #[inline]
    pub unsafe fn setupTorsionalFrictionConstraint(
        &mut self,
        solverConstraint: *mut btSolverConstraint,
        normalAxis: *const btVector3,
        solverBodyIdA: ::std::os::raw::c_int,
        solverBodyIdB: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        combinedTorsionalFriction: btScalar,
        rel_pos1: *const btVector3,
        rel_pos2: *const btVector3,
        colObj0: *mut btCollisionObject,
        colObj1: *mut btCollisionObject,
        relaxation: btScalar,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    ) {
        btSequentialImpulseConstraintSolver_setupTorsionalFrictionConstraint(
            self,
            solverConstraint,
            normalAxis,
            solverBodyIdA,
            solverBodyIdB,
            cp,
            combinedTorsionalFriction,
            rel_pos1,
            rel_pos2,
            colObj0,
            colObj1,
            relaxation,
            desiredVelocity,
            cfmSlip,
        )
    }
    #[inline]
    pub unsafe fn addFrictionConstraint(
        &mut self,
        normalAxis: *const btVector3,
        solverBodyIdA: ::std::os::raw::c_int,
        solverBodyIdB: ::std::os::raw::c_int,
        frictionIndex: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        rel_pos1: *const btVector3,
        rel_pos2: *const btVector3,
        colObj0: *mut btCollisionObject,
        colObj1: *mut btCollisionObject,
        relaxation: btScalar,
        infoGlobal: *const btContactSolverInfo,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    ) -> *mut btSolverConstraint {
        btSequentialImpulseConstraintSolver_addFrictionConstraint(
            self,
            normalAxis,
            solverBodyIdA,
            solverBodyIdB,
            frictionIndex,
            cp,
            rel_pos1,
            rel_pos2,
            colObj0,
            colObj1,
            relaxation,
            infoGlobal,
            desiredVelocity,
            cfmSlip,
        )
    }
    #[inline]
    pub unsafe fn addTorsionalFrictionConstraint(
        &mut self,
        normalAxis: *const btVector3,
        solverBodyIdA: ::std::os::raw::c_int,
        solverBodyIdB: ::std::os::raw::c_int,
        frictionIndex: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        torsionalFriction: btScalar,
        rel_pos1: *const btVector3,
        rel_pos2: *const btVector3,
        colObj0: *mut btCollisionObject,
        colObj1: *mut btCollisionObject,
        relaxation: btScalar,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    ) -> *mut btSolverConstraint {
        btSequentialImpulseConstraintSolver_addTorsionalFrictionConstraint(
            self,
            normalAxis,
            solverBodyIdA,
            solverBodyIdB,
            frictionIndex,
            cp,
            torsionalFriction,
            rel_pos1,
            rel_pos2,
            colObj0,
            colObj1,
            relaxation,
            desiredVelocity,
            cfmSlip,
        )
    }
    #[inline]
    pub unsafe fn setupContactConstraint(
        &mut self,
        solverConstraint: *mut btSolverConstraint,
        solverBodyIdA: ::std::os::raw::c_int,
        solverBodyIdB: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        infoGlobal: *const btContactSolverInfo,
        relaxation: *mut btScalar,
        rel_pos1: *const btVector3,
        rel_pos2: *const btVector3,
    ) {
        btSequentialImpulseConstraintSolver_setupContactConstraint(
            self,
            solverConstraint,
            solverBodyIdA,
            solverBodyIdB,
            cp,
            infoGlobal,
            relaxation,
            rel_pos1,
            rel_pos2,
        )
    }
    #[inline]
    pub unsafe fn applyAnisotropicFriction(
        colObj: *mut btCollisionObject,
        frictionDirection: *mut btVector3,
        frictionMode: ::std::os::raw::c_int,
    ) {
        btSequentialImpulseConstraintSolver_applyAnisotropicFriction(
            colObj,
            frictionDirection,
            frictionMode,
        )
    }
    #[inline]
    pub unsafe fn setFrictionConstraintImpulse(
        &mut self,
        solverConstraint: *mut btSolverConstraint,
        solverBodyIdA: ::std::os::raw::c_int,
        solverBodyIdB: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btSequentialImpulseConstraintSolver_setFrictionConstraintImpulse(
            self,
            solverConstraint,
            solverBodyIdA,
            solverBodyIdB,
            cp,
            infoGlobal,
        )
    }
    #[inline]
    pub unsafe fn restitutionCurve(
        &mut self,
        rel_vel: btScalar,
        restitution: btScalar,
        velocityThreshold: btScalar,
    ) -> btScalar {
        btSequentialImpulseConstraintSolver_restitutionCurve(
            self,
            rel_vel,
            restitution,
            velocityThreshold,
        )
    }
    #[inline]
    pub unsafe fn convertContact(
        &mut self,
        manifold: *mut btPersistentManifold,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btSequentialImpulseConstraintSolver_convertContact(self, manifold, infoGlobal)
    }
    #[inline]
    pub unsafe fn convertJoint(
        &mut self,
        currentConstraintRow: *mut btSolverConstraint,
        constraint: *mut btTypedConstraint,
        info1: *const btTypedConstraint_btConstraintInfo1,
        solverBodyIdA: ::std::os::raw::c_int,
        solverBodyIdB: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btSequentialImpulseConstraintSolver_convertJoint(
            self,
            currentConstraintRow,
            constraint,
            info1,
            solverBodyIdA,
            solverBodyIdB,
            infoGlobal,
        )
    }
    #[inline]
    pub unsafe fn getOrInitSolverBody(
        &mut self,
        body: *mut btCollisionObject,
        timeStep: btScalar,
    ) -> ::std::os::raw::c_int {
        btSequentialImpulseConstraintSolver_getOrInitSolverBody(self, body, timeStep)
    }
    #[inline]
    pub unsafe fn initSolverBody(
        &mut self,
        solverBody: *mut btSolverBody,
        collisionObject: *mut btCollisionObject,
        timeStep: btScalar,
    ) {
        btSequentialImpulseConstraintSolver_initSolverBody(
            self,
            solverBody,
            collisionObject,
            timeStep,
        )
    }
    #[inline]
    pub unsafe fn resolveSingleConstraintRowGeneric(
        &mut self,
        bodyA: *mut btSolverBody,
        bodyB: *mut btSolverBody,
        contactConstraint: *const btSolverConstraint,
    ) -> btScalar {
        btSequentialImpulseConstraintSolver_resolveSingleConstraintRowGeneric(
            self,
            bodyA,
            bodyB,
            contactConstraint,
        )
    }
    #[inline]
    pub unsafe fn resolveSingleConstraintRowGenericSIMD(
        &mut self,
        bodyA: *mut btSolverBody,
        bodyB: *mut btSolverBody,
        contactConstraint: *const btSolverConstraint,
    ) -> btScalar {
        btSequentialImpulseConstraintSolver_resolveSingleConstraintRowGenericSIMD(
            self,
            bodyA,
            bodyB,
            contactConstraint,
        )
    }
    #[inline]
    pub unsafe fn resolveSingleConstraintRowLowerLimit(
        &mut self,
        bodyA: *mut btSolverBody,
        bodyB: *mut btSolverBody,
        contactConstraint: *const btSolverConstraint,
    ) -> btScalar {
        btSequentialImpulseConstraintSolver_resolveSingleConstraintRowLowerLimit(
            self,
            bodyA,
            bodyB,
            contactConstraint,
        )
    }
    #[inline]
    pub unsafe fn resolveSingleConstraintRowLowerLimitSIMD(
        &mut self,
        bodyA: *mut btSolverBody,
        bodyB: *mut btSolverBody,
        contactConstraint: *const btSolverConstraint,
    ) -> btScalar {
        btSequentialImpulseConstraintSolver_resolveSingleConstraintRowLowerLimitSIMD(
            self,
            bodyA,
            bodyB,
            contactConstraint,
        )
    }
    #[inline]
    pub unsafe fn writeBackContacts(
        &mut self,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btSequentialImpulseConstraintSolver_writeBackContacts(self, iBegin, iEnd, infoGlobal)
    }
    #[inline]
    pub unsafe fn writeBackJoints(
        &mut self,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btSequentialImpulseConstraintSolver_writeBackJoints(self, iBegin, iEnd, infoGlobal)
    }
    #[inline]
    pub unsafe fn writeBackBodies(
        &mut self,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btSequentialImpulseConstraintSolver_writeBackBodies(self, iBegin, iEnd, infoGlobal)
    }
    #[inline]
    pub unsafe fn btRand2(&mut self) -> ::std::os::raw::c_ulong {
        btSequentialImpulseConstraintSolver_btRand2(self)
    }
    #[inline]
    pub unsafe fn btRandInt2(&mut self, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        btSequentialImpulseConstraintSolver_btRandInt2(self, n)
    }
    #[inline]
    pub unsafe fn getScalarConstraintRowSolverGeneric(&mut self) -> btSingleConstraintRowSolver {
        btSequentialImpulseConstraintSolver_getScalarConstraintRowSolverGeneric(self)
    }
    #[inline]
    pub unsafe fn getSSE2ConstraintRowSolverGeneric(&mut self) -> btSingleConstraintRowSolver {
        btSequentialImpulseConstraintSolver_getSSE2ConstraintRowSolverGeneric(self)
    }
    #[inline]
    pub unsafe fn getSSE4_1ConstraintRowSolverGeneric(&mut self) -> btSingleConstraintRowSolver {
        btSequentialImpulseConstraintSolver_getSSE4_1ConstraintRowSolverGeneric(self)
    }
    #[inline]
    pub unsafe fn getScalarConstraintRowSolverLowerLimit(&mut self) -> btSingleConstraintRowSolver {
        btSequentialImpulseConstraintSolver_getScalarConstraintRowSolverLowerLimit(self)
    }
    #[inline]
    pub unsafe fn getSSE2ConstraintRowSolverLowerLimit(&mut self) -> btSingleConstraintRowSolver {
        btSequentialImpulseConstraintSolver_getSSE2ConstraintRowSolverLowerLimit(self)
    }
    #[inline]
    pub unsafe fn getSSE4_1ConstraintRowSolverLowerLimit(&mut self) -> btSingleConstraintRowSolver {
        btSequentialImpulseConstraintSolver_getSSE4_1ConstraintRowSolverLowerLimit(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver15convertContactsEPP20btPersistentManifoldiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolver_convertContacts(
        this: *mut ::std::os::raw::c_void,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver13convertJointsEPP17btTypedConstraintiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolver_convertJoints(
        this: *mut ::std::os::raw::c_void,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver13convertBodiesEPP17btCollisionObjectiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolver_convertBodies(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver45solveGroupCacheFriendlySplitImpulseIterationsEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw"]
    pub fn btSequentialImpulseConstraintSolver_solveGroupCacheFriendlySplitImpulseIterations(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver29solveGroupCacheFriendlyFinishEPP17btCollisionObjectiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolver_solveGroupCacheFriendlyFinish(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver20solveSingleIterationEiPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw"]
    pub fn btSequentialImpulseConstraintSolver_solveSingleIteration(
        this: *mut ::std::os::raw::c_void,
        iteration: ::std::os::raw::c_int,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver28solveGroupCacheFriendlySetupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw"]
    pub fn btSequentialImpulseConstraintSolver_solveGroupCacheFriendlySetup(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver33solveGroupCacheFriendlyIterationsEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw"]
    pub fn btSequentialImpulseConstraintSolver_solveGroupCacheFriendlyIterations(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolverD1Ev"]
    pub fn btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_destructor(
        this: *mut btSequentialImpulseConstraintSolver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver10solveGroupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btDispatcher"]
    pub fn btSequentialImpulseConstraintSolver_solveGroup(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifold: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        info: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
        dispatcher: *mut btDispatcher,
    ) -> btScalar;
}
extern "C" {
    /// clear internal cached data and reset random seed
    #[link_name = "\u{1}_ZN35btSequentialImpulseConstraintSolver5resetEv"]
    pub fn btSequentialImpulseConstraintSolver_reset(this: *mut ::std::os::raw::c_void);
}
#[repr(C)]
pub struct btNNCGConstraintSolver {
    pub _base: btSequentialImpulseConstraintSolver,
    pub m_deltafLengthSqrPrev: btScalar,
    pub m_pNC: btAlignedObjectArray<btScalar>,
    pub m_pC: btAlignedObjectArray<btScalar>,
    pub m_pCF: btAlignedObjectArray<btScalar>,
    pub m_pCRF: btAlignedObjectArray<btScalar>,
    pub m_deltafNC: btAlignedObjectArray<btScalar>,
    pub m_deltafC: btAlignedObjectArray<btScalar>,
    pub m_deltafCF: btAlignedObjectArray<btScalar>,
    pub m_deltafCRF: btAlignedObjectArray<btScalar>,
    pub m_onlyForNoneContact: bool,
}
extern "C" {
    #[link_name = "\u{1}_ZN22btNNCGConstraintSolver29solveGroupCacheFriendlyFinishEPP17btCollisionObjectiRK19btContactSolverInfo"]
    pub fn btNNCGConstraintSolver_solveGroupCacheFriendlyFinish(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN22btNNCGConstraintSolver20solveSingleIterationEiPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw"]
    pub fn btNNCGConstraintSolver_solveSingleIteration(
        this: *mut ::std::os::raw::c_void,
        iteration: ::std::os::raw::c_int,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN22btNNCGConstraintSolver28solveGroupCacheFriendlySetupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw"]
    pub fn btNNCGConstraintSolver_solveGroupCacheFriendlySetup(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
    ) -> btScalar;
}
#[repr(C)]
#[derive(Debug)]
pub struct btBatchedConstraints {
    pub m_constraintIndices: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_batches: btAlignedObjectArray<btBatchedConstraints_Range>,
    pub m_phases: btAlignedObjectArray<btBatchedConstraints_Range>,
    pub m_phaseGrainSize: btAlignedObjectArray<::std::os::raw::c_char>,
    pub m_phaseOrder: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_debugDrawer: *mut btIDebugDraw,
}
pub const btBatchedConstraints_BatchingMethod_BATCHING_METHOD_SPATIAL_GRID_2D:
    btBatchedConstraints_BatchingMethod = 0;
pub const btBatchedConstraints_BatchingMethod_BATCHING_METHOD_SPATIAL_GRID_3D:
    btBatchedConstraints_BatchingMethod = 1;
pub const btBatchedConstraints_BatchingMethod_BATCHING_METHOD_COUNT:
    btBatchedConstraints_BatchingMethod = 2;
pub type btBatchedConstraints_BatchingMethod = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btBatchedConstraints_Range {
    pub begin: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN20btBatchedConstraints18s_debugDrawBatchesE"]
    pub static mut btBatchedConstraints_s_debugDrawBatches: bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN20btBatchedConstraints5setupEP20btAlignedObjectArrayI18btSolverConstraintERKS0_I12btSolverBodyENS_14BatchingMethodEiiPS0_IcE"]
    pub fn btBatchedConstraints_setup(
        this: *mut btBatchedConstraints,
        constraints: *mut btConstraintArray,
        bodies: *const btAlignedObjectArray<btSolverBody>,
        batchingMethod: btBatchedConstraints_BatchingMethod,
        minBatchSize: ::std::os::raw::c_int,
        maxBatchSize: ::std::os::raw::c_int,
        scratchMemory: *mut btAlignedObjectArray<::std::os::raw::c_char>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK20btBatchedConstraints8validateEP20btAlignedObjectArrayI18btSolverConstraintERKS0_I12btSolverBodyE"]
    pub fn btBatchedConstraints_validate(
        this: *const btBatchedConstraints,
        constraints: *mut btConstraintArray,
        bodies: *const btAlignedObjectArray<btSolverBody>,
    ) -> bool;
}
impl btBatchedConstraints {
    #[inline]
    pub unsafe fn setup(
        &mut self,
        constraints: *mut btConstraintArray,
        bodies: *const btAlignedObjectArray<btSolverBody>,
        batchingMethod: btBatchedConstraints_BatchingMethod,
        minBatchSize: ::std::os::raw::c_int,
        maxBatchSize: ::std::os::raw::c_int,
        scratchMemory: *mut btAlignedObjectArray<::std::os::raw::c_char>,
    ) {
        btBatchedConstraints_setup(
            self,
            constraints,
            bodies,
            batchingMethod,
            minBatchSize,
            maxBatchSize,
            scratchMemory,
        )
    }
    #[inline]
    pub unsafe fn validate(
        &self,
        constraints: *mut btConstraintArray,
        bodies: *const btAlignedObjectArray<btSolverBody>,
    ) -> bool {
        btBatchedConstraints_validate(self, constraints, bodies)
    }
}
///
/// btSequentialImpulseConstraintSolverMt
///
/// A multithreaded variant of the sequential impulse constraint solver. The constraints to be solved are grouped into
/// batches and phases where each batch of constraints within a given phase can be solved in parallel with the rest.
/// Ideally we want as few phases as possible, and each phase should have many batches, and all of the batches should
/// have about the same number of constraints.
/// This method works best on a large island of many constraints.
///
/// Supports all of the features of the normal sequential impulse solver such as:
/// - split penetration impulse
/// - rolling friction
/// - interleaving constraints
/// - warmstarting
/// - 2 friction directions
/// - randomized constraint ordering
/// - early termination when leastSquaresResidualThreshold is satisfied
///
/// When the SOLVER_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS flag is enabled, unlike the normal SequentialImpulse solver,
/// the rolling friction is interleaved as well.
/// Interleaving the contact penetration constraints with friction reduces the number of parallel loops that need to be done,
/// which reduces threading overhead so it can be a performance win, however, it does seem to produce a less stable simulation,
/// at least on stacks of blocks.
///
/// When the SOLVER_RANDMIZE_ORDER flag is enabled, the ordering of phases, and the ordering of constraints within each batch
/// is randomized, however it does not swap constraints between batches.
/// This is to avoid regenerating the batches for each solver iteration which would be quite costly in performance.
///
/// Note that a non-zero leastSquaresResidualThreshold could possibly affect the determinism of the simulation
/// if the task scheduler's parallelSum operation is non-deterministic. The parallelSum operation can be non-deterministic
/// because floating point addition is not associative due to rounding errors.
/// The task scheduler can and should ensure that the result of any parallelSum operation is deterministic.
///
#[repr(C)]
pub struct btSequentialImpulseConstraintSolverMt {
    pub _base: btSequentialImpulseConstraintSolver,
    pub m_batchedContactConstraints: btBatchedConstraints,
    pub m_batchedJointConstraints: btBatchedConstraints,
    pub m_numFrictionDirections: ::std::os::raw::c_int,
    pub m_useBatching: bool,
    pub m_useObsoleteJointConstraints: bool,
    pub m_manifoldCachedInfoArray:
        btAlignedObjectArray<btSequentialImpulseConstraintSolverMt_btContactManifoldCachedInfo>,
    pub m_rollingFrictionIndexTable: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_bodySolverArrayMutex: btSpinMutex,
    pub m_antiFalseSharingPadding: [::std::os::raw::c_char; 64usize],
    pub m_kinematicBodyUniqueIdToSolverBodyTableMutex: btSpinMutex,
    pub m_scratchMemory: btAlignedObjectArray<::std::os::raw::c_char>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSequentialImpulseConstraintSolverMt_btContactManifoldCachedInfo {
    pub numTouchingContacts: ::std::os::raw::c_int,
    pub solverBodyIds: [::std::os::raw::c_int; 2usize],
    pub contactIndex: ::std::os::raw::c_int,
    pub rollingFrictionIndex: ::std::os::raw::c_int,
    pub contactHasRollingFriction: [bool; 4usize],
    pub contactPoints: [*mut btManifoldPoint; 4usize],
}
pub const btSequentialImpulseConstraintSolverMt_btContactManifoldCachedInfo_MAX_NUM_CONTACT_POINTS : :: std :: os :: raw :: c_int = 4 ;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSequentialImpulseConstraintSolverMt_JointParams {
    pub m_solverConstraint: ::std::os::raw::c_int,
    pub m_solverBodyA: ::std::os::raw::c_int,
    pub m_solverBodyB: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt29s_allowNestedParallelForLoopsE"]
    pub static mut btSequentialImpulseConstraintSolverMt_s_allowNestedParallelForLoops: bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt36s_minimumContactManifoldsForBatchingE"]
    pub static mut btSequentialImpulseConstraintSolverMt_s_minimumContactManifoldsForBatching:
        ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt23s_contactBatchingMethodE"]
    pub static mut btSequentialImpulseConstraintSolverMt_s_contactBatchingMethod:
        btBatchedConstraints_BatchingMethod;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt21s_jointBatchingMethodE"]
    pub static mut btSequentialImpulseConstraintSolverMt_s_jointBatchingMethod:
        btBatchedConstraints_BatchingMethod;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt14s_minBatchSizeE"]
    pub static mut btSequentialImpulseConstraintSolverMt_s_minBatchSize: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt14s_maxBatchSizeE"]
    pub static mut btSequentialImpulseConstraintSolverMt_s_maxBatchSize: ::std::os::raw::c_int;
}
pub const btSequentialImpulseConstraintSolverMt_CACHE_LINE_SIZE: ::std::os::raw::c_int = 64;
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt26internalInitMultipleJointsEPP17btTypedConstraintii"]
    pub fn btSequentialImpulseConstraintSolverMt_internalInitMultipleJoints(
        this: *mut btSequentialImpulseConstraintSolverMt,
        constraints: *mut *mut btTypedConstraint,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt29internalConvertMultipleJointsERK20btAlignedObjectArrayINS_11JointParamsEEPP17btTypedConstraintiiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolverMt_internalConvertMultipleJoints(
        this: *mut btSequentialImpulseConstraintSolverMt,
        jointParamsArray: *const btAlignedObjectArray<
            btSequentialImpulseConstraintSolverMt_JointParams,
        >,
        constraints: *mut *mut btTypedConstraint,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt29getOrInitSolverBodyThreadsafeER17btCollisionObjectf"]
    pub fn btSequentialImpulseConstraintSolverMt_getOrInitSolverBodyThreadsafe(
        this: *mut btSequentialImpulseConstraintSolverMt,
        body: *mut btCollisionObject,
        timeStep: btScalar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt26allocAllContactConstraintsEPP20btPersistentManifoldiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolverMt_allocAllContactConstraints(
        this: *mut btSequentialImpulseConstraintSolverMt,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt26setupAllContactConstraintsERK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolverMt_setupAllContactConstraints(
        this: *mut btSequentialImpulseConstraintSolverMt,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt34randomizeBatchedConstraintOrderingEP20btBatchedConstraints"]
    pub fn btSequentialImpulseConstraintSolverMt_randomizeBatchedConstraintOrdering(
        this: *mut btSequentialImpulseConstraintSolverMt,
        batchedConstraints: *mut btBatchedConstraints,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt31resolveMultipleJointConstraintsERK20btAlignedObjectArrayIiEiii"]
    pub fn btSequentialImpulseConstraintSolverMt_resolveMultipleJointConstraints(
        this: *mut btSequentialImpulseConstraintSolverMt,
        consIndices: *const btAlignedObjectArray<::std::os::raw::c_int>,
        batchBegin: ::std::os::raw::c_int,
        batchEnd: ::std::os::raw::c_int,
        iteration: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt33resolveMultipleContactConstraintsERK20btAlignedObjectArrayIiEii"]
    pub fn btSequentialImpulseConstraintSolverMt_resolveMultipleContactConstraints(
        this: *mut btSequentialImpulseConstraintSolverMt,
        consIndices: *const btAlignedObjectArray<::std::os::raw::c_int>,
        batchBegin: ::std::os::raw::c_int,
        batchEnd: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt56resolveMultipleContactSplitPenetrationImpulseConstraintsERK20btAlignedObjectArrayIiEii"]
    pub fn btSequentialImpulseConstraintSolverMt_resolveMultipleContactSplitPenetrationImpulseConstraints(
        this: *mut btSequentialImpulseConstraintSolverMt,
        consIndices: *const btAlignedObjectArray<::std::os::raw::c_int>,
        batchBegin: ::std::os::raw::c_int,
        batchEnd: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt41resolveMultipleContactFrictionConstraintsERK20btAlignedObjectArrayIiEii"]
    pub fn btSequentialImpulseConstraintSolverMt_resolveMultipleContactFrictionConstraints(
        this: *mut btSequentialImpulseConstraintSolverMt,
        consIndices: *const btAlignedObjectArray<::std::os::raw::c_int>,
        batchBegin: ::std::os::raw::c_int,
        batchEnd: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt48resolveMultipleContactRollingFrictionConstraintsERK20btAlignedObjectArrayIiEii"]
    pub fn btSequentialImpulseConstraintSolverMt_resolveMultipleContactRollingFrictionConstraints(
        this: *mut btSequentialImpulseConstraintSolverMt,
        consIndices: *const btAlignedObjectArray<::std::os::raw::c_int>,
        batchBegin: ::std::os::raw::c_int,
        batchEnd: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt44resolveMultipleContactConstraintsInterleavedERK20btAlignedObjectArrayIiEii"]
    pub fn btSequentialImpulseConstraintSolverMt_resolveMultipleContactConstraintsInterleaved(
        this: *mut btSequentialImpulseConstraintSolverMt,
        contactIndices: *const btAlignedObjectArray<::std::os::raw::c_int>,
        batchBegin: ::std::os::raw::c_int,
        batchEnd: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt40internalCollectContactManifoldCachedInfoEPNS_27btContactManifoldCachedInfoEPP20btPersistentManifoldiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolverMt_internalCollectContactManifoldCachedInfo(
        this: *mut btSequentialImpulseConstraintSolverMt,
        cachedInfoArray: *mut btSequentialImpulseConstraintSolverMt_btContactManifoldCachedInfo,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt31internalAllocContactConstraintsEPKNS_27btContactManifoldCachedInfoEi"]
    pub fn btSequentialImpulseConstraintSolverMt_internalAllocContactConstraints(
        this: *mut btSequentialImpulseConstraintSolverMt,
        cachedInfoArray: *const btSequentialImpulseConstraintSolverMt_btContactManifoldCachedInfo,
        numManifolds: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt31internalSetupContactConstraintsEiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolverMt_internalSetupContactConstraints(
        this: *mut btSequentialImpulseConstraintSolverMt,
        iContactConstraint: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt21internalConvertBodiesEPP17btCollisionObjectiiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolverMt_internalConvertBodies(
        this: *mut btSequentialImpulseConstraintSolverMt,
        bodies: *mut *mut btCollisionObject,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt25internalWriteBackContactsEiiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolverMt_internalWriteBackContacts(
        this: *mut btSequentialImpulseConstraintSolverMt,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt23internalWriteBackJointsEiiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolverMt_internalWriteBackJoints(
        this: *mut btSequentialImpulseConstraintSolverMt,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt23internalWriteBackBodiesEiiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolverMt_internalWriteBackBodies(
        this: *mut btSequentialImpulseConstraintSolverMt,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMtC1Ev"]
    pub fn btSequentialImpulseConstraintSolverMt_btSequentialImpulseConstraintSolverMt(
        this: *mut btSequentialImpulseConstraintSolverMt,
    );
}
impl btSequentialImpulseConstraintSolverMt {
    #[inline]
    pub unsafe fn internalInitMultipleJoints(
        &mut self,
        constraints: *mut *mut btTypedConstraint,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
    ) {
        btSequentialImpulseConstraintSolverMt_internalInitMultipleJoints(
            self,
            constraints,
            iBegin,
            iEnd,
        )
    }
    #[inline]
    pub unsafe fn internalConvertMultipleJoints(
        &mut self,
        jointParamsArray: *const btAlignedObjectArray<
            btSequentialImpulseConstraintSolverMt_JointParams,
        >,
        constraints: *mut *mut btTypedConstraint,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btSequentialImpulseConstraintSolverMt_internalConvertMultipleJoints(
            self,
            jointParamsArray,
            constraints,
            iBegin,
            iEnd,
            infoGlobal,
        )
    }
    #[inline]
    pub unsafe fn getOrInitSolverBodyThreadsafe(
        &mut self,
        body: *mut btCollisionObject,
        timeStep: btScalar,
    ) -> ::std::os::raw::c_int {
        btSequentialImpulseConstraintSolverMt_getOrInitSolverBodyThreadsafe(self, body, timeStep)
    }
    #[inline]
    pub unsafe fn allocAllContactConstraints(
        &mut self,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btSequentialImpulseConstraintSolverMt_allocAllContactConstraints(
            self,
            manifoldPtr,
            numManifolds,
            infoGlobal,
        )
    }
    #[inline]
    pub unsafe fn setupAllContactConstraints(&mut self, infoGlobal: *const btContactSolverInfo) {
        btSequentialImpulseConstraintSolverMt_setupAllContactConstraints(self, infoGlobal)
    }
    #[inline]
    pub unsafe fn randomizeBatchedConstraintOrdering(
        &mut self,
        batchedConstraints: *mut btBatchedConstraints,
    ) {
        btSequentialImpulseConstraintSolverMt_randomizeBatchedConstraintOrdering(
            self,
            batchedConstraints,
        )
    }
    #[inline]
    pub unsafe fn resolveMultipleJointConstraints(
        &mut self,
        consIndices: *const btAlignedObjectArray<::std::os::raw::c_int>,
        batchBegin: ::std::os::raw::c_int,
        batchEnd: ::std::os::raw::c_int,
        iteration: ::std::os::raw::c_int,
    ) -> btScalar {
        btSequentialImpulseConstraintSolverMt_resolveMultipleJointConstraints(
            self,
            consIndices,
            batchBegin,
            batchEnd,
            iteration,
        )
    }
    #[inline]
    pub unsafe fn resolveMultipleContactConstraints(
        &mut self,
        consIndices: *const btAlignedObjectArray<::std::os::raw::c_int>,
        batchBegin: ::std::os::raw::c_int,
        batchEnd: ::std::os::raw::c_int,
    ) -> btScalar {
        btSequentialImpulseConstraintSolverMt_resolveMultipleContactConstraints(
            self,
            consIndices,
            batchBegin,
            batchEnd,
        )
    }
    #[inline]
    pub unsafe fn resolveMultipleContactSplitPenetrationImpulseConstraints(
        &mut self,
        consIndices: *const btAlignedObjectArray<::std::os::raw::c_int>,
        batchBegin: ::std::os::raw::c_int,
        batchEnd: ::std::os::raw::c_int,
    ) -> btScalar {
        btSequentialImpulseConstraintSolverMt_resolveMultipleContactSplitPenetrationImpulseConstraints ( self , consIndices , batchBegin , batchEnd )
    }
    #[inline]
    pub unsafe fn resolveMultipleContactFrictionConstraints(
        &mut self,
        consIndices: *const btAlignedObjectArray<::std::os::raw::c_int>,
        batchBegin: ::std::os::raw::c_int,
        batchEnd: ::std::os::raw::c_int,
    ) -> btScalar {
        btSequentialImpulseConstraintSolverMt_resolveMultipleContactFrictionConstraints(
            self,
            consIndices,
            batchBegin,
            batchEnd,
        )
    }
    #[inline]
    pub unsafe fn resolveMultipleContactRollingFrictionConstraints(
        &mut self,
        consIndices: *const btAlignedObjectArray<::std::os::raw::c_int>,
        batchBegin: ::std::os::raw::c_int,
        batchEnd: ::std::os::raw::c_int,
    ) -> btScalar {
        btSequentialImpulseConstraintSolverMt_resolveMultipleContactRollingFrictionConstraints(
            self,
            consIndices,
            batchBegin,
            batchEnd,
        )
    }
    #[inline]
    pub unsafe fn resolveMultipleContactConstraintsInterleaved(
        &mut self,
        contactIndices: *const btAlignedObjectArray<::std::os::raw::c_int>,
        batchBegin: ::std::os::raw::c_int,
        batchEnd: ::std::os::raw::c_int,
    ) -> btScalar {
        btSequentialImpulseConstraintSolverMt_resolveMultipleContactConstraintsInterleaved(
            self,
            contactIndices,
            batchBegin,
            batchEnd,
        )
    }
    #[inline]
    pub unsafe fn internalCollectContactManifoldCachedInfo(
        &mut self,
        cachedInfoArray: *mut btSequentialImpulseConstraintSolverMt_btContactManifoldCachedInfo,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btSequentialImpulseConstraintSolverMt_internalCollectContactManifoldCachedInfo(
            self,
            cachedInfoArray,
            manifoldPtr,
            numManifolds,
            infoGlobal,
        )
    }
    #[inline]
    pub unsafe fn internalAllocContactConstraints(
        &mut self,
        cachedInfoArray: *const btSequentialImpulseConstraintSolverMt_btContactManifoldCachedInfo,
        numManifolds: ::std::os::raw::c_int,
    ) {
        btSequentialImpulseConstraintSolverMt_internalAllocContactConstraints(
            self,
            cachedInfoArray,
            numManifolds,
        )
    }
    #[inline]
    pub unsafe fn internalSetupContactConstraints(
        &mut self,
        iContactConstraint: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btSequentialImpulseConstraintSolverMt_internalSetupContactConstraints(
            self,
            iContactConstraint,
            infoGlobal,
        )
    }
    #[inline]
    pub unsafe fn internalConvertBodies(
        &mut self,
        bodies: *mut *mut btCollisionObject,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btSequentialImpulseConstraintSolverMt_internalConvertBodies(
            self, bodies, iBegin, iEnd, infoGlobal,
        )
    }
    #[inline]
    pub unsafe fn internalWriteBackContacts(
        &mut self,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btSequentialImpulseConstraintSolverMt_internalWriteBackContacts(
            self, iBegin, iEnd, infoGlobal,
        )
    }
    #[inline]
    pub unsafe fn internalWriteBackJoints(
        &mut self,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btSequentialImpulseConstraintSolverMt_internalWriteBackJoints(
            self, iBegin, iEnd, infoGlobal,
        )
    }
    #[inline]
    pub unsafe fn internalWriteBackBodies(
        &mut self,
        iBegin: ::std::os::raw::c_int,
        iEnd: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btSequentialImpulseConstraintSolverMt_internalWriteBackBodies(
            self, iBegin, iEnd, infoGlobal,
        )
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSequentialImpulseConstraintSolverMt_btSequentialImpulseConstraintSolverMt(
            &mut __bindgen_tmp,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt45solveGroupCacheFriendlySplitImpulseIterationsEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw"]
    pub fn btSequentialImpulseConstraintSolverMt_solveGroupCacheFriendlySplitImpulseIterations(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt20solveSingleIterationEiPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw"]
    pub fn btSequentialImpulseConstraintSolverMt_solveSingleIteration(
        this: *mut ::std::os::raw::c_void,
        iteration: ::std::os::raw::c_int,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt28solveGroupCacheFriendlySetupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw"]
    pub fn btSequentialImpulseConstraintSolverMt_solveGroupCacheFriendlySetup(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt29solveGroupCacheFriendlyFinishEPP17btCollisionObjectiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolverMt_solveGroupCacheFriendlyFinish(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt27randomizeConstraintOrderingEii"]
    pub fn btSequentialImpulseConstraintSolverMt_randomizeConstraintOrdering(
        this: *mut ::std::os::raw::c_void,
        iteration: ::std::os::raw::c_int,
        numIterations: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt26resolveAllJointConstraintsEi"]
    pub fn btSequentialImpulseConstraintSolverMt_resolveAllJointConstraints(
        this: *mut ::std::os::raw::c_void,
        iteration: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt28resolveAllContactConstraintsEv"]
    pub fn btSequentialImpulseConstraintSolverMt_resolveAllContactConstraints(
        this: *mut ::std::os::raw::c_void,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt36resolveAllContactFrictionConstraintsEv"]
    pub fn btSequentialImpulseConstraintSolverMt_resolveAllContactFrictionConstraints(
        this: *mut ::std::os::raw::c_void,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt39resolveAllContactConstraintsInterleavedEv"]
    pub fn btSequentialImpulseConstraintSolverMt_resolveAllContactConstraintsInterleaved(
        this: *mut ::std::os::raw::c_void,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt36resolveAllRollingFrictionConstraintsEv"]
    pub fn btSequentialImpulseConstraintSolverMt_resolveAllRollingFrictionConstraints(
        this: *mut ::std::os::raw::c_void,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt30setupBatchedContactConstraintsEv"]
    pub fn btSequentialImpulseConstraintSolverMt_setupBatchedContactConstraints(
        this: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt28setupBatchedJointConstraintsEv"]
    pub fn btSequentialImpulseConstraintSolverMt_setupBatchedJointConstraints(
        this: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt13convertJointsEPP17btTypedConstraintiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolverMt_convertJoints(
        this: *mut ::std::os::raw::c_void,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt15convertContactsEPP20btPersistentManifoldiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolverMt_convertContacts(
        this: *mut ::std::os::raw::c_void,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMt13convertBodiesEPP17btCollisionObjectiRK19btContactSolverInfo"]
    pub fn btSequentialImpulseConstraintSolverMt_convertBodies(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN37btSequentialImpulseConstraintSolverMtD1Ev"]
    pub fn btSequentialImpulseConstraintSolverMt_btSequentialImpulseConstraintSolverMt_destructor(
        this: *mut btSequentialImpulseConstraintSolverMt,
    );
}
/// constraint class used for lateral tyre friction.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSolve2LinearConstraint {
    pub m_tau: btScalar,
    pub m_damping: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZN24btSolve2LinearConstraint31resolveUnilateralPairConstraintEP11btRigidBodyS1_RK11btMatrix3x3S4_RK9btVector3fS7_S7_S7_S7_fS7_S7_S7_fS7_S7_S7_fS7_RfS8_"]
    pub fn btSolve2LinearConstraint_resolveUnilateralPairConstraint(
        this: *mut btSolve2LinearConstraint,
        body0: *mut btRigidBody,
        body1: *mut btRigidBody,
        world2A: *const btMatrix3x3,
        world2B: *const btMatrix3x3,
        invInertiaADiag: *const btVector3,
        invMassA: btScalar,
        linvelA: *const btVector3,
        angvelA: *const btVector3,
        rel_posA1: *const btVector3,
        invInertiaBDiag: *const btVector3,
        invMassB: btScalar,
        linvelB: *const btVector3,
        angvelB: *const btVector3,
        rel_posA2: *const btVector3,
        depthA: btScalar,
        normalA: *const btVector3,
        rel_posB1: *const btVector3,
        rel_posB2: *const btVector3,
        depthB: btScalar,
        normalB: *const btVector3,
        imp0: *mut btScalar,
        imp1: *mut btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btSolve2LinearConstraint30resolveBilateralPairConstraintEP11btRigidBodyS1_RK11btMatrix3x3S4_RK9btVector3fS7_S7_S7_S7_fS7_S7_S7_fS7_S7_S7_fS7_RfS8_"]
    pub fn btSolve2LinearConstraint_resolveBilateralPairConstraint(
        this: *mut btSolve2LinearConstraint,
        body0: *mut btRigidBody,
        body1: *mut btRigidBody,
        world2A: *const btMatrix3x3,
        world2B: *const btMatrix3x3,
        invInertiaADiag: *const btVector3,
        invMassA: btScalar,
        linvelA: *const btVector3,
        angvelA: *const btVector3,
        rel_posA1: *const btVector3,
        invInertiaBDiag: *const btVector3,
        invMassB: btScalar,
        linvelB: *const btVector3,
        angvelB: *const btVector3,
        rel_posA2: *const btVector3,
        depthA: btScalar,
        normalA: *const btVector3,
        rel_posB1: *const btVector3,
        rel_posB2: *const btVector3,
        depthB: btScalar,
        normalB: *const btVector3,
        imp0: *mut btScalar,
        imp1: *mut btScalar,
    );
}
impl btSolve2LinearConstraint {
    #[inline]
    pub unsafe fn resolveUnilateralPairConstraint(
        &mut self,
        body0: *mut btRigidBody,
        body1: *mut btRigidBody,
        world2A: *const btMatrix3x3,
        world2B: *const btMatrix3x3,
        invInertiaADiag: *const btVector3,
        invMassA: btScalar,
        linvelA: *const btVector3,
        angvelA: *const btVector3,
        rel_posA1: *const btVector3,
        invInertiaBDiag: *const btVector3,
        invMassB: btScalar,
        linvelB: *const btVector3,
        angvelB: *const btVector3,
        rel_posA2: *const btVector3,
        depthA: btScalar,
        normalA: *const btVector3,
        rel_posB1: *const btVector3,
        rel_posB2: *const btVector3,
        depthB: btScalar,
        normalB: *const btVector3,
        imp0: *mut btScalar,
        imp1: *mut btScalar,
    ) {
        btSolve2LinearConstraint_resolveUnilateralPairConstraint(
            self,
            body0,
            body1,
            world2A,
            world2B,
            invInertiaADiag,
            invMassA,
            linvelA,
            angvelA,
            rel_posA1,
            invInertiaBDiag,
            invMassB,
            linvelB,
            angvelB,
            rel_posA2,
            depthA,
            normalA,
            rel_posB1,
            rel_posB2,
            depthB,
            normalB,
            imp0,
            imp1,
        )
    }
    #[inline]
    pub unsafe fn resolveBilateralPairConstraint(
        &mut self,
        body0: *mut btRigidBody,
        body1: *mut btRigidBody,
        world2A: *const btMatrix3x3,
        world2B: *const btMatrix3x3,
        invInertiaADiag: *const btVector3,
        invMassA: btScalar,
        linvelA: *const btVector3,
        angvelA: *const btVector3,
        rel_posA1: *const btVector3,
        invInertiaBDiag: *const btVector3,
        invMassB: btScalar,
        linvelB: *const btVector3,
        angvelB: *const btVector3,
        rel_posA2: *const btVector3,
        depthA: btScalar,
        normalA: *const btVector3,
        rel_posB1: *const btVector3,
        rel_posB2: *const btVector3,
        depthB: btScalar,
        normalB: *const btVector3,
        imp0: *mut btScalar,
        imp1: *mut btScalar,
    ) {
        btSolve2LinearConstraint_resolveBilateralPairConstraint(
            self,
            body0,
            body1,
            world2A,
            world2B,
            invInertiaADiag,
            invMassA,
            linvelA,
            angvelA,
            rel_posA1,
            invInertiaBDiag,
            invMassB,
            linvelB,
            angvelB,
            rel_posA2,
            depthA,
            normalA,
            rel_posB1,
            rel_posB2,
            depthB,
            normalB,
            imp0,
            imp1,
        )
    }
}
/// Type for the callback for each tick
pub type btInternalTickCallback =
    ::std::option::Option<unsafe extern "C" fn(world: *mut btDynamicsWorld, timeStep: btScalar)>;
pub const btDynamicsWorldType_BT_SIMPLE_DYNAMICS_WORLD: btDynamicsWorldType = 1;
pub const btDynamicsWorldType_BT_DISCRETE_DYNAMICS_WORLD: btDynamicsWorldType = 2;
pub const btDynamicsWorldType_BT_CONTINUOUS_DYNAMICS_WORLD: btDynamicsWorldType = 3;
pub const btDynamicsWorldType_BT_SOFT_RIGID_DYNAMICS_WORLD: btDynamicsWorldType = 4;
pub const btDynamicsWorldType_BT_GPU_DYNAMICS_WORLD: btDynamicsWorldType = 5;
pub const btDynamicsWorldType_BT_SOFT_MULTIBODY_DYNAMICS_WORLD: btDynamicsWorldType = 6;
pub type btDynamicsWorldType = u32;
/// The btDynamicsWorld is the interface class for several dynamics implementation, basic, discrete, parallel, and continuous etc.
#[repr(C)]
#[derive(Debug)]
pub struct btDynamicsWorld {
    pub _base: btCollisionWorld,
    pub m_internalTickCallback: btInternalTickCallback,
    pub m_internalPreTickCallback: btInternalTickCallback,
    pub m_worldUserInfo: *mut ::std::os::raw::c_void,
    pub m_solverInfo: btContactSolverInfo,
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btDynamicsWorldDoubleData {
    pub m_solverInfo: btContactSolverInfoDoubleData,
    pub m_gravity: btVector3DoubleData,
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btDynamicsWorldFloatData {
    pub m_solverInfo: btContactSolverInfoFloatData,
    pub m_gravity: btVector3FloatData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InplaceSolverIslandCallback {
    _unused: [u8; 0],
}
/// btDiscreteDynamicsWorld provides discrete rigid body simulation
/// those classes replace the obsolete CcdPhysicsEnvironment/CcdPhysicsController
#[repr(C)]
#[derive(Debug)]
pub struct btDiscreteDynamicsWorld {
    pub _base: btDynamicsWorld,
    pub m_sortedConstraints: btAlignedObjectArray<*mut btTypedConstraint>,
    pub m_solverIslandCallback: *mut InplaceSolverIslandCallback,
    pub m_constraintSolver: *mut btConstraintSolver,
    pub m_islandManager: *mut btSimulationIslandManager,
    pub m_constraints: btAlignedObjectArray<*mut btTypedConstraint>,
    pub m_nonStaticRigidBodies: btAlignedObjectArray<*mut btRigidBody>,
    pub m_gravity: btVector3,
    pub m_localTime: btScalar,
    pub m_fixedTimeStep: btScalar,
    pub m_ownsIslandManager: bool,
    pub m_ownsConstraintSolver: bool,
    pub m_synchronizeAllMotionStates: bool,
    pub m_applySpeculativeContactRestitution: bool,
    pub m_actions: btAlignedObjectArray<*mut btActionInterface>,
    pub m_profileTimings: ::std::os::raw::c_int,
    pub m_latencyMotionStateInterpolation: bool,
    pub m_predictiveManifolds: btAlignedObjectArray<*mut btPersistentManifold>,
    pub m_predictiveManifoldsMutex: btSpinMutex,
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld27integrateTransformsInternalEPP11btRigidBodyif"]
    pub fn btDiscreteDynamicsWorld_integrateTransformsInternal(
        this: *mut btDiscreteDynamicsWorld,
        bodies: *mut *mut btRigidBody,
        numBodies: ::std::os::raw::c_int,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld13updateActionsEf"]
    pub fn btDiscreteDynamicsWorld_updateActions(
        this: *mut btDiscreteDynamicsWorld,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld14startProfilingEf"]
    pub fn btDiscreteDynamicsWorld_startProfiling(
        this: *mut btDiscreteDynamicsWorld,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld25releasePredictiveContactsEv"]
    pub fn btDiscreteDynamicsWorld_releasePredictiveContacts(this: *mut btDiscreteDynamicsWorld);
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld32createPredictiveContactsInternalEPP11btRigidBodyif"]
    pub fn btDiscreteDynamicsWorld_createPredictiveContactsInternal(
        this: *mut btDiscreteDynamicsWorld,
        bodies: *mut *mut btRigidBody,
        numBodies: ::std::os::raw::c_int,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld20serializeRigidBodiesEP12btSerializer"]
    pub fn btDiscreteDynamicsWorld_serializeRigidBodies(
        this: *mut btDiscreteDynamicsWorld,
        serializer: *mut btSerializer,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld26serializeDynamicsWorldInfoEP12btSerializer"]
    pub fn btDiscreteDynamicsWorld_serializeDynamicsWorldInfo(
        this: *mut btDiscreteDynamicsWorld,
        serializer: *mut btSerializer,
    );
}
extern "C" {
    /// this can be useful to synchronize a single rigid body -> graphics object
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld28synchronizeSingleMotionStateEP11btRigidBody"]
    pub fn btDiscreteDynamicsWorld_synchronizeSingleMotionState(
        this: *mut btDiscreteDynamicsWorld,
        body: *mut btRigidBody,
    );
}
extern "C" {
    /// this btDiscreteDynamicsWorld constructor gets created objects from the user, and will not delete those
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorldC1EP12btDispatcherP21btBroadphaseInterfaceP18btConstraintSolverP24btCollisionConfiguration"]
    pub fn btDiscreteDynamicsWorld_btDiscreteDynamicsWorld(
        this: *mut btDiscreteDynamicsWorld,
        dispatcher: *mut btDispatcher,
        pairCache: *mut btBroadphaseInterface,
        constraintSolver: *mut btConstraintSolver,
        collisionConfiguration: *mut btCollisionConfiguration,
    );
}
impl btDiscreteDynamicsWorld {
    #[inline]
    pub unsafe fn integrateTransformsInternal(
        &mut self,
        bodies: *mut *mut btRigidBody,
        numBodies: ::std::os::raw::c_int,
        timeStep: btScalar,
    ) {
        btDiscreteDynamicsWorld_integrateTransformsInternal(self, bodies, numBodies, timeStep)
    }
    #[inline]
    pub unsafe fn updateActions(&mut self, timeStep: btScalar) {
        btDiscreteDynamicsWorld_updateActions(self, timeStep)
    }
    #[inline]
    pub unsafe fn startProfiling(&mut self, timeStep: btScalar) {
        btDiscreteDynamicsWorld_startProfiling(self, timeStep)
    }
    #[inline]
    pub unsafe fn releasePredictiveContacts(&mut self) {
        btDiscreteDynamicsWorld_releasePredictiveContacts(self)
    }
    #[inline]
    pub unsafe fn createPredictiveContactsInternal(
        &mut self,
        bodies: *mut *mut btRigidBody,
        numBodies: ::std::os::raw::c_int,
        timeStep: btScalar,
    ) {
        btDiscreteDynamicsWorld_createPredictiveContactsInternal(self, bodies, numBodies, timeStep)
    }
    #[inline]
    pub unsafe fn serializeRigidBodies(&mut self, serializer: *mut btSerializer) {
        btDiscreteDynamicsWorld_serializeRigidBodies(self, serializer)
    }
    #[inline]
    pub unsafe fn serializeDynamicsWorldInfo(&mut self, serializer: *mut btSerializer) {
        btDiscreteDynamicsWorld_serializeDynamicsWorldInfo(self, serializer)
    }
    #[inline]
    pub unsafe fn synchronizeSingleMotionState(&mut self, body: *mut btRigidBody) {
        btDiscreteDynamicsWorld_synchronizeSingleMotionState(self, body)
    }
    #[inline]
    pub unsafe fn new(
        dispatcher: *mut btDispatcher,
        pairCache: *mut btBroadphaseInterface,
        constraintSolver: *mut btConstraintSolver,
        collisionConfiguration: *mut btCollisionConfiguration,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btDiscreteDynamicsWorld_btDiscreteDynamicsWorld(
            &mut __bindgen_tmp,
            dispatcher,
            pairCache,
            constraintSolver,
            collisionConfiguration,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld25predictUnconstraintMotionEf"]
    pub fn btDiscreteDynamicsWorld_predictUnconstraintMotion(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld19integrateTransformsEf"]
    pub fn btDiscreteDynamicsWorld_integrateTransforms(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld26calculateSimulationIslandsEv"]
    pub fn btDiscreteDynamicsWorld_calculateSimulationIslands(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfo"]
    pub fn btDiscreteDynamicsWorld_solveConstraints(
        this: *mut ::std::os::raw::c_void,
        solverInfo: *mut btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld21updateActivationStateEf"]
    pub fn btDiscreteDynamicsWorld_updateActivationState(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld28internalSingleStepSimulationEf"]
    pub fn btDiscreteDynamicsWorld_internalSingleStepSimulation(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld24createPredictiveContactsEf"]
    pub fn btDiscreteDynamicsWorld_createPredictiveContacts(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld18saveKinematicStateEf"]
    pub fn btDiscreteDynamicsWorld_saveKinematicState(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorldD1Ev"]
    pub fn btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_destructor(
        this: *mut btDiscreteDynamicsWorld,
    );
}
extern "C" {
    /// if maxSubSteps > 0, it will interpolate motion between fixedTimeStep's
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld14stepSimulationEfif"]
    pub fn btDiscreteDynamicsWorld_stepSimulation(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
        maxSubSteps: ::std::os::raw::c_int,
        fixedTimeStep: btScalar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld23synchronizeMotionStatesEv"]
    pub fn btDiscreteDynamicsWorld_synchronizeMotionStates(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld13addConstraintEP17btTypedConstraintb"]
    pub fn btDiscreteDynamicsWorld_addConstraint(
        this: *mut ::std::os::raw::c_void,
        constraint: *mut btTypedConstraint,
        disableCollisionsBetweenLinkedBodies: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld16removeConstraintEP17btTypedConstraint"]
    pub fn btDiscreteDynamicsWorld_removeConstraint(
        this: *mut ::std::os::raw::c_void,
        constraint: *mut btTypedConstraint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld9addActionEP17btActionInterface"]
    pub fn btDiscreteDynamicsWorld_addAction(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut btActionInterface,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld12removeActionEP17btActionInterface"]
    pub fn btDiscreteDynamicsWorld_removeAction(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut btActionInterface,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld10setGravityERK9btVector3"]
    pub fn btDiscreteDynamicsWorld_setGravity(
        this: *mut ::std::os::raw::c_void,
        gravity: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btDiscreteDynamicsWorld10getGravityEv"]
    pub fn btDiscreteDynamicsWorld_getGravity(this: *mut ::std::os::raw::c_void) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld18addCollisionObjectEP17btCollisionObjectii"]
    pub fn btDiscreteDynamicsWorld_addCollisionObject(
        this: *mut ::std::os::raw::c_void,
        collisionObject: *mut btCollisionObject,
        collisionFilterGroup: ::std::os::raw::c_int,
        collisionFilterMask: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld12addRigidBodyEP11btRigidBody"]
    pub fn btDiscreteDynamicsWorld_addRigidBody(
        this: *mut ::std::os::raw::c_void,
        body: *mut btRigidBody,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld12addRigidBodyEP11btRigidBodyii"]
    pub fn btDiscreteDynamicsWorld_addRigidBody1(
        this: *mut ::std::os::raw::c_void,
        body: *mut btRigidBody,
        group: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld15removeRigidBodyEP11btRigidBody"]
    pub fn btDiscreteDynamicsWorld_removeRigidBody(
        this: *mut ::std::os::raw::c_void,
        body: *mut btRigidBody,
    );
}
extern "C" {
    /// removeCollisionObject will first check if it is a rigid body, if so call removeRigidBody otherwise call btCollisionWorld::removeCollisionObject
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld21removeCollisionObjectEP17btCollisionObject"]
    pub fn btDiscreteDynamicsWorld_removeCollisionObject(
        this: *mut ::std::os::raw::c_void,
        collisionObject: *mut btCollisionObject,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld19debugDrawConstraintEP17btTypedConstraint"]
    pub fn btDiscreteDynamicsWorld_debugDrawConstraint(
        this: *mut ::std::os::raw::c_void,
        constraint: *mut btTypedConstraint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld14debugDrawWorldEv"]
    pub fn btDiscreteDynamicsWorld_debugDrawWorld(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld19setConstraintSolverEP18btConstraintSolver"]
    pub fn btDiscreteDynamicsWorld_setConstraintSolver(
        this: *mut ::std::os::raw::c_void,
        solver: *mut btConstraintSolver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld19getConstraintSolverEv"]
    pub fn btDiscreteDynamicsWorld_getConstraintSolver(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut btConstraintSolver;
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btDiscreteDynamicsWorld17getNumConstraintsEv"]
    pub fn btDiscreteDynamicsWorld_getNumConstraints(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld13getConstraintEi"]
    pub fn btDiscreteDynamicsWorld_getConstraint(
        this: *mut ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
    ) -> *mut btTypedConstraint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btDiscreteDynamicsWorld13getConstraintEi"]
    pub fn btDiscreteDynamicsWorld_getConstraint1(
        this: *mut ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
    ) -> *const btTypedConstraint;
}
extern "C" {
    /// the forces on each rigidbody is accumulating together with gravity. clear this after each timestep.
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld11clearForcesEv"]
    pub fn btDiscreteDynamicsWorld_clearForces(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    /// apply gravity, call this once per timestep
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld12applyGravityEv"]
    pub fn btDiscreteDynamicsWorld_applyGravity(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    /// obsolete, use addAction instead
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld10addVehicleEP17btActionInterface"]
    pub fn btDiscreteDynamicsWorld_addVehicle(
        this: *mut ::std::os::raw::c_void,
        vehicle: *mut btActionInterface,
    );
}
extern "C" {
    /// obsolete, use removeAction instead
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld13removeVehicleEP17btActionInterface"]
    pub fn btDiscreteDynamicsWorld_removeVehicle(
        this: *mut ::std::os::raw::c_void,
        vehicle: *mut btActionInterface,
    );
}
extern "C" {
    /// obsolete, use addAction instead
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld12addCharacterEP17btActionInterface"]
    pub fn btDiscreteDynamicsWorld_addCharacter(
        this: *mut ::std::os::raw::c_void,
        character: *mut btActionInterface,
    );
}
extern "C" {
    /// obsolete, use removeAction instead
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld15removeCharacterEP17btActionInterface"]
    pub fn btDiscreteDynamicsWorld_removeCharacter(
        this: *mut ::std::os::raw::c_void,
        character: *mut btActionInterface,
    );
}
extern "C" {
    /// Preliminary serialization test for Bullet 2.76. Loading those files requires a separate parser (see Bullet/Demos/SerializeDemo)
    #[link_name = "\u{1}_ZN23btDiscreteDynamicsWorld9serializeEP12btSerializer"]
    pub fn btDiscreteDynamicsWorld_serialize(
        this: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btElement {
    pub m_id: ::std::os::raw::c_int,
    pub m_sz: ::std::os::raw::c_int,
}
/// UnionFind calculates connected subsets
#[repr(C)]
#[derive(Debug)]
pub struct btUnionFind {
    pub m_elements: btAlignedObjectArray<btElement>,
}
extern "C" {
    #[link_name = "\u{1}_ZN11btUnionFind11sortIslandsEv"]
    pub fn btUnionFind_sortIslands(this: *mut btUnionFind);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btUnionFind5resetEi"]
    pub fn btUnionFind_reset(this: *mut btUnionFind, N: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btUnionFind8allocateEi"]
    pub fn btUnionFind_allocate(this: *mut btUnionFind, N: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btUnionFind4FreeEv"]
    pub fn btUnionFind_Free(this: *mut btUnionFind);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btUnionFindC1Ev"]
    pub fn btUnionFind_btUnionFind(this: *mut btUnionFind);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btUnionFindD1Ev"]
    pub fn btUnionFind_btUnionFind_destructor(this: *mut btUnionFind);
}
impl btUnionFind {
    #[inline]
    pub unsafe fn sortIslands(&mut self) {
        btUnionFind_sortIslands(self)
    }
    #[inline]
    pub unsafe fn reset(&mut self, N: ::std::os::raw::c_int) {
        btUnionFind_reset(self, N)
    }
    #[inline]
    pub unsafe fn allocate(&mut self, N: ::std::os::raw::c_int) {
        btUnionFind_allocate(self, N)
    }
    #[inline]
    pub unsafe fn Free(&mut self) {
        btUnionFind_Free(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btUnionFind_btUnionFind(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        btUnionFind_btUnionFind_destructor(self)
    }
}
#[repr(C)]
pub struct btSimulationIslandManager__bindgen_vtable(::std::os::raw::c_void);
/// SimulationIslandManager creates and handles simulation islands, using btUnionFind
#[repr(C)]
#[derive(Debug)]
pub struct btSimulationIslandManager {
    pub vtable_: *const btSimulationIslandManager__bindgen_vtable,
    pub m_unionFind: btUnionFind,
    pub m_islandmanifold: btAlignedObjectArray<*mut btPersistentManifold>,
    pub m_islandBodies: btAlignedObjectArray<*mut btCollisionObject>,
    pub m_splitIslands: bool,
}
#[repr(C)]
pub struct btSimulationIslandManager_IslandCallback__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btSimulationIslandManager_IslandCallback {
    pub vtable_: *const btSimulationIslandManager_IslandCallback__bindgen_vtable,
}
extern "C" {
    #[link_name = "\u{1}_ZN25btSimulationIslandManager13initUnionFindEi"]
    pub fn btSimulationIslandManager_initUnionFind(
        this: *mut btSimulationIslandManager,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25btSimulationIslandManager10findUnionsEP12btDispatcherP16btCollisionWorld"]
    pub fn btSimulationIslandManager_findUnions(
        this: *mut btSimulationIslandManager,
        dispatcher: *mut btDispatcher,
        colWorld: *mut btCollisionWorld,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25btSimulationIslandManager22buildAndProcessIslandsEP12btDispatcherP16btCollisionWorldPNS_14IslandCallbackE"]
    pub fn btSimulationIslandManager_buildAndProcessIslands(
        this: *mut btSimulationIslandManager,
        dispatcher: *mut btDispatcher,
        collisionWorld: *mut btCollisionWorld,
        callback: *mut btSimulationIslandManager_IslandCallback,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25btSimulationIslandManager12buildIslandsEP12btDispatcherP16btCollisionWorld"]
    pub fn btSimulationIslandManager_buildIslands(
        this: *mut btSimulationIslandManager,
        dispatcher: *mut btDispatcher,
        colWorld: *mut btCollisionWorld,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25btSimulationIslandManagerC1Ev"]
    pub fn btSimulationIslandManager_btSimulationIslandManager(
        this: *mut btSimulationIslandManager,
    );
}
impl btSimulationIslandManager {
    #[inline]
    pub unsafe fn initUnionFind(&mut self, n: ::std::os::raw::c_int) {
        btSimulationIslandManager_initUnionFind(self, n)
    }
    #[inline]
    pub unsafe fn findUnions(
        &mut self,
        dispatcher: *mut btDispatcher,
        colWorld: *mut btCollisionWorld,
    ) {
        btSimulationIslandManager_findUnions(self, dispatcher, colWorld)
    }
    #[inline]
    pub unsafe fn buildAndProcessIslands(
        &mut self,
        dispatcher: *mut btDispatcher,
        collisionWorld: *mut btCollisionWorld,
        callback: *mut btSimulationIslandManager_IslandCallback,
    ) {
        btSimulationIslandManager_buildAndProcessIslands(self, dispatcher, collisionWorld, callback)
    }
    #[inline]
    pub unsafe fn buildIslands(
        &mut self,
        dispatcher: *mut btDispatcher,
        colWorld: *mut btCollisionWorld,
    ) {
        btSimulationIslandManager_buildIslands(self, dispatcher, colWorld)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSimulationIslandManager_btSimulationIslandManager(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN25btSimulationIslandManagerD1Ev"]
    pub fn btSimulationIslandManager_btSimulationIslandManager_destructor(
        this: *mut btSimulationIslandManager,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25btSimulationIslandManager21updateActivationStateEP16btCollisionWorldP12btDispatcher"]
    pub fn btSimulationIslandManager_updateActivationState(
        this: *mut ::std::os::raw::c_void,
        colWorld: *mut btCollisionWorld,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25btSimulationIslandManager26storeIslandActivationStateEP16btCollisionWorld"]
    pub fn btSimulationIslandManager_storeIslandActivationState(
        this: *mut ::std::os::raw::c_void,
        world: *mut btCollisionWorld,
    );
}
///
/// SimulationIslandManagerMt -- Multithread capable version of SimulationIslandManager
/// Splits the world up into islands which can be solved in parallel.
/// In order to solve islands in parallel, an IslandDispatch function
/// must be provided which will dispatch calls to multiple threads.
/// The amount of parallelism that can be achieved depends on the number
/// of islands. If only a single island exists, then no parallelism is
/// possible.
///
#[repr(C)]
#[derive(Debug)]
pub struct btSimulationIslandManagerMt {
    pub _base: btSimulationIslandManager,
    pub m_allocatedIslands: btAlignedObjectArray<*mut btSimulationIslandManagerMt_Island>,
    pub m_activeIslands: btAlignedObjectArray<*mut btSimulationIslandManagerMt_Island>,
    pub m_freeIslands: btAlignedObjectArray<*mut btSimulationIslandManagerMt_Island>,
    pub m_lookupIslandFromId: btAlignedObjectArray<*mut btSimulationIslandManagerMt_Island>,
    pub m_batchIsland: *mut btSimulationIslandManagerMt_Island,
    pub m_minimumSolverBatchSize: ::std::os::raw::c_int,
    pub m_batchIslandMinBodyCount: ::std::os::raw::c_int,
    pub m_islandDispatch: btSimulationIslandManagerMt_IslandDispatchFunc,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSimulationIslandManagerMt_Island {
    pub bodyArray: btAlignedObjectArray<*mut btCollisionObject>,
    pub manifoldArray: btAlignedObjectArray<*mut btPersistentManifold>,
    pub constraintArray: btAlignedObjectArray<*mut btTypedConstraint>,
    pub id: ::std::os::raw::c_int,
    pub isSleeping: bool,
}
extern "C" {
    #[link_name = "\u{1}_ZN27btSimulationIslandManagerMt6Island6appendERKS0_"]
    pub fn btSimulationIslandManagerMt_Island_append(
        this: *mut btSimulationIslandManagerMt_Island,
        other: *const btSimulationIslandManagerMt_Island,
    );
}
impl btSimulationIslandManagerMt_Island {
    #[inline]
    pub unsafe fn append(&mut self, other: *const btSimulationIslandManagerMt_Island) {
        btSimulationIslandManagerMt_Island_append(self, other)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSimulationIslandManagerMt_SolverParams {
    pub m_solverPool: *mut btConstraintSolver,
    pub m_solverMt: *mut btConstraintSolver,
    pub m_solverInfo: *mut btContactSolverInfo,
    pub m_debugDrawer: *mut btIDebugDraw,
    pub m_dispatcher: *mut btDispatcher,
}
pub type btSimulationIslandManagerMt_IslandDispatchFunc = ::std::option::Option<
    unsafe extern "C" fn(
        islands: *mut btAlignedObjectArray<
            *mut btSimulationIslandManagerMt_Island,
        >,
        solverParams: *const btSimulationIslandManagerMt_SolverParams,
    ),
>;
extern "C" {
    #[link_name = "\u{1}_ZN27btSimulationIslandManagerMt11solveIslandEP18btConstraintSolverRNS_6IslandERKNS_12SolverParamsE"]
    pub fn btSimulationIslandManagerMt_solveIsland(
        solver: *mut btConstraintSolver,
        island: *mut btSimulationIslandManagerMt_Island,
        solverParams: *const btSimulationIslandManagerMt_SolverParams,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btSimulationIslandManagerMt20serialIslandDispatchEP20btAlignedObjectArrayIPNS_6IslandEERKNS_12SolverParamsE"]
    pub fn btSimulationIslandManagerMt_serialIslandDispatch(
        islandsPtr: *mut btAlignedObjectArray<*mut btSimulationIslandManagerMt_Island>,
        solverParams: *const btSimulationIslandManagerMt_SolverParams,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btSimulationIslandManagerMt22parallelIslandDispatchEP20btAlignedObjectArrayIPNS_6IslandEERKNS_12SolverParamsE"]
    pub fn btSimulationIslandManagerMt_parallelIslandDispatch(
        islandsPtr: *mut btAlignedObjectArray<*mut btSimulationIslandManagerMt_Island>,
        solverParams: *const btSimulationIslandManagerMt_SolverParams,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btSimulationIslandManagerMt9getIslandEi"]
    pub fn btSimulationIslandManagerMt_getIsland(
        this: *mut btSimulationIslandManagerMt,
        id: ::std::os::raw::c_int,
    ) -> *mut btSimulationIslandManagerMt_Island;
}
extern "C" {
    #[link_name = "\u{1}_ZN27btSimulationIslandManagerMtC1Ev"]
    pub fn btSimulationIslandManagerMt_btSimulationIslandManagerMt(
        this: *mut btSimulationIslandManagerMt,
    );
}
impl btSimulationIslandManagerMt {
    #[inline]
    pub unsafe fn solveIsland(
        solver: *mut btConstraintSolver,
        island: *mut btSimulationIslandManagerMt_Island,
        solverParams: *const btSimulationIslandManagerMt_SolverParams,
    ) {
        btSimulationIslandManagerMt_solveIsland(solver, island, solverParams)
    }
    #[inline]
    pub unsafe fn serialIslandDispatch(
        islandsPtr: *mut btAlignedObjectArray<*mut btSimulationIslandManagerMt_Island>,
        solverParams: *const btSimulationIslandManagerMt_SolverParams,
    ) {
        btSimulationIslandManagerMt_serialIslandDispatch(islandsPtr, solverParams)
    }
    #[inline]
    pub unsafe fn parallelIslandDispatch(
        islandsPtr: *mut btAlignedObjectArray<*mut btSimulationIslandManagerMt_Island>,
        solverParams: *const btSimulationIslandManagerMt_SolverParams,
    ) {
        btSimulationIslandManagerMt_parallelIslandDispatch(islandsPtr, solverParams)
    }
    #[inline]
    pub unsafe fn getIsland(
        &mut self,
        id: ::std::os::raw::c_int,
    ) -> *mut btSimulationIslandManagerMt_Island {
        btSimulationIslandManagerMt_getIsland(self, id)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSimulationIslandManagerMt_btSimulationIslandManagerMt(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN27btSimulationIslandManagerMt14allocateIslandEii"]
    pub fn btSimulationIslandManagerMt_allocateIsland(
        this: *mut ::std::os::raw::c_void,
        id: ::std::os::raw::c_int,
        numBodies: ::std::os::raw::c_int,
    ) -> *mut btSimulationIslandManagerMt_Island;
}
extern "C" {
    #[link_name = "\u{1}_ZN27btSimulationIslandManagerMt15initIslandPoolsEv"]
    pub fn btSimulationIslandManagerMt_initIslandPools(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN27btSimulationIslandManagerMt18addBodiesToIslandsEP16btCollisionWorld"]
    pub fn btSimulationIslandManagerMt_addBodiesToIslands(
        this: *mut ::std::os::raw::c_void,
        collisionWorld: *mut btCollisionWorld,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btSimulationIslandManagerMt21addManifoldsToIslandsEP12btDispatcher"]
    pub fn btSimulationIslandManagerMt_addManifoldsToIslands(
        this: *mut ::std::os::raw::c_void,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btSimulationIslandManagerMt23addConstraintsToIslandsER20btAlignedObjectArrayIP17btTypedConstraintE"]
    pub fn btSimulationIslandManagerMt_addConstraintsToIslands(
        this: *mut ::std::os::raw::c_void,
        constraints: *mut btAlignedObjectArray<*mut btTypedConstraint>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btSimulationIslandManagerMt12mergeIslandsEv"]
    pub fn btSimulationIslandManagerMt_mergeIslands(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN27btSimulationIslandManagerMtD1Ev"]
    pub fn btSimulationIslandManagerMt_btSimulationIslandManagerMt_destructor(
        this: *mut btSimulationIslandManagerMt,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btSimulationIslandManagerMt22buildAndProcessIslandsEP12btDispatcherP16btCollisionWorldR20btAlignedObjectArrayIP17btTypedConstraintERKNS_12SolverParamsE"]
    pub fn btSimulationIslandManagerMt_buildAndProcessIslands(
        this: *mut ::std::os::raw::c_void,
        dispatcher: *mut btDispatcher,
        collisionWorld: *mut btCollisionWorld,
        constraints: *mut btAlignedObjectArray<*mut btTypedConstraint>,
        solverParams: *const btSimulationIslandManagerMt_SolverParams,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btSimulationIslandManagerMt12buildIslandsEP12btDispatcherP16btCollisionWorld"]
    pub fn btSimulationIslandManagerMt_buildIslands(
        this: *mut ::std::os::raw::c_void,
        dispatcher: *mut btDispatcher,
        colWorld: *mut btCollisionWorld,
    );
}
///
/// btConstraintSolverPoolMt - masquerades as a constraint solver, but really it is a threadsafe pool of them.
///
/// Each solver in the pool is protected by a mutex.  When solveGroup is called from a thread,
/// the pool looks for a solver that isn't being used by another thread, locks it, and dispatches the
/// call to the solver.
/// So long as there are at least as many solvers as there are hardware threads, it should never need to
/// spin wait.
///
#[repr(C)]
pub struct btConstraintSolverPoolMt {
    pub _base: btConstraintSolver,
    pub m_solvers: btAlignedObjectArray<btConstraintSolverPoolMt_ThreadSolver>,
    pub m_solverType: btConstraintSolverType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btConstraintSolverPoolMt_ThreadSolver {
    pub solver: *mut btConstraintSolver,
    pub mutex: btSpinMutex,
    pub _cachelinePadding: [::std::os::raw::c_char; 116usize],
}
pub const btConstraintSolverPoolMt_kCacheLineSize: usize = 128;
extern "C" {
    #[link_name = "\u{1}_ZN24btConstraintSolverPoolMtC1Ei"]
    pub fn btConstraintSolverPoolMt_btConstraintSolverPoolMt(
        this: *mut btConstraintSolverPoolMt,
        numSolvers: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btConstraintSolverPoolMtC1EPP18btConstraintSolveri"]
    pub fn btConstraintSolverPoolMt_btConstraintSolverPoolMt1(
        this: *mut btConstraintSolverPoolMt,
        solvers: *mut *mut btConstraintSolver,
        numSolvers: ::std::os::raw::c_int,
    );
}
impl btConstraintSolverPoolMt {
    #[inline]
    pub unsafe fn new(numSolvers: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConstraintSolverPoolMt_btConstraintSolverPoolMt(&mut __bindgen_tmp, numSolvers);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        solvers: *mut *mut btConstraintSolver,
        numSolvers: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConstraintSolverPoolMt_btConstraintSolverPoolMt1(&mut __bindgen_tmp, solvers, numSolvers);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN24btConstraintSolverPoolMtD1Ev"]
    pub fn btConstraintSolverPoolMt_btConstraintSolverPoolMt_destructor(
        this: *mut btConstraintSolverPoolMt,
    );
}
extern "C" {
    /// solve a group of constraints
    #[link_name = "\u{1}_ZN24btConstraintSolverPoolMt10solveGroupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btDispatcher"]
    pub fn btConstraintSolverPoolMt_solveGroup(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifolds: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        info: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
        dispatcher: *mut btDispatcher,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN24btConstraintSolverPoolMt5resetEv"]
    pub fn btConstraintSolverPoolMt_reset(this: *mut ::std::os::raw::c_void);
}
///
/// btDiscreteDynamicsWorldMt -- a version of DiscreteDynamicsWorld with some minor changes to support
/// solving simulation islands on multiple threads.
///
/// Should function exactly like btDiscreteDynamicsWorld.
/// Also 3 methods that iterate over all of the rigidbodies can run in parallel:
/// - predictUnconstraintMotion
/// - integrateTransforms
/// - createPredictiveContacts
///
#[repr(C)]
#[derive(Debug)]
pub struct btDiscreteDynamicsWorldMt {
    pub _base: btDiscreteDynamicsWorld,
    pub m_constraintSolverMt: *mut btConstraintSolver,
}
#[repr(C)]
#[derive(Debug)]
pub struct btDiscreteDynamicsWorldMt_UpdaterCreatePredictiveContacts {
    pub _base: btIParallelForBody,
    pub timeStep: btScalar,
    pub rigidBodies: *mut *mut btRigidBody,
    pub world: *mut btDiscreteDynamicsWorldMt,
}
#[repr(C)]
#[derive(Debug)]
pub struct btDiscreteDynamicsWorldMt_UpdaterIntegrateTransforms {
    pub _base: btIParallelForBody,
    pub timeStep: btScalar,
    pub rigidBodies: *mut *mut btRigidBody,
    pub world: *mut btDiscreteDynamicsWorldMt,
}
extern "C" {
    #[link_name = "\u{1}_ZN25btDiscreteDynamicsWorldMtC1EP12btDispatcherP21btBroadphaseInterfaceP24btConstraintSolverPoolMtP18btConstraintSolverP24btCollisionConfiguration"]
    pub fn btDiscreteDynamicsWorldMt_btDiscreteDynamicsWorldMt(
        this: *mut btDiscreteDynamicsWorldMt,
        dispatcher: *mut btDispatcher,
        pairCache: *mut btBroadphaseInterface,
        constraintSolver: *mut btConstraintSolverPoolMt,
        constraintSolverMt: *mut btConstraintSolver,
        collisionConfiguration: *mut btCollisionConfiguration,
    );
}
impl btDiscreteDynamicsWorldMt {
    #[inline]
    pub unsafe fn new(
        dispatcher: *mut btDispatcher,
        pairCache: *mut btBroadphaseInterface,
        constraintSolver: *mut btConstraintSolverPoolMt,
        constraintSolverMt: *mut btConstraintSolver,
        collisionConfiguration: *mut btCollisionConfiguration,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btDiscreteDynamicsWorldMt_btDiscreteDynamicsWorldMt(
            &mut __bindgen_tmp,
            dispatcher,
            pairCache,
            constraintSolver,
            constraintSolverMt,
            collisionConfiguration,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN25btDiscreteDynamicsWorldMt16solveConstraintsER19btContactSolverInfo"]
    pub fn btDiscreteDynamicsWorldMt_solveConstraints(
        this: *mut ::std::os::raw::c_void,
        solverInfo: *mut btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25btDiscreteDynamicsWorldMt25predictUnconstraintMotionEf"]
    pub fn btDiscreteDynamicsWorldMt_predictUnconstraintMotion(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25btDiscreteDynamicsWorldMt24createPredictiveContactsEf"]
    pub fn btDiscreteDynamicsWorldMt_createPredictiveContacts(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25btDiscreteDynamicsWorldMt19integrateTransformsEf"]
    pub fn btDiscreteDynamicsWorldMt_integrateTransforms(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25btDiscreteDynamicsWorldMtD1Ev"]
    pub fn btDiscreteDynamicsWorldMt_btDiscreteDynamicsWorldMt_destructor(
        this: *mut btDiscreteDynamicsWorldMt,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25btDiscreteDynamicsWorldMt14stepSimulationEfif"]
    pub fn btDiscreteDynamicsWorldMt_stepSimulation(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
        maxSubSteps: ::std::os::raw::c_int,
        fixedTimeStep: btScalar,
    ) -> ::std::os::raw::c_int;
}
/// 1D constraint along a normal axis between bodyA and bodyB. It can be combined to solve contact and friction constraints.
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btMultiBodySolverConstraint {
    pub m_deltaVelAindex: ::std::os::raw::c_int,
    pub m_jacAindex: ::std::os::raw::c_int,
    pub m_deltaVelBindex: ::std::os::raw::c_int,
    pub m_jacBindex: ::std::os::raw::c_int,
    pub m_relpos1CrossNormal: btVector3,
    pub m_contactNormal1: btVector3,
    pub m_relpos2CrossNormal: btVector3,
    pub m_contactNormal2: btVector3,
    pub m_angularComponentA: btVector3,
    pub m_angularComponentB: btVector3,
    pub m_appliedPushImpulse: btScalar,
    pub m_appliedImpulse: btScalar,
    pub m_friction: btScalar,
    pub m_jacDiagABInv: btScalar,
    pub m_rhs: btScalar,
    pub m_cfm: btScalar,
    pub m_lowerLimit: btScalar,
    pub m_upperLimit: btScalar,
    pub m_rhsPenetration: btScalar,
    pub __bindgen_anon_1: btMultiBodySolverConstraint__bindgen_ty_1,
    pub m_overrideNumSolverIterations: ::std::os::raw::c_int,
    pub m_frictionIndex: ::std::os::raw::c_int,
    pub m_solverBodyIdA: ::std::os::raw::c_int,
    pub m_multiBodyA: *mut btMultiBody,
    pub m_linkA: ::std::os::raw::c_int,
    pub m_solverBodyIdB: ::std::os::raw::c_int,
    pub m_multiBodyB: *mut btMultiBody,
    pub m_linkB: ::std::os::raw::c_int,
    pub m_orgConstraint: *mut btMultiBodyConstraint,
    pub m_orgDofIndex: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btMultiBodySolverConstraint__bindgen_ty_1 {
    pub m_originalContactPoint: *mut ::std::os::raw::c_void,
    pub m_unusedPadding4: btScalar,
    _bindgen_union_align: u64,
}
pub const btMultiBodySolverConstraint_btSolverConstraintType_BT_SOLVER_CONTACT_1D:
    btMultiBodySolverConstraint_btSolverConstraintType = 0;
pub const btMultiBodySolverConstraint_btSolverConstraintType_BT_SOLVER_FRICTION_1D:
    btMultiBodySolverConstraint_btSolverConstraintType = 1;
pub type btMultiBodySolverConstraint_btSolverConstraintType = u32;
pub type btMultiBodyConstraintArray = btAlignedObjectArray<btMultiBodySolverConstraint>;
pub const btMultiBodyLinkFlags_BT_MULTIBODYLINKFLAGS_DISABLE_PARENT_COLLISION:
    btMultiBodyLinkFlags = 1;
pub const btMultiBodyLinkFlags_BT_MULTIBODYLINKFLAGS_DISABLE_ALL_PARENT_COLLISION:
    btMultiBodyLinkFlags = 2;
pub type btMultiBodyLinkFlags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSpatialForceVector {
    pub m_topVec: btVector3,
    pub m_bottomVec: btVector3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSpatialMotionVector {
    pub m_topVec: btVector3,
    pub m_bottomVec: btVector3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSymmetricSpatialDyad {
    pub m_topLeftMat: btMatrix3x3,
    pub m_topRightMat: btMatrix3x3,
    pub m_bottomLeftMat: btMatrix3x3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSpatialTransformationMatrix {
    pub m_rotMat: btMatrix3x3,
    pub m_trnVec: btVector3,
}
pub const btSpatialTransformationMatrix_eOutputOperation_None:
    btSpatialTransformationMatrix_eOutputOperation = 0;
pub const btSpatialTransformationMatrix_eOutputOperation_Add:
    btSpatialTransformationMatrix_eOutputOperation = 1;
pub const btSpatialTransformationMatrix_eOutputOperation_Subtract:
    btSpatialTransformationMatrix_eOutputOperation = 2;
pub type btSpatialTransformationMatrix_eOutputOperation = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMultibodyLink {
    pub m_mass: btScalar,
    pub m_inertiaLocal: btVector3,
    pub m_parent: ::std::os::raw::c_int,
    pub m_zeroRotParentToThis: btQuaternion,
    pub m_dVector: btVector3,
    pub m_eVector: btVector3,
    pub m_absFrameTotVelocity: btSpatialMotionVector,
    pub m_absFrameLocVelocity: btSpatialMotionVector,
    pub m_axes: [btSpatialMotionVector; 6usize],
    pub m_dofOffset: ::std::os::raw::c_int,
    pub m_cfgOffset: ::std::os::raw::c_int,
    pub m_cachedRotParentToThis: btQuaternion,
    pub m_cachedRVector: btVector3,
    pub m_appliedForce: btVector3,
    pub m_appliedTorque: btVector3,
    pub m_appliedConstraintForce: btVector3,
    pub m_appliedConstraintTorque: btVector3,
    pub m_jointPos: [btScalar; 7usize],
    pub m_jointTorque: [btScalar; 6usize],
    pub m_collider: *mut btMultiBodyLinkCollider,
    pub m_flags: ::std::os::raw::c_int,
    pub m_dofCount: ::std::os::raw::c_int,
    pub m_posVarCount: ::std::os::raw::c_int,
    pub m_jointType: btMultibodyLink_eFeatherstoneJointType,
    pub m_jointFeedback: *mut btMultiBodyJointFeedback,
    pub m_cachedWorldTransform: btTransform,
    pub m_linkName: *const ::std::os::raw::c_char,
    pub m_jointName: *const ::std::os::raw::c_char,
    pub m_userPtr: *const ::std::os::raw::c_void,
    pub m_jointDamping: btScalar,
    pub m_jointFriction: btScalar,
    pub m_jointLowerLimit: btScalar,
    pub m_jointUpperLimit: btScalar,
    pub m_jointMaxForce: btScalar,
    pub m_jointMaxVelocity: btScalar,
}
pub const btMultibodyLink_eFeatherstoneJointType_eRevolute: btMultibodyLink_eFeatherstoneJointType =
    0;
pub const btMultibodyLink_eFeatherstoneJointType_ePrismatic:
    btMultibodyLink_eFeatherstoneJointType = 1;
pub const btMultibodyLink_eFeatherstoneJointType_eSpherical:
    btMultibodyLink_eFeatherstoneJointType = 2;
pub const btMultibodyLink_eFeatherstoneJointType_ePlanar: btMultibodyLink_eFeatherstoneJointType =
    3;
pub const btMultibodyLink_eFeatherstoneJointType_eFixed: btMultibodyLink_eFeatherstoneJointType = 4;
pub const btMultibodyLink_eFeatherstoneJointType_eInvalid: btMultibodyLink_eFeatherstoneJointType =
    5;
pub type btMultibodyLink_eFeatherstoneJointType = u32;
#[repr(C)]
pub struct btMultiBody__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btMultiBody {
    pub vtable_: *const btMultiBody__bindgen_vtable,
    pub m_baseCollider: *mut btMultiBodyLinkCollider,
    pub m_baseName: *const ::std::os::raw::c_char,
    pub m_basePos: btVector3,
    pub m_baseQuat: btQuaternion,
    pub m_baseMass: btScalar,
    pub m_baseInertia: btVector3,
    pub m_baseForce: btVector3,
    pub m_baseTorque: btVector3,
    pub m_baseConstraintForce: btVector3,
    pub m_baseConstraintTorque: btVector3,
    pub m_links: btAlignedObjectArray<btMultibodyLink>,
    pub m_deltaV: btAlignedObjectArray<btScalar>,
    pub m_realBuf: btAlignedObjectArray<btScalar>,
    pub m_vectorBuf: btAlignedObjectArray<btVector3>,
    pub m_matrixBuf: btAlignedObjectArray<btMatrix3x3>,
    pub m_cachedInertiaTopLeft: btMatrix3x3,
    pub m_cachedInertiaTopRight: btMatrix3x3,
    pub m_cachedInertiaLowerLeft: btMatrix3x3,
    pub m_cachedInertiaLowerRight: btMatrix3x3,
    pub m_cachedInertiaValid: bool,
    pub m_fixedBase: bool,
    pub m_awake: bool,
    pub m_canSleep: bool,
    pub m_sleepTimer: btScalar,
    pub m_userObjectPointer: *mut ::std::os::raw::c_void,
    pub m_userIndex2: ::std::os::raw::c_int,
    pub m_userIndex: ::std::os::raw::c_int,
    pub m_companionId: ::std::os::raw::c_int,
    pub m_linearDamping: btScalar,
    pub m_angularDamping: btScalar,
    pub m_useGyroTerm: bool,
    pub m_maxAppliedImpulse: btScalar,
    pub m_maxCoordinateVelocity: btScalar,
    pub m_hasSelfCollision: bool,
    pub __posUpdated: bool,
    pub m_dofCount: ::std::os::raw::c_int,
    pub m_posVarCnt: ::std::os::raw::c_int,
    pub m_useRK4: bool,
    pub m_useGlobalVelocities: bool,
    /// the m_needsJointFeedback gets updated/computed during the stepVelocitiesMultiDof and it for internal usage only
    pub m_internalNeedsJointFeedback: bool,
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody10setupFixedEifRK9btVector3iRK12btQuaternionS2_S2_b"]
    pub fn btMultiBody_setupFixed(
        this: *mut btMultiBody,
        linkIndex: ::std::os::raw::c_int,
        mass: btScalar,
        inertia: *const btVector3,
        parent: ::std::os::raw::c_int,
        rotParentToThis: *const btQuaternion,
        parentComToThisPivotOffset: *const btVector3,
        thisPivotToThisComOffset: *const btVector3,
        deprecatedDisableParentCollision: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody14setupPrismaticEifRK9btVector3iRK12btQuaternionS2_S2_S2_b"]
    pub fn btMultiBody_setupPrismatic(
        this: *mut btMultiBody,
        i: ::std::os::raw::c_int,
        mass: btScalar,
        inertia: *const btVector3,
        parent: ::std::os::raw::c_int,
        rotParentToThis: *const btQuaternion,
        jointAxis: *const btVector3,
        parentComToThisPivotOffset: *const btVector3,
        thisPivotToThisComOffset: *const btVector3,
        disableParentCollision: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody13setupRevoluteEifRK9btVector3iRK12btQuaternionS2_S2_S2_b"]
    pub fn btMultiBody_setupRevolute(
        this: *mut btMultiBody,
        linkIndex: ::std::os::raw::c_int,
        mass: btScalar,
        inertia: *const btVector3,
        parentIndex: ::std::os::raw::c_int,
        rotParentToThis: *const btQuaternion,
        jointAxis: *const btVector3,
        parentComToThisPivotOffset: *const btVector3,
        thisPivotToThisComOffset: *const btVector3,
        disableParentCollision: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody14setupSphericalEifRK9btVector3iRK12btQuaternionS2_S2_b"]
    pub fn btMultiBody_setupSpherical(
        this: *mut btMultiBody,
        linkIndex: ::std::os::raw::c_int,
        mass: btScalar,
        inertia: *const btVector3,
        parent: ::std::os::raw::c_int,
        rotParentToThis: *const btQuaternion,
        parentComToThisPivotOffset: *const btVector3,
        thisPivotToThisComOffset: *const btVector3,
        disableParentCollision: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody11setupPlanarEifRK9btVector3iRK12btQuaternionS2_S2_b"]
    pub fn btMultiBody_setupPlanar(
        this: *mut btMultiBody,
        i: ::std::os::raw::c_int,
        mass: btScalar,
        inertia: *const btVector3,
        parent: ::std::os::raw::c_int,
        rotParentToThis: *const btQuaternion,
        rotationAxis: *const btVector3,
        parentComToThisComOffset: *const btVector3,
        disableParentCollision: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody9getParentEi"]
    pub fn btMultiBody_getParent(
        this: *const btMultiBody,
        link_num: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody11getLinkMassEi"]
    pub fn btMultiBody_getLinkMass(this: *const btMultiBody, i: ::std::os::raw::c_int) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody14getLinkInertiaEi"]
    pub fn btMultiBody_getLinkInertia(
        this: *const btMultiBody,
        i: ::std::os::raw::c_int,
    ) -> *const btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody11getJointPosEi"]
    pub fn btMultiBody_getJointPos(this: *const btMultiBody, i: ::std::os::raw::c_int) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody11getJointVelEi"]
    pub fn btMultiBody_getJointVel(this: *const btMultiBody, i: ::std::os::raw::c_int) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody19getJointVelMultiDofEi"]
    pub fn btMultiBody_getJointVelMultiDof(
        this: *mut btMultiBody,
        i: ::std::os::raw::c_int,
    ) -> *mut btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody19getJointPosMultiDofEi"]
    pub fn btMultiBody_getJointPosMultiDof(
        this: *mut btMultiBody,
        i: ::std::os::raw::c_int,
    ) -> *mut btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody19getJointVelMultiDofEi"]
    pub fn btMultiBody_getJointVelMultiDof1(
        this: *const btMultiBody,
        i: ::std::os::raw::c_int,
    ) -> *const btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody19getJointPosMultiDofEi"]
    pub fn btMultiBody_getJointPosMultiDof1(
        this: *const btMultiBody,
        i: ::std::os::raw::c_int,
    ) -> *const btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody11setJointPosEif"]
    pub fn btMultiBody_setJointPos(this: *mut btMultiBody, i: ::std::os::raw::c_int, q: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody11setJointVelEif"]
    pub fn btMultiBody_setJointVel(
        this: *mut btMultiBody,
        i: ::std::os::raw::c_int,
        qdot: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody19setJointPosMultiDofEiPf"]
    pub fn btMultiBody_setJointPosMultiDof(
        this: *mut btMultiBody,
        i: ::std::os::raw::c_int,
        q: *mut btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody19setJointVelMultiDofEiPf"]
    pub fn btMultiBody_setJointVelMultiDof(
        this: *mut btMultiBody,
        i: ::std::os::raw::c_int,
        qdot: *mut btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody10getRVectorEi"]
    pub fn btMultiBody_getRVector(
        this: *const btMultiBody,
        i: ::std::os::raw::c_int,
    ) -> *const btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody19getParentToLocalRotEi"]
    pub fn btMultiBody_getParentToLocalRot(
        this: *const btMultiBody,
        i: ::std::os::raw::c_int,
    ) -> *const btQuaternion;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody15localPosToWorldEiRK9btVector3"]
    pub fn btMultiBody_localPosToWorld(
        this: *const btMultiBody,
        i: ::std::os::raw::c_int,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody15localDirToWorldEiRK9btVector3"]
    pub fn btMultiBody_localDirToWorld(
        this: *const btMultiBody,
        i: ::std::os::raw::c_int,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody15worldPosToLocalEiRK9btVector3"]
    pub fn btMultiBody_worldPosToLocal(
        this: *const btMultiBody,
        i: ::std::os::raw::c_int,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody15worldDirToLocalEiRK9btVector3"]
    pub fn btMultiBody_worldDirToLocal(
        this: *const btMultiBody,
        i: ::std::os::raw::c_int,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody17localFrameToWorldEiRK11btMatrix3x3"]
    pub fn btMultiBody_localFrameToWorld(
        this: *const btMultiBody,
        i: ::std::os::raw::c_int,
        mat: *const btMatrix3x3,
    ) -> btMatrix3x3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody16getKineticEnergyEv"]
    pub fn btMultiBody_getKineticEnergy(this: *const btMultiBody) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody18getAngularMomentumEv"]
    pub fn btMultiBody_getAngularMomentum(this: *const btMultiBody) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody21clearForcesAndTorquesEv"]
    pub fn btMultiBody_clearForcesAndTorques(this: *mut btMultiBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody21clearConstraintForcesEv"]
    pub fn btMultiBody_clearConstraintForces(this: *mut btMultiBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody15clearVelocitiesEv"]
    pub fn btMultiBody_clearVelocities(this: *mut btMultiBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody12addLinkForceEiRK9btVector3"]
    pub fn btMultiBody_addLinkForce(
        this: *mut btMultiBody,
        i: ::std::os::raw::c_int,
        f: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody13addLinkTorqueEiRK9btVector3"]
    pub fn btMultiBody_addLinkTorque(
        this: *mut btMultiBody,
        i: ::std::os::raw::c_int,
        t: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody22addLinkConstraintForceEiRK9btVector3"]
    pub fn btMultiBody_addLinkConstraintForce(
        this: *mut btMultiBody,
        i: ::std::os::raw::c_int,
        f: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody23addLinkConstraintTorqueEiRK9btVector3"]
    pub fn btMultiBody_addLinkConstraintTorque(
        this: *mut btMultiBody,
        i: ::std::os::raw::c_int,
        t: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody14addJointTorqueEif"]
    pub fn btMultiBody_addJointTorque(
        this: *mut btMultiBody,
        i: ::std::os::raw::c_int,
        Q: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody22addJointTorqueMultiDofEiif"]
    pub fn btMultiBody_addJointTorqueMultiDof(
        this: *mut btMultiBody,
        i: ::std::os::raw::c_int,
        dof: ::std::os::raw::c_int,
        Q: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody22addJointTorqueMultiDofEiPKf"]
    pub fn btMultiBody_addJointTorqueMultiDof1(
        this: *mut btMultiBody,
        i: ::std::os::raw::c_int,
        Q: *const btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody12getLinkForceEi"]
    pub fn btMultiBody_getLinkForce(
        this: *const btMultiBody,
        i: ::std::os::raw::c_int,
    ) -> *const btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody13getLinkTorqueEi"]
    pub fn btMultiBody_getLinkTorque(
        this: *const btMultiBody,
        i: ::std::os::raw::c_int,
    ) -> *const btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody14getJointTorqueEi"]
    pub fn btMultiBody_getJointTorque(
        this: *const btMultiBody,
        i: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody22getJointTorqueMultiDofEi"]
    pub fn btMultiBody_getJointTorqueMultiDof(
        this: *mut btMultiBody,
        i: ::std::os::raw::c_int,
    ) -> *mut btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody52computeAccelerationsArticulatedBodyAlgorithmMultiDofEfR20btAlignedObjectArrayIfERS0_I9btVector3ERS0_I11btMatrix3x3Eb"]
    pub fn btMultiBody_computeAccelerationsArticulatedBodyAlgorithmMultiDof(
        this: *mut btMultiBody,
        dt: btScalar,
        scratch_r: *mut btAlignedObjectArray<btScalar>,
        scratch_v: *mut btAlignedObjectArray<btVector3>,
        scratch_m: *mut btAlignedObjectArray<btMatrix3x3>,
        isConstraintPass: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody30calcAccelerationDeltasMultiDofEPKfPfR20btAlignedObjectArrayIfERS3_I9btVector3E"]
    pub fn btMultiBody_calcAccelerationDeltasMultiDof(
        this: *const btMultiBody,
        force: *const btScalar,
        output: *mut btScalar,
        scratch_r: *mut btAlignedObjectArray<btScalar>,
        scratch_v: *mut btAlignedObjectArray<btVector3>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody21stepPositionsMultiDofEfPfS0_"]
    pub fn btMultiBody_stepPositionsMultiDof(
        this: *mut btMultiBody,
        dt: btScalar,
        pq: *mut btScalar,
        pqd: *mut btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody30fillConstraintJacobianMultiDofEiRK9btVector3S2_S2_PfR20btAlignedObjectArrayIfERS4_IS0_ERS4_I11btMatrix3x3E"]
    pub fn btMultiBody_fillConstraintJacobianMultiDof(
        this: *const btMultiBody,
        link: ::std::os::raw::c_int,
        contact_point: *const btVector3,
        normal_ang: *const btVector3,
        normal_lin: *const btVector3,
        jac: *mut btScalar,
        scratch_r: *mut btAlignedObjectArray<btScalar>,
        scratch_v: *mut btAlignedObjectArray<btVector3>,
        scratch_m: *mut btAlignedObjectArray<btMatrix3x3>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody6wakeUpEv"]
    pub fn btMultiBody_wakeUp(this: *mut btMultiBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody9goToSleepEv"]
    pub fn btMultiBody_goToSleep(this: *mut btMultiBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody29checkMotionAndSleepIfRequiredEf"]
    pub fn btMultiBody_checkMotionAndSleepIfRequired(this: *mut btMultiBody, timestep: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody16finalizeMultiDofEv"]
    pub fn btMultiBody_finalizeMultiDof(this: *mut btMultiBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody17forwardKinematicsER20btAlignedObjectArrayI12btQuaternionERS0_I9btVector3E"]
    pub fn btMultiBody_forwardKinematics(
        this: *mut btMultiBody,
        scratch_q: *mut btAlignedObjectArray<btQuaternion>,
        scratch_m: *mut btAlignedObjectArray<btVector3>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody22compTreeLinkVelocitiesEP9btVector3S1_"]
    pub fn btMultiBody_compTreeLinkVelocities(
        this: *const btMultiBody,
        omega: *mut btVector3,
        vel: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBody36updateCollisionObjectWorldTransformsER20btAlignedObjectArrayI12btQuaternionERS0_I9btVector3E"]
    pub fn btMultiBody_updateCollisionObjectWorldTransforms(
        this: *mut btMultiBody,
        scratch_q: *mut btAlignedObjectArray<btQuaternion>,
        scratch_m: *mut btAlignedObjectArray<btVector3>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBodyC1EifRK9btVector3bbb"]
    pub fn btMultiBody_btMultiBody(
        this: *mut btMultiBody,
        n_links: ::std::os::raw::c_int,
        mass: btScalar,
        inertia: *const btVector3,
        fixedBase: bool,
        canSleep: bool,
        deprecatedMultiDof: bool,
    );
}
impl btMultiBody {
    #[inline]
    pub unsafe fn setupFixed(
        &mut self,
        linkIndex: ::std::os::raw::c_int,
        mass: btScalar,
        inertia: *const btVector3,
        parent: ::std::os::raw::c_int,
        rotParentToThis: *const btQuaternion,
        parentComToThisPivotOffset: *const btVector3,
        thisPivotToThisComOffset: *const btVector3,
        deprecatedDisableParentCollision: bool,
    ) {
        btMultiBody_setupFixed(
            self,
            linkIndex,
            mass,
            inertia,
            parent,
            rotParentToThis,
            parentComToThisPivotOffset,
            thisPivotToThisComOffset,
            deprecatedDisableParentCollision,
        )
    }
    #[inline]
    pub unsafe fn setupPrismatic(
        &mut self,
        i: ::std::os::raw::c_int,
        mass: btScalar,
        inertia: *const btVector3,
        parent: ::std::os::raw::c_int,
        rotParentToThis: *const btQuaternion,
        jointAxis: *const btVector3,
        parentComToThisPivotOffset: *const btVector3,
        thisPivotToThisComOffset: *const btVector3,
        disableParentCollision: bool,
    ) {
        btMultiBody_setupPrismatic(
            self,
            i,
            mass,
            inertia,
            parent,
            rotParentToThis,
            jointAxis,
            parentComToThisPivotOffset,
            thisPivotToThisComOffset,
            disableParentCollision,
        )
    }
    #[inline]
    pub unsafe fn setupRevolute(
        &mut self,
        linkIndex: ::std::os::raw::c_int,
        mass: btScalar,
        inertia: *const btVector3,
        parentIndex: ::std::os::raw::c_int,
        rotParentToThis: *const btQuaternion,
        jointAxis: *const btVector3,
        parentComToThisPivotOffset: *const btVector3,
        thisPivotToThisComOffset: *const btVector3,
        disableParentCollision: bool,
    ) {
        btMultiBody_setupRevolute(
            self,
            linkIndex,
            mass,
            inertia,
            parentIndex,
            rotParentToThis,
            jointAxis,
            parentComToThisPivotOffset,
            thisPivotToThisComOffset,
            disableParentCollision,
        )
    }
    #[inline]
    pub unsafe fn setupSpherical(
        &mut self,
        linkIndex: ::std::os::raw::c_int,
        mass: btScalar,
        inertia: *const btVector3,
        parent: ::std::os::raw::c_int,
        rotParentToThis: *const btQuaternion,
        parentComToThisPivotOffset: *const btVector3,
        thisPivotToThisComOffset: *const btVector3,
        disableParentCollision: bool,
    ) {
        btMultiBody_setupSpherical(
            self,
            linkIndex,
            mass,
            inertia,
            parent,
            rotParentToThis,
            parentComToThisPivotOffset,
            thisPivotToThisComOffset,
            disableParentCollision,
        )
    }
    #[inline]
    pub unsafe fn setupPlanar(
        &mut self,
        i: ::std::os::raw::c_int,
        mass: btScalar,
        inertia: *const btVector3,
        parent: ::std::os::raw::c_int,
        rotParentToThis: *const btQuaternion,
        rotationAxis: *const btVector3,
        parentComToThisComOffset: *const btVector3,
        disableParentCollision: bool,
    ) {
        btMultiBody_setupPlanar(
            self,
            i,
            mass,
            inertia,
            parent,
            rotParentToThis,
            rotationAxis,
            parentComToThisComOffset,
            disableParentCollision,
        )
    }
    #[inline]
    pub unsafe fn getParent(&self, link_num: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        btMultiBody_getParent(self, link_num)
    }
    #[inline]
    pub unsafe fn getLinkMass(&self, i: ::std::os::raw::c_int) -> btScalar {
        btMultiBody_getLinkMass(self, i)
    }
    #[inline]
    pub unsafe fn getLinkInertia(&self, i: ::std::os::raw::c_int) -> *const btVector3 {
        btMultiBody_getLinkInertia(self, i)
    }
    #[inline]
    pub unsafe fn getJointPos(&self, i: ::std::os::raw::c_int) -> btScalar {
        btMultiBody_getJointPos(self, i)
    }
    #[inline]
    pub unsafe fn getJointVel(&self, i: ::std::os::raw::c_int) -> btScalar {
        btMultiBody_getJointVel(self, i)
    }
    #[inline]
    pub unsafe fn getJointVelMultiDof(&mut self, i: ::std::os::raw::c_int) -> *mut btScalar {
        btMultiBody_getJointVelMultiDof(self, i)
    }
    #[inline]
    pub unsafe fn getJointPosMultiDof(&mut self, i: ::std::os::raw::c_int) -> *mut btScalar {
        btMultiBody_getJointPosMultiDof(self, i)
    }
    #[inline]
    pub unsafe fn getJointVelMultiDof1(&self, i: ::std::os::raw::c_int) -> *const btScalar {
        btMultiBody_getJointVelMultiDof1(self, i)
    }
    #[inline]
    pub unsafe fn getJointPosMultiDof1(&self, i: ::std::os::raw::c_int) -> *const btScalar {
        btMultiBody_getJointPosMultiDof1(self, i)
    }
    #[inline]
    pub unsafe fn setJointPos(&mut self, i: ::std::os::raw::c_int, q: btScalar) {
        btMultiBody_setJointPos(self, i, q)
    }
    #[inline]
    pub unsafe fn setJointVel(&mut self, i: ::std::os::raw::c_int, qdot: btScalar) {
        btMultiBody_setJointVel(self, i, qdot)
    }
    #[inline]
    pub unsafe fn setJointPosMultiDof(&mut self, i: ::std::os::raw::c_int, q: *mut btScalar) {
        btMultiBody_setJointPosMultiDof(self, i, q)
    }
    #[inline]
    pub unsafe fn setJointVelMultiDof(&mut self, i: ::std::os::raw::c_int, qdot: *mut btScalar) {
        btMultiBody_setJointVelMultiDof(self, i, qdot)
    }
    #[inline]
    pub unsafe fn getRVector(&self, i: ::std::os::raw::c_int) -> *const btVector3 {
        btMultiBody_getRVector(self, i)
    }
    #[inline]
    pub unsafe fn getParentToLocalRot(&self, i: ::std::os::raw::c_int) -> *const btQuaternion {
        btMultiBody_getParentToLocalRot(self, i)
    }
    #[inline]
    pub unsafe fn localPosToWorld(
        &self,
        i: ::std::os::raw::c_int,
        vec: *const btVector3,
    ) -> btVector3 {
        btMultiBody_localPosToWorld(self, i, vec)
    }
    #[inline]
    pub unsafe fn localDirToWorld(
        &self,
        i: ::std::os::raw::c_int,
        vec: *const btVector3,
    ) -> btVector3 {
        btMultiBody_localDirToWorld(self, i, vec)
    }
    #[inline]
    pub unsafe fn worldPosToLocal(
        &self,
        i: ::std::os::raw::c_int,
        vec: *const btVector3,
    ) -> btVector3 {
        btMultiBody_worldPosToLocal(self, i, vec)
    }
    #[inline]
    pub unsafe fn worldDirToLocal(
        &self,
        i: ::std::os::raw::c_int,
        vec: *const btVector3,
    ) -> btVector3 {
        btMultiBody_worldDirToLocal(self, i, vec)
    }
    #[inline]
    pub unsafe fn localFrameToWorld(
        &self,
        i: ::std::os::raw::c_int,
        mat: *const btMatrix3x3,
    ) -> btMatrix3x3 {
        btMultiBody_localFrameToWorld(self, i, mat)
    }
    #[inline]
    pub unsafe fn getKineticEnergy(&self) -> btScalar {
        btMultiBody_getKineticEnergy(self)
    }
    #[inline]
    pub unsafe fn getAngularMomentum(&self) -> btVector3 {
        btMultiBody_getAngularMomentum(self)
    }
    #[inline]
    pub unsafe fn clearForcesAndTorques(&mut self) {
        btMultiBody_clearForcesAndTorques(self)
    }
    #[inline]
    pub unsafe fn clearConstraintForces(&mut self) {
        btMultiBody_clearConstraintForces(self)
    }
    #[inline]
    pub unsafe fn clearVelocities(&mut self) {
        btMultiBody_clearVelocities(self)
    }
    #[inline]
    pub unsafe fn addLinkForce(&mut self, i: ::std::os::raw::c_int, f: *const btVector3) {
        btMultiBody_addLinkForce(self, i, f)
    }
    #[inline]
    pub unsafe fn addLinkTorque(&mut self, i: ::std::os::raw::c_int, t: *const btVector3) {
        btMultiBody_addLinkTorque(self, i, t)
    }
    #[inline]
    pub unsafe fn addLinkConstraintForce(&mut self, i: ::std::os::raw::c_int, f: *const btVector3) {
        btMultiBody_addLinkConstraintForce(self, i, f)
    }
    #[inline]
    pub unsafe fn addLinkConstraintTorque(
        &mut self,
        i: ::std::os::raw::c_int,
        t: *const btVector3,
    ) {
        btMultiBody_addLinkConstraintTorque(self, i, t)
    }
    #[inline]
    pub unsafe fn addJointTorque(&mut self, i: ::std::os::raw::c_int, Q: btScalar) {
        btMultiBody_addJointTorque(self, i, Q)
    }
    #[inline]
    pub unsafe fn addJointTorqueMultiDof(
        &mut self,
        i: ::std::os::raw::c_int,
        dof: ::std::os::raw::c_int,
        Q: btScalar,
    ) {
        btMultiBody_addJointTorqueMultiDof(self, i, dof, Q)
    }
    #[inline]
    pub unsafe fn addJointTorqueMultiDof1(&mut self, i: ::std::os::raw::c_int, Q: *const btScalar) {
        btMultiBody_addJointTorqueMultiDof1(self, i, Q)
    }
    #[inline]
    pub unsafe fn getLinkForce(&self, i: ::std::os::raw::c_int) -> *const btVector3 {
        btMultiBody_getLinkForce(self, i)
    }
    #[inline]
    pub unsafe fn getLinkTorque(&self, i: ::std::os::raw::c_int) -> *const btVector3 {
        btMultiBody_getLinkTorque(self, i)
    }
    #[inline]
    pub unsafe fn getJointTorque(&self, i: ::std::os::raw::c_int) -> btScalar {
        btMultiBody_getJointTorque(self, i)
    }
    #[inline]
    pub unsafe fn getJointTorqueMultiDof(&mut self, i: ::std::os::raw::c_int) -> *mut btScalar {
        btMultiBody_getJointTorqueMultiDof(self, i)
    }
    #[inline]
    pub unsafe fn computeAccelerationsArticulatedBodyAlgorithmMultiDof(
        &mut self,
        dt: btScalar,
        scratch_r: *mut btAlignedObjectArray<btScalar>,
        scratch_v: *mut btAlignedObjectArray<btVector3>,
        scratch_m: *mut btAlignedObjectArray<btMatrix3x3>,
        isConstraintPass: bool,
    ) {
        btMultiBody_computeAccelerationsArticulatedBodyAlgorithmMultiDof(
            self,
            dt,
            scratch_r,
            scratch_v,
            scratch_m,
            isConstraintPass,
        )
    }
    #[inline]
    pub unsafe fn calcAccelerationDeltasMultiDof(
        &self,
        force: *const btScalar,
        output: *mut btScalar,
        scratch_r: *mut btAlignedObjectArray<btScalar>,
        scratch_v: *mut btAlignedObjectArray<btVector3>,
    ) {
        btMultiBody_calcAccelerationDeltasMultiDof(self, force, output, scratch_r, scratch_v)
    }
    #[inline]
    pub unsafe fn stepPositionsMultiDof(
        &mut self,
        dt: btScalar,
        pq: *mut btScalar,
        pqd: *mut btScalar,
    ) {
        btMultiBody_stepPositionsMultiDof(self, dt, pq, pqd)
    }
    #[inline]
    pub unsafe fn fillConstraintJacobianMultiDof(
        &self,
        link: ::std::os::raw::c_int,
        contact_point: *const btVector3,
        normal_ang: *const btVector3,
        normal_lin: *const btVector3,
        jac: *mut btScalar,
        scratch_r: *mut btAlignedObjectArray<btScalar>,
        scratch_v: *mut btAlignedObjectArray<btVector3>,
        scratch_m: *mut btAlignedObjectArray<btMatrix3x3>,
    ) {
        btMultiBody_fillConstraintJacobianMultiDof(
            self,
            link,
            contact_point,
            normal_ang,
            normal_lin,
            jac,
            scratch_r,
            scratch_v,
            scratch_m,
        )
    }
    #[inline]
    pub unsafe fn wakeUp(&mut self) {
        btMultiBody_wakeUp(self)
    }
    #[inline]
    pub unsafe fn goToSleep(&mut self) {
        btMultiBody_goToSleep(self)
    }
    #[inline]
    pub unsafe fn checkMotionAndSleepIfRequired(&mut self, timestep: btScalar) {
        btMultiBody_checkMotionAndSleepIfRequired(self, timestep)
    }
    #[inline]
    pub unsafe fn finalizeMultiDof(&mut self) {
        btMultiBody_finalizeMultiDof(self)
    }
    #[inline]
    pub unsafe fn forwardKinematics(
        &mut self,
        scratch_q: *mut btAlignedObjectArray<btQuaternion>,
        scratch_m: *mut btAlignedObjectArray<btVector3>,
    ) {
        btMultiBody_forwardKinematics(self, scratch_q, scratch_m)
    }
    #[inline]
    pub unsafe fn compTreeLinkVelocities(&self, omega: *mut btVector3, vel: *mut btVector3) {
        btMultiBody_compTreeLinkVelocities(self, omega, vel)
    }
    #[inline]
    pub unsafe fn updateCollisionObjectWorldTransforms(
        &mut self,
        scratch_q: *mut btAlignedObjectArray<btQuaternion>,
        scratch_m: *mut btAlignedObjectArray<btVector3>,
    ) {
        btMultiBody_updateCollisionObjectWorldTransforms(self, scratch_q, scratch_m)
    }
    #[inline]
    pub unsafe fn new(
        n_links: ::std::os::raw::c_int,
        mass: btScalar,
        inertia: *const btVector3,
        fixedBase: bool,
        canSleep: bool,
        deprecatedMultiDof: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMultiBody_btMultiBody(
            &mut __bindgen_tmp,
            n_links,
            mass,
            inertia,
            fixedBase,
            canSleep,
            deprecatedMultiDof,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN11btMultiBodyD1Ev"]
    pub fn btMultiBody_btMultiBody_destructor(this: *mut btMultiBody);
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btMultiBody28calculateSerializeBufferSizeEv"]
    pub fn btMultiBody_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK11btMultiBody9serializeEPvP12btSerializer"]
    pub fn btMultiBody_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMultiBodyLinkDoubleData {
    pub m_zeroRotParentToThis: btQuaternionDoubleData,
    pub m_parentComToThisPivotOffset: btVector3DoubleData,
    pub m_thisPivotToThisComOffset: btVector3DoubleData,
    pub m_jointAxisTop: [btVector3DoubleData; 6usize],
    pub m_jointAxisBottom: [btVector3DoubleData; 6usize],
    pub m_linkInertia: btVector3DoubleData,
    pub m_absFrameTotVelocityTop: btVector3DoubleData,
    pub m_absFrameTotVelocityBottom: btVector3DoubleData,
    pub m_absFrameLocVelocityTop: btVector3DoubleData,
    pub m_absFrameLocVelocityBottom: btVector3DoubleData,
    pub m_linkMass: f64,
    pub m_parentIndex: ::std::os::raw::c_int,
    pub m_jointType: ::std::os::raw::c_int,
    pub m_dofCount: ::std::os::raw::c_int,
    pub m_posVarCount: ::std::os::raw::c_int,
    pub m_jointPos: [f64; 7usize],
    pub m_jointVel: [f64; 6usize],
    pub m_jointTorque: [f64; 6usize],
    pub m_jointDamping: f64,
    pub m_jointFriction: f64,
    pub m_jointLowerLimit: f64,
    pub m_jointUpperLimit: f64,
    pub m_jointMaxForce: f64,
    pub m_jointMaxVelocity: f64,
    pub m_linkName: *mut ::std::os::raw::c_char,
    pub m_jointName: *mut ::std::os::raw::c_char,
    pub m_linkCollider: *mut btCollisionObjectDoubleData,
    pub m_paddingPtr: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMultiBodyLinkFloatData {
    pub m_zeroRotParentToThis: btQuaternionFloatData,
    pub m_parentComToThisPivotOffset: btVector3FloatData,
    pub m_thisPivotToThisComOffset: btVector3FloatData,
    pub m_jointAxisTop: [btVector3FloatData; 6usize],
    pub m_jointAxisBottom: [btVector3FloatData; 6usize],
    pub m_linkInertia: btVector3FloatData,
    pub m_absFrameTotVelocityTop: btVector3FloatData,
    pub m_absFrameTotVelocityBottom: btVector3FloatData,
    pub m_absFrameLocVelocityTop: btVector3FloatData,
    pub m_absFrameLocVelocityBottom: btVector3FloatData,
    pub m_dofCount: ::std::os::raw::c_int,
    pub m_linkMass: f32,
    pub m_parentIndex: ::std::os::raw::c_int,
    pub m_jointType: ::std::os::raw::c_int,
    pub m_jointPos: [f32; 7usize],
    pub m_jointVel: [f32; 6usize],
    pub m_jointTorque: [f32; 6usize],
    pub m_posVarCount: ::std::os::raw::c_int,
    pub m_jointDamping: f32,
    pub m_jointFriction: f32,
    pub m_jointLowerLimit: f32,
    pub m_jointUpperLimit: f32,
    pub m_jointMaxForce: f32,
    pub m_jointMaxVelocity: f32,
    pub m_linkName: *mut ::std::os::raw::c_char,
    pub m_jointName: *mut ::std::os::raw::c_char,
    pub m_linkCollider: *mut btCollisionObjectFloatData,
    pub m_paddingPtr: *mut ::std::os::raw::c_char,
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMultiBodyDoubleData {
    pub m_baseWorldPosition: btVector3DoubleData,
    pub m_baseWorldOrientation: btQuaternionDoubleData,
    pub m_baseLinearVelocity: btVector3DoubleData,
    pub m_baseAngularVelocity: btVector3DoubleData,
    pub m_baseInertia: btVector3DoubleData,
    pub m_baseMass: f64,
    pub m_numLinks: ::std::os::raw::c_int,
    pub m_padding: [::std::os::raw::c_char; 4usize],
    pub m_baseName: *mut ::std::os::raw::c_char,
    pub m_links: *mut btMultiBodyLinkDoubleData,
    pub m_baseCollider: *mut btCollisionObjectDoubleData,
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMultiBodyFloatData {
    pub m_baseWorldPosition: btVector3FloatData,
    pub m_baseWorldOrientation: btQuaternionFloatData,
    pub m_baseLinearVelocity: btVector3FloatData,
    pub m_baseAngularVelocity: btVector3FloatData,
    pub m_baseInertia: btVector3FloatData,
    pub m_baseMass: f32,
    pub m_numLinks: ::std::os::raw::c_int,
    pub m_baseName: *mut ::std::os::raw::c_char,
    pub m_links: *mut btMultiBodyLinkFloatData,
    pub m_baseCollider: *mut btCollisionObjectFloatData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSolverInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct btMultiBodyJacobianData {
    pub m_jacobians: btAlignedObjectArray<btScalar>,
    pub m_deltaVelocitiesUnitImpulse: btAlignedObjectArray<btScalar>,
    pub m_deltaVelocities: btAlignedObjectArray<btScalar>,
    pub scratch_r: btAlignedObjectArray<btScalar>,
    pub scratch_v: btAlignedObjectArray<btVector3>,
    pub scratch_m: btAlignedObjectArray<btMatrix3x3>,
    pub m_solverBodyPool: *mut btAlignedObjectArray<btSolverBody>,
    pub m_fixedBodyId: ::std::os::raw::c_int,
}
#[repr(C)]
pub struct btMultiBodyConstraint__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btMultiBodyConstraint {
    pub vtable_: *const btMultiBodyConstraint__bindgen_vtable,
    pub m_bodyA: *mut btMultiBody,
    pub m_bodyB: *mut btMultiBody,
    pub m_linkA: ::std::os::raw::c_int,
    pub m_linkB: ::std::os::raw::c_int,
    pub m_numRows: ::std::os::raw::c_int,
    pub m_jacSizeA: ::std::os::raw::c_int,
    pub m_jacSizeBoth: ::std::os::raw::c_int,
    pub m_posOffset: ::std::os::raw::c_int,
    pub m_isUnilateral: bool,
    pub m_numDofsFinalized: ::std::os::raw::c_int,
    pub m_maxAppliedImpulse: btScalar,
    pub m_data: btAlignedObjectArray<btScalar>,
}
extern "C" {
    #[link_name = "\u{1}_ZN21btMultiBodyConstraint13applyDeltaVeeER23btMultiBodyJacobianDataPffii"]
    pub fn btMultiBodyConstraint_applyDeltaVee(
        this: *mut btMultiBodyConstraint,
        data: *mut btMultiBodyJacobianData,
        delta_vee: *mut btScalar,
        impulse: btScalar,
        velocityIndex: ::std::os::raw::c_int,
        ndof: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btMultiBodyConstraint23fillMultiBodyConstraintER27btMultiBodySolverConstraintR23btMultiBodyJacobianDataPfS4_RK9btVector3S7_S7_S7_fRK19btContactSolverInfoffbfbff"]
    pub fn btMultiBodyConstraint_fillMultiBodyConstraint(
        this: *mut btMultiBodyConstraint,
        solverConstraint: *mut btMultiBodySolverConstraint,
        data: *mut btMultiBodyJacobianData,
        jacOrgA: *mut btScalar,
        jacOrgB: *mut btScalar,
        constraintNormalAng: *const btVector3,
        constraintNormalLin: *const btVector3,
        posAworld: *const btVector3,
        posBworld: *const btVector3,
        posError: btScalar,
        infoGlobal: *const btContactSolverInfo,
        lowerLimit: btScalar,
        upperLimit: btScalar,
        angConstraint: bool,
        relaxation: btScalar,
        isFriction: bool,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN21btMultiBodyConstraint19updateJacobianSizesEv"]
    pub fn btMultiBodyConstraint_updateJacobianSizes(this: *mut btMultiBodyConstraint);
}
extern "C" {
    #[link_name = "\u{1}_ZN21btMultiBodyConstraint25allocateJacobiansMultiDofEv"]
    pub fn btMultiBodyConstraint_allocateJacobiansMultiDof(this: *mut btMultiBodyConstraint);
}
extern "C" {
    #[link_name = "\u{1}_ZN21btMultiBodyConstraintC2EP11btMultiBodyS1_iiib"]
    pub fn btMultiBodyConstraint_btMultiBodyConstraint(
        this: *mut btMultiBodyConstraint,
        bodyA: *mut btMultiBody,
        bodyB: *mut btMultiBody,
        linkA: ::std::os::raw::c_int,
        linkB: ::std::os::raw::c_int,
        numRows: ::std::os::raw::c_int,
        isUnilateral: bool,
    );
}
impl btMultiBodyConstraint {
    #[inline]
    pub unsafe fn applyDeltaVee(
        &mut self,
        data: *mut btMultiBodyJacobianData,
        delta_vee: *mut btScalar,
        impulse: btScalar,
        velocityIndex: ::std::os::raw::c_int,
        ndof: ::std::os::raw::c_int,
    ) {
        btMultiBodyConstraint_applyDeltaVee(self, data, delta_vee, impulse, velocityIndex, ndof)
    }
    #[inline]
    pub unsafe fn fillMultiBodyConstraint(
        &mut self,
        solverConstraint: *mut btMultiBodySolverConstraint,
        data: *mut btMultiBodyJacobianData,
        jacOrgA: *mut btScalar,
        jacOrgB: *mut btScalar,
        constraintNormalAng: *const btVector3,
        constraintNormalLin: *const btVector3,
        posAworld: *const btVector3,
        posBworld: *const btVector3,
        posError: btScalar,
        infoGlobal: *const btContactSolverInfo,
        lowerLimit: btScalar,
        upperLimit: btScalar,
        angConstraint: bool,
        relaxation: btScalar,
        isFriction: bool,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    ) -> btScalar {
        btMultiBodyConstraint_fillMultiBodyConstraint(
            self,
            solverConstraint,
            data,
            jacOrgA,
            jacOrgB,
            constraintNormalAng,
            constraintNormalLin,
            posAworld,
            posBworld,
            posError,
            infoGlobal,
            lowerLimit,
            upperLimit,
            angConstraint,
            relaxation,
            isFriction,
            desiredVelocity,
            cfmSlip,
        )
    }
    #[inline]
    pub unsafe fn updateJacobianSizes(&mut self) {
        btMultiBodyConstraint_updateJacobianSizes(self)
    }
    #[inline]
    pub unsafe fn allocateJacobiansMultiDof(&mut self) {
        btMultiBodyConstraint_allocateJacobiansMultiDof(self)
    }
    #[inline]
    pub unsafe fn new(
        bodyA: *mut btMultiBody,
        bodyB: *mut btMultiBody,
        linkA: ::std::os::raw::c_int,
        linkB: ::std::os::raw::c_int,
        numRows: ::std::os::raw::c_int,
        isUnilateral: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMultiBodyConstraint_btMultiBodyConstraint(
            &mut __bindgen_tmp,
            bodyA,
            bodyB,
            linkA,
            linkB,
            numRows,
            isUnilateral,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN21btMultiBodyConstraintD1Ev"]
    pub fn btMultiBodyConstraint_btMultiBodyConstraint_destructor(this: *mut btMultiBodyConstraint);
}
#[repr(C)]
pub struct btMultiBodyConstraintSolver {
    pub _base: btSequentialImpulseConstraintSolver,
    pub m_multiBodyNonContactConstraints: btMultiBodyConstraintArray,
    pub m_multiBodyNormalContactConstraints: btMultiBodyConstraintArray,
    pub m_multiBodyFrictionContactConstraints: btMultiBodyConstraintArray,
    pub m_multiBodyTorsionalFrictionContactConstraints: btMultiBodyConstraintArray,
    pub m_data: btMultiBodyJacobianData,
    pub m_tmpMultiBodyConstraints: *mut *mut btMultiBodyConstraint,
    pub m_tmpNumMultiBodyConstraints: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver33resolveSingleConstraintRowGenericERK27btMultiBodySolverConstraint"]
    pub fn btMultiBodyConstraintSolver_resolveSingleConstraintRowGeneric(
        this: *mut btMultiBodyConstraintSolver,
        c: *const btMultiBodySolverConstraint,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver33resolveConeFrictionConstraintRowsERK27btMultiBodySolverConstraintS2_"]
    pub fn btMultiBodyConstraintSolver_resolveConeFrictionConstraintRows(
        this: *mut btMultiBodyConstraintSolver,
        cA1: *const btMultiBodySolverConstraint,
        cB: *const btMultiBodySolverConstraint,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver30addMultiBodyFrictionConstraintERK9btVector3P20btPersistentManifoldiR15btManifoldPointP17btCollisionObjectS8_fRK19btContactSolverInfoff"]
    pub fn btMultiBodyConstraintSolver_addMultiBodyFrictionConstraint(
        this: *mut btMultiBodyConstraintSolver,
        normalAxis: *const btVector3,
        manifold: *mut btPersistentManifold,
        frictionIndex: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        colObj0: *mut btCollisionObject,
        colObj1: *mut btCollisionObject,
        relaxation: btScalar,
        infoGlobal: *const btContactSolverInfo,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    ) -> *mut btMultiBodySolverConstraint;
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver39addMultiBodyTorsionalFrictionConstraintERK9btVector3P20btPersistentManifoldiR15btManifoldPointfP17btCollisionObjectS8_fRK19btContactSolverInfoff"]
    pub fn btMultiBodyConstraintSolver_addMultiBodyTorsionalFrictionConstraint(
        this: *mut btMultiBodyConstraintSolver,
        normalAxis: *const btVector3,
        manifold: *mut btPersistentManifold,
        frictionIndex: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        combinedTorsionalFriction: btScalar,
        colObj0: *mut btCollisionObject,
        colObj1: *mut btCollisionObject,
        relaxation: btScalar,
        infoGlobal: *const btContactSolverInfo,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    ) -> *mut btMultiBodySolverConstraint;
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver34setupMultiBodyJointLimitConstraintER27btMultiBodySolverConstraintPfS2_fffRK19btContactSolverInfo"]
    pub fn btMultiBodyConstraintSolver_setupMultiBodyJointLimitConstraint(
        this: *mut btMultiBodyConstraintSolver,
        constraintRow: *mut btMultiBodySolverConstraint,
        jacA: *mut btScalar,
        jacB: *mut btScalar,
        penetration: btScalar,
        combinedFrictionCoeff: btScalar,
        combinedRestitutionCoeff: btScalar,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver31setupMultiBodyContactConstraintER27btMultiBodySolverConstraintRK9btVector3R15btManifoldPointRK19btContactSolverInfoRfbff"]
    pub fn btMultiBodyConstraintSolver_setupMultiBodyContactConstraint(
        this: *mut btMultiBodyConstraintSolver,
        solverConstraint: *mut btMultiBodySolverConstraint,
        contactNormal: *const btVector3,
        cp: *mut btManifoldPoint,
        infoGlobal: *const btContactSolverInfo,
        relaxation: *mut btScalar,
        isFriction: bool,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver41setupMultiBodyTorsionalFrictionConstraintER27btMultiBodySolverConstraintRK9btVector3R15btManifoldPointfRK19btContactSolverInfoRfbff"]
    pub fn btMultiBodyConstraintSolver_setupMultiBodyTorsionalFrictionConstraint(
        this: *mut btMultiBodyConstraintSolver,
        solverConstraint: *mut btMultiBodySolverConstraint,
        contactNormal: *const btVector3,
        cp: *mut btManifoldPoint,
        combinedTorsionalFriction: btScalar,
        infoGlobal: *const btContactSolverInfo,
        relaxation: *mut btScalar,
        isFriction: bool,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver23convertMultiBodyContactEP20btPersistentManifoldRK19btContactSolverInfo"]
    pub fn btMultiBodyConstraintSolver_convertMultiBodyContact(
        this: *mut btMultiBodyConstraintSolver,
        manifold: *mut btPersistentManifold,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver13applyDeltaVeeEPffii"]
    pub fn btMultiBodyConstraintSolver_applyDeltaVee(
        this: *mut btMultiBodyConstraintSolver,
        deltaV: *mut btScalar,
        impulse: btScalar,
        velocityIndex: ::std::os::raw::c_int,
        ndof: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver30writeBackSolverBodyToMultiBodyER27btMultiBodySolverConstraintf"]
    pub fn btMultiBodyConstraintSolver_writeBackSolverBodyToMultiBody(
        this: *mut btMultiBodyConstraintSolver,
        constraint: *mut btMultiBodySolverConstraint,
        deltaTime: btScalar,
    );
}
impl btMultiBodyConstraintSolver {
    #[inline]
    pub unsafe fn resolveSingleConstraintRowGeneric(
        &mut self,
        c: *const btMultiBodySolverConstraint,
    ) -> btScalar {
        btMultiBodyConstraintSolver_resolveSingleConstraintRowGeneric(self, c)
    }
    #[inline]
    pub unsafe fn resolveConeFrictionConstraintRows(
        &mut self,
        cA1: *const btMultiBodySolverConstraint,
        cB: *const btMultiBodySolverConstraint,
    ) -> btScalar {
        btMultiBodyConstraintSolver_resolveConeFrictionConstraintRows(self, cA1, cB)
    }
    #[inline]
    pub unsafe fn addMultiBodyFrictionConstraint(
        &mut self,
        normalAxis: *const btVector3,
        manifold: *mut btPersistentManifold,
        frictionIndex: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        colObj0: *mut btCollisionObject,
        colObj1: *mut btCollisionObject,
        relaxation: btScalar,
        infoGlobal: *const btContactSolverInfo,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    ) -> *mut btMultiBodySolverConstraint {
        btMultiBodyConstraintSolver_addMultiBodyFrictionConstraint(
            self,
            normalAxis,
            manifold,
            frictionIndex,
            cp,
            colObj0,
            colObj1,
            relaxation,
            infoGlobal,
            desiredVelocity,
            cfmSlip,
        )
    }
    #[inline]
    pub unsafe fn addMultiBodyTorsionalFrictionConstraint(
        &mut self,
        normalAxis: *const btVector3,
        manifold: *mut btPersistentManifold,
        frictionIndex: ::std::os::raw::c_int,
        cp: *mut btManifoldPoint,
        combinedTorsionalFriction: btScalar,
        colObj0: *mut btCollisionObject,
        colObj1: *mut btCollisionObject,
        relaxation: btScalar,
        infoGlobal: *const btContactSolverInfo,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    ) -> *mut btMultiBodySolverConstraint {
        btMultiBodyConstraintSolver_addMultiBodyTorsionalFrictionConstraint(
            self,
            normalAxis,
            manifold,
            frictionIndex,
            cp,
            combinedTorsionalFriction,
            colObj0,
            colObj1,
            relaxation,
            infoGlobal,
            desiredVelocity,
            cfmSlip,
        )
    }
    #[inline]
    pub unsafe fn setupMultiBodyJointLimitConstraint(
        &mut self,
        constraintRow: *mut btMultiBodySolverConstraint,
        jacA: *mut btScalar,
        jacB: *mut btScalar,
        penetration: btScalar,
        combinedFrictionCoeff: btScalar,
        combinedRestitutionCoeff: btScalar,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btMultiBodyConstraintSolver_setupMultiBodyJointLimitConstraint(
            self,
            constraintRow,
            jacA,
            jacB,
            penetration,
            combinedFrictionCoeff,
            combinedRestitutionCoeff,
            infoGlobal,
        )
    }
    #[inline]
    pub unsafe fn setupMultiBodyContactConstraint(
        &mut self,
        solverConstraint: *mut btMultiBodySolverConstraint,
        contactNormal: *const btVector3,
        cp: *mut btManifoldPoint,
        infoGlobal: *const btContactSolverInfo,
        relaxation: *mut btScalar,
        isFriction: bool,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    ) {
        btMultiBodyConstraintSolver_setupMultiBodyContactConstraint(
            self,
            solverConstraint,
            contactNormal,
            cp,
            infoGlobal,
            relaxation,
            isFriction,
            desiredVelocity,
            cfmSlip,
        )
    }
    #[inline]
    pub unsafe fn setupMultiBodyTorsionalFrictionConstraint(
        &mut self,
        solverConstraint: *mut btMultiBodySolverConstraint,
        contactNormal: *const btVector3,
        cp: *mut btManifoldPoint,
        combinedTorsionalFriction: btScalar,
        infoGlobal: *const btContactSolverInfo,
        relaxation: *mut btScalar,
        isFriction: bool,
        desiredVelocity: btScalar,
        cfmSlip: btScalar,
    ) {
        btMultiBodyConstraintSolver_setupMultiBodyTorsionalFrictionConstraint(
            self,
            solverConstraint,
            contactNormal,
            cp,
            combinedTorsionalFriction,
            infoGlobal,
            relaxation,
            isFriction,
            desiredVelocity,
            cfmSlip,
        )
    }
    #[inline]
    pub unsafe fn convertMultiBodyContact(
        &mut self,
        manifold: *mut btPersistentManifold,
        infoGlobal: *const btContactSolverInfo,
    ) {
        btMultiBodyConstraintSolver_convertMultiBodyContact(self, manifold, infoGlobal)
    }
    #[inline]
    pub unsafe fn applyDeltaVee(
        &mut self,
        deltaV: *mut btScalar,
        impulse: btScalar,
        velocityIndex: ::std::os::raw::c_int,
        ndof: ::std::os::raw::c_int,
    ) {
        btMultiBodyConstraintSolver_applyDeltaVee(self, deltaV, impulse, velocityIndex, ndof)
    }
    #[inline]
    pub unsafe fn writeBackSolverBodyToMultiBody(
        &mut self,
        constraint: *mut btMultiBodySolverConstraint,
        deltaTime: btScalar,
    ) {
        btMultiBodyConstraintSolver_writeBackSolverBodyToMultiBody(self, constraint, deltaTime)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver15convertContactsEPP20btPersistentManifoldiRK19btContactSolverInfo"]
    pub fn btMultiBodyConstraintSolver_convertContacts(
        this: *mut ::std::os::raw::c_void,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver28solveGroupCacheFriendlySetupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw"]
    pub fn btMultiBodyConstraintSolver_solveGroupCacheFriendlySetup(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver20solveSingleIterationEiPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw"]
    pub fn btMultiBodyConstraintSolver_solveSingleIteration(
        this: *mut ::std::os::raw::c_void,
        iteration: ::std::os::raw::c_int,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
    ) -> btScalar;
}
extern "C" {
    /// this method should not be called, it was just used during porting/integration of Featherstone btMultiBody, providing backwards compatibility but no support for btMultiBodyConstraint (only contact constraints)
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver10solveGroupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btDispatcher"]
    pub fn btMultiBodyConstraintSolver_solveGroup(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifold: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        info: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
        dispatcher: *mut btDispatcher,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver29solveGroupCacheFriendlyFinishEPP17btCollisionObjectiRK19btContactSolverInfo"]
    pub fn btMultiBodyConstraintSolver_solveGroupCacheFriendlyFinish(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodyConstraintSolver19solveMultiBodyGroupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiPP21btMultiBodyConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btDispatcher"]
    pub fn btMultiBodyConstraintSolver_solveMultiBodyGroup(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifold: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        multiBodyConstraints: *mut *mut btMultiBodyConstraint,
        numMultiBodyConstraints: ::std::os::raw::c_int,
        info: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
        dispatcher: *mut btDispatcher,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btMultiBodyFixedConstraint {
    pub _base: btMultiBodyConstraint,
    pub m_rigidBodyA: *mut btRigidBody,
    pub m_rigidBodyB: *mut btRigidBody,
    pub m_pivotInA: btVector3,
    pub m_pivotInB: btVector3,
    pub m_frameInA: btMatrix3x3,
    pub m_frameInB: btMatrix3x3,
}
extern "C" {
    #[link_name = "\u{1}_ZN26btMultiBodyFixedConstraintC1EP11btMultiBodyiP11btRigidBodyRK9btVector3S6_RK11btMatrix3x3S9_"]
    pub fn btMultiBodyFixedConstraint_btMultiBodyFixedConstraint(
        this: *mut btMultiBodyFixedConstraint,
        body: *mut btMultiBody,
        link: ::std::os::raw::c_int,
        bodyB: *mut btRigidBody,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
        frameInA: *const btMatrix3x3,
        frameInB: *const btMatrix3x3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN26btMultiBodyFixedConstraintC1EP11btMultiBodyiS1_iRK9btVector3S4_RK11btMatrix3x3S7_"]
    pub fn btMultiBodyFixedConstraint_btMultiBodyFixedConstraint1(
        this: *mut btMultiBodyFixedConstraint,
        bodyA: *mut btMultiBody,
        linkA: ::std::os::raw::c_int,
        bodyB: *mut btMultiBody,
        linkB: ::std::os::raw::c_int,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
        frameInA: *const btMatrix3x3,
        frameInB: *const btMatrix3x3,
    );
}
impl btMultiBodyFixedConstraint {
    #[inline]
    pub unsafe fn new(
        body: *mut btMultiBody,
        link: ::std::os::raw::c_int,
        bodyB: *mut btRigidBody,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
        frameInA: *const btMatrix3x3,
        frameInB: *const btMatrix3x3,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMultiBodyFixedConstraint_btMultiBodyFixedConstraint(
            &mut __bindgen_tmp,
            body,
            link,
            bodyB,
            pivotInA,
            pivotInB,
            frameInA,
            frameInB,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        bodyA: *mut btMultiBody,
        linkA: ::std::os::raw::c_int,
        bodyB: *mut btMultiBody,
        linkB: ::std::os::raw::c_int,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
        frameInA: *const btMatrix3x3,
        frameInB: *const btMatrix3x3,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMultiBodyFixedConstraint_btMultiBodyFixedConstraint1(
            &mut __bindgen_tmp,
            bodyA,
            linkA,
            bodyB,
            linkB,
            pivotInA,
            pivotInB,
            frameInA,
            frameInB,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN26btMultiBodyFixedConstraintD1Ev"]
    pub fn btMultiBodyFixedConstraint_btMultiBodyFixedConstraint_destructor(
        this: *mut btMultiBodyFixedConstraint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN26btMultiBodyFixedConstraint16finalizeMultiDofEv"]
    pub fn btMultiBodyFixedConstraint_finalizeMultiDof(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK26btMultiBodyFixedConstraint12getIslandIdAEv"]
    pub fn btMultiBodyFixedConstraint_getIslandIdA(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK26btMultiBodyFixedConstraint12getIslandIdBEv"]
    pub fn btMultiBodyFixedConstraint_getIslandIdB(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN26btMultiBodyFixedConstraint20createConstraintRowsER20btAlignedObjectArrayI27btMultiBodySolverConstraintER23btMultiBodyJacobianDataRK19btContactSolverInfo"]
    pub fn btMultiBodyFixedConstraint_createConstraintRows(
        this: *mut ::std::os::raw::c_void,
        constraintRows: *mut btMultiBodyConstraintArray,
        data: *mut btMultiBodyJacobianData,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN26btMultiBodyFixedConstraint9debugDrawEP12btIDebugDraw"]
    pub fn btMultiBodyFixedConstraint_debugDraw(
        this: *mut ::std::os::raw::c_void,
        drawer: *mut btIDebugDraw,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btMultiBodyGearConstraint {
    pub _base: btMultiBodyConstraint,
    pub m_rigidBodyA: *mut btRigidBody,
    pub m_rigidBodyB: *mut btRigidBody,
    pub m_pivotInA: btVector3,
    pub m_pivotInB: btVector3,
    pub m_frameInA: btMatrix3x3,
    pub m_frameInB: btMatrix3x3,
    pub m_gearRatio: btScalar,
    pub m_gearAuxLink: ::std::os::raw::c_int,
    pub m_erp: btScalar,
    pub m_relativePositionTarget: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZN25btMultiBodyGearConstraintC1EP11btMultiBodyiS1_iRK9btVector3S4_RK11btMatrix3x3S7_"]
    pub fn btMultiBodyGearConstraint_btMultiBodyGearConstraint(
        this: *mut btMultiBodyGearConstraint,
        bodyA: *mut btMultiBody,
        linkA: ::std::os::raw::c_int,
        bodyB: *mut btMultiBody,
        linkB: ::std::os::raw::c_int,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
        frameInA: *const btMatrix3x3,
        frameInB: *const btMatrix3x3,
    );
}
impl btMultiBodyGearConstraint {
    #[inline]
    pub unsafe fn new(
        bodyA: *mut btMultiBody,
        linkA: ::std::os::raw::c_int,
        bodyB: *mut btMultiBody,
        linkB: ::std::os::raw::c_int,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
        frameInA: *const btMatrix3x3,
        frameInB: *const btMatrix3x3,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMultiBodyGearConstraint_btMultiBodyGearConstraint(
            &mut __bindgen_tmp,
            bodyA,
            linkA,
            bodyB,
            linkB,
            pivotInA,
            pivotInB,
            frameInA,
            frameInB,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN25btMultiBodyGearConstraintD1Ev"]
    pub fn btMultiBodyGearConstraint_btMultiBodyGearConstraint_destructor(
        this: *mut btMultiBodyGearConstraint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25btMultiBodyGearConstraint16finalizeMultiDofEv"]
    pub fn btMultiBodyGearConstraint_finalizeMultiDof(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btMultiBodyGearConstraint12getIslandIdAEv"]
    pub fn btMultiBodyGearConstraint_getIslandIdA(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btMultiBodyGearConstraint12getIslandIdBEv"]
    pub fn btMultiBodyGearConstraint_getIslandIdB(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN25btMultiBodyGearConstraint20createConstraintRowsER20btAlignedObjectArrayI27btMultiBodySolverConstraintER23btMultiBodyJacobianDataRK19btContactSolverInfo"]
    pub fn btMultiBodyGearConstraint_createConstraintRows(
        this: *mut ::std::os::raw::c_void,
        constraintRows: *mut btMultiBodyConstraintArray,
        data: *mut btMultiBodyJacobianData,
        infoGlobal: *const btContactSolverInfo,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMultiBodyJointFeedback {
    pub m_reactionForces: btSpatialForceVector,
}
#[repr(C)]
#[derive(Debug)]
pub struct btMultiBodyJointLimitConstraint {
    pub _base: btMultiBodyConstraint,
    pub m_lowerBound: btScalar,
    pub m_upperBound: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZN31btMultiBodyJointLimitConstraintC1EP11btMultiBodyiff"]
    pub fn btMultiBodyJointLimitConstraint_btMultiBodyJointLimitConstraint(
        this: *mut btMultiBodyJointLimitConstraint,
        body: *mut btMultiBody,
        link: ::std::os::raw::c_int,
        lower: btScalar,
        upper: btScalar,
    );
}
impl btMultiBodyJointLimitConstraint {
    #[inline]
    pub unsafe fn new(
        body: *mut btMultiBody,
        link: ::std::os::raw::c_int,
        lower: btScalar,
        upper: btScalar,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMultiBodyJointLimitConstraint_btMultiBodyJointLimitConstraint(
            &mut __bindgen_tmp,
            body,
            link,
            lower,
            upper,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN31btMultiBodyJointLimitConstraintD1Ev"]
    pub fn btMultiBodyJointLimitConstraint_btMultiBodyJointLimitConstraint_destructor(
        this: *mut btMultiBodyJointLimitConstraint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN31btMultiBodyJointLimitConstraint16finalizeMultiDofEv"]
    pub fn btMultiBodyJointLimitConstraint_finalizeMultiDof(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK31btMultiBodyJointLimitConstraint12getIslandIdAEv"]
    pub fn btMultiBodyJointLimitConstraint_getIslandIdA(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK31btMultiBodyJointLimitConstraint12getIslandIdBEv"]
    pub fn btMultiBodyJointLimitConstraint_getIslandIdB(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN31btMultiBodyJointLimitConstraint20createConstraintRowsER20btAlignedObjectArrayI27btMultiBodySolverConstraintER23btMultiBodyJacobianDataRK19btContactSolverInfo"]
    pub fn btMultiBodyJointLimitConstraint_createConstraintRows(
        this: *mut ::std::os::raw::c_void,
        constraintRows: *mut btMultiBodyConstraintArray,
        data: *mut btMultiBodyJacobianData,
        infoGlobal: *const btContactSolverInfo,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btMultiBodyJointMotor {
    pub _base: btMultiBodyConstraint,
    pub m_desiredVelocity: btScalar,
    pub m_desiredPosition: btScalar,
    pub m_kd: btScalar,
    pub m_kp: btScalar,
    pub m_erp: btScalar,
    pub m_rhsClamp: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZN21btMultiBodyJointMotorC1EP11btMultiBodyiff"]
    pub fn btMultiBodyJointMotor_btMultiBodyJointMotor(
        this: *mut btMultiBodyJointMotor,
        body: *mut btMultiBody,
        link: ::std::os::raw::c_int,
        desiredVelocity: btScalar,
        maxMotorImpulse: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btMultiBodyJointMotorC1EP11btMultiBodyiiff"]
    pub fn btMultiBodyJointMotor_btMultiBodyJointMotor1(
        this: *mut btMultiBodyJointMotor,
        body: *mut btMultiBody,
        link: ::std::os::raw::c_int,
        linkDoF: ::std::os::raw::c_int,
        desiredVelocity: btScalar,
        maxMotorImpulse: btScalar,
    );
}
impl btMultiBodyJointMotor {
    #[inline]
    pub unsafe fn new(
        body: *mut btMultiBody,
        link: ::std::os::raw::c_int,
        desiredVelocity: btScalar,
        maxMotorImpulse: btScalar,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMultiBodyJointMotor_btMultiBodyJointMotor(
            &mut __bindgen_tmp,
            body,
            link,
            desiredVelocity,
            maxMotorImpulse,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        body: *mut btMultiBody,
        link: ::std::os::raw::c_int,
        linkDoF: ::std::os::raw::c_int,
        desiredVelocity: btScalar,
        maxMotorImpulse: btScalar,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMultiBodyJointMotor_btMultiBodyJointMotor1(
            &mut __bindgen_tmp,
            body,
            link,
            linkDoF,
            desiredVelocity,
            maxMotorImpulse,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN21btMultiBodyJointMotorD1Ev"]
    pub fn btMultiBodyJointMotor_btMultiBodyJointMotor_destructor(this: *mut btMultiBodyJointMotor);
}
extern "C" {
    #[link_name = "\u{1}_ZN21btMultiBodyJointMotor16finalizeMultiDofEv"]
    pub fn btMultiBodyJointMotor_finalizeMultiDof(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btMultiBodyJointMotor12getIslandIdAEv"]
    pub fn btMultiBodyJointMotor_getIslandIdA(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btMultiBodyJointMotor12getIslandIdBEv"]
    pub fn btMultiBodyJointMotor_getIslandIdB(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN21btMultiBodyJointMotor20createConstraintRowsER20btAlignedObjectArrayI27btMultiBodySolverConstraintER23btMultiBodyJacobianDataRK19btContactSolverInfo"]
    pub fn btMultiBodyJointMotor_createConstraintRows(
        this: *mut ::std::os::raw::c_void,
        constraintRows: *mut btMultiBodyConstraintArray,
        data: *mut btMultiBodyJacobianData,
        infoGlobal: *const btContactSolverInfo,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btMultiBodyLinkCollider {
    pub _base: btCollisionObject,
    pub m_multiBody: *mut btMultiBody,
    pub m_link: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btMultiBodyLinkCollider28calculateSerializeBufferSizeEv"]
    pub fn btMultiBodyLinkCollider_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK23btMultiBodyLinkCollider9serializeEPvP12btSerializer"]
    pub fn btMultiBodyLinkCollider_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMultiBodyLinkColliderFloatData {
    pub m_colObjData: btCollisionObjectFloatData,
    pub m_multiBody: *mut btMultiBodyFloatData,
    pub m_link: ::std::os::raw::c_int,
    pub m_padding: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMultiBodyLinkColliderDoubleData {
    pub m_colObjData: btCollisionObjectDoubleData,
    pub m_multiBody: *mut btMultiBodyDoubleData,
    pub m_link: ::std::os::raw::c_int,
    pub m_padding: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct btMultiBodyPoint2Point {
    pub _base: btMultiBodyConstraint,
    pub m_rigidBodyA: *mut btRigidBody,
    pub m_rigidBodyB: *mut btRigidBody,
    pub m_pivotInA: btVector3,
    pub m_pivotInB: btVector3,
}
extern "C" {
    #[link_name = "\u{1}_ZN22btMultiBodyPoint2PointC1EP11btMultiBodyiP11btRigidBodyRK9btVector3S6_"]
    pub fn btMultiBodyPoint2Point_btMultiBodyPoint2Point(
        this: *mut btMultiBodyPoint2Point,
        body: *mut btMultiBody,
        link: ::std::os::raw::c_int,
        bodyB: *mut btRigidBody,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN22btMultiBodyPoint2PointC1EP11btMultiBodyiS1_iRK9btVector3S4_"]
    pub fn btMultiBodyPoint2Point_btMultiBodyPoint2Point1(
        this: *mut btMultiBodyPoint2Point,
        bodyA: *mut btMultiBody,
        linkA: ::std::os::raw::c_int,
        bodyB: *mut btMultiBody,
        linkB: ::std::os::raw::c_int,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
    );
}
impl btMultiBodyPoint2Point {
    #[inline]
    pub unsafe fn new(
        body: *mut btMultiBody,
        link: ::std::os::raw::c_int,
        bodyB: *mut btRigidBody,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMultiBodyPoint2Point_btMultiBodyPoint2Point(
            &mut __bindgen_tmp,
            body,
            link,
            bodyB,
            pivotInA,
            pivotInB,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        bodyA: *mut btMultiBody,
        linkA: ::std::os::raw::c_int,
        bodyB: *mut btMultiBody,
        linkB: ::std::os::raw::c_int,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMultiBodyPoint2Point_btMultiBodyPoint2Point1(
            &mut __bindgen_tmp,
            bodyA,
            linkA,
            bodyB,
            linkB,
            pivotInA,
            pivotInB,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN22btMultiBodyPoint2PointD1Ev"]
    pub fn btMultiBodyPoint2Point_btMultiBodyPoint2Point_destructor(
        this: *mut btMultiBodyPoint2Point,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN22btMultiBodyPoint2Point16finalizeMultiDofEv"]
    pub fn btMultiBodyPoint2Point_finalizeMultiDof(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK22btMultiBodyPoint2Point12getIslandIdAEv"]
    pub fn btMultiBodyPoint2Point_getIslandIdA(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK22btMultiBodyPoint2Point12getIslandIdBEv"]
    pub fn btMultiBodyPoint2Point_getIslandIdB(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN22btMultiBodyPoint2Point20createConstraintRowsER20btAlignedObjectArrayI27btMultiBodySolverConstraintER23btMultiBodyJacobianDataRK19btContactSolverInfo"]
    pub fn btMultiBodyPoint2Point_createConstraintRows(
        this: *mut ::std::os::raw::c_void,
        constraintRows: *mut btMultiBodyConstraintArray,
        data: *mut btMultiBodyJacobianData,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN22btMultiBodyPoint2Point9debugDrawEP12btIDebugDraw"]
    pub fn btMultiBodyPoint2Point_debugDraw(
        this: *mut ::std::os::raw::c_void,
        drawer: *mut btIDebugDraw,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btMultiBodySliderConstraint {
    pub _base: btMultiBodyConstraint,
    pub m_rigidBodyA: *mut btRigidBody,
    pub m_rigidBodyB: *mut btRigidBody,
    pub m_pivotInA: btVector3,
    pub m_pivotInB: btVector3,
    pub m_frameInA: btMatrix3x3,
    pub m_frameInB: btMatrix3x3,
    pub m_jointAxis: btVector3,
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodySliderConstraintC1EP11btMultiBodyiP11btRigidBodyRK9btVector3S6_RK11btMatrix3x3S9_S6_"]
    pub fn btMultiBodySliderConstraint_btMultiBodySliderConstraint(
        this: *mut btMultiBodySliderConstraint,
        body: *mut btMultiBody,
        link: ::std::os::raw::c_int,
        bodyB: *mut btRigidBody,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
        frameInA: *const btMatrix3x3,
        frameInB: *const btMatrix3x3,
        jointAxis: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodySliderConstraintC1EP11btMultiBodyiS1_iRK9btVector3S4_RK11btMatrix3x3S7_S4_"]
    pub fn btMultiBodySliderConstraint_btMultiBodySliderConstraint1(
        this: *mut btMultiBodySliderConstraint,
        bodyA: *mut btMultiBody,
        linkA: ::std::os::raw::c_int,
        bodyB: *mut btMultiBody,
        linkB: ::std::os::raw::c_int,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
        frameInA: *const btMatrix3x3,
        frameInB: *const btMatrix3x3,
        jointAxis: *const btVector3,
    );
}
impl btMultiBodySliderConstraint {
    #[inline]
    pub unsafe fn new(
        body: *mut btMultiBody,
        link: ::std::os::raw::c_int,
        bodyB: *mut btRigidBody,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
        frameInA: *const btMatrix3x3,
        frameInB: *const btMatrix3x3,
        jointAxis: *const btVector3,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMultiBodySliderConstraint_btMultiBodySliderConstraint(
            &mut __bindgen_tmp,
            body,
            link,
            bodyB,
            pivotInA,
            pivotInB,
            frameInA,
            frameInB,
            jointAxis,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        bodyA: *mut btMultiBody,
        linkA: ::std::os::raw::c_int,
        bodyB: *mut btMultiBody,
        linkB: ::std::os::raw::c_int,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
        frameInA: *const btMatrix3x3,
        frameInB: *const btMatrix3x3,
        jointAxis: *const btVector3,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMultiBodySliderConstraint_btMultiBodySliderConstraint1(
            &mut __bindgen_tmp,
            bodyA,
            linkA,
            bodyB,
            linkB,
            pivotInA,
            pivotInB,
            frameInA,
            frameInB,
            jointAxis,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodySliderConstraintD1Ev"]
    pub fn btMultiBodySliderConstraint_btMultiBodySliderConstraint_destructor(
        this: *mut btMultiBodySliderConstraint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodySliderConstraint16finalizeMultiDofEv"]
    pub fn btMultiBodySliderConstraint_finalizeMultiDof(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK27btMultiBodySliderConstraint12getIslandIdAEv"]
    pub fn btMultiBodySliderConstraint_getIslandIdA(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK27btMultiBodySliderConstraint12getIslandIdBEv"]
    pub fn btMultiBodySliderConstraint_getIslandIdB(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodySliderConstraint20createConstraintRowsER20btAlignedObjectArrayI27btMultiBodySolverConstraintER23btMultiBodyJacobianDataRK19btContactSolverInfo"]
    pub fn btMultiBodySliderConstraint_createConstraintRows(
        this: *mut ::std::os::raw::c_void,
        constraintRows: *mut btMultiBodyConstraintArray,
        data: *mut btMultiBodyJacobianData,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27btMultiBodySliderConstraint9debugDrawEP12btIDebugDraw"]
    pub fn btMultiBodySliderConstraint_debugDraw(
        this: *mut ::std::os::raw::c_void,
        drawer: *mut btIDebugDraw,
    );
}
/// The btClock is a portable basic clock that measures accurate time in seconds, use for profiling.
#[repr(C)]
#[derive(Debug)]
pub struct btClock {
    pub m_data: *mut btClockData,
}
extern "C" {
    /// Resets the initial reference time.
    #[link_name = "\u{1}_ZN7btClock5resetEv"]
    pub fn btClock_reset(this: *mut btClock);
}
extern "C" {
    /// Returns the time in ms since the last call to reset or since
    /// /// the btClock was created.
    #[link_name = "\u{1}_ZN7btClock19getTimeMillisecondsEv"]
    pub fn btClock_getTimeMilliseconds(this: *mut btClock) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    /// Returns the time in us since the last call to reset or since
    /// /// the Clock was created.
    #[link_name = "\u{1}_ZN7btClock19getTimeMicrosecondsEv"]
    pub fn btClock_getTimeMicroseconds(this: *mut btClock) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    #[link_name = "\u{1}_ZN7btClock18getTimeNanosecondsEv"]
    pub fn btClock_getTimeNanoseconds(this: *mut btClock) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    /// Returns the time in s since the last call to reset or since
    /// /// the Clock was created.
    #[link_name = "\u{1}_ZN7btClock14getTimeSecondsEv"]
    pub fn btClock_getTimeSeconds(this: *mut btClock) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN7btClockC1Ev"]
    pub fn btClock_btClock(this: *mut btClock);
}
extern "C" {
    #[link_name = "\u{1}_ZN7btClockC1ERKS_"]
    pub fn btClock_btClock1(this: *mut btClock, other: *const btClock);
}
extern "C" {
    #[link_name = "\u{1}_ZN7btClockD1Ev"]
    pub fn btClock_btClock_destructor(this: *mut btClock);
}
impl btClock {
    #[inline]
    pub unsafe fn reset(&mut self) {
        btClock_reset(self)
    }
    #[inline]
    pub unsafe fn getTimeMilliseconds(&mut self) -> ::std::os::raw::c_ulonglong {
        btClock_getTimeMilliseconds(self)
    }
    #[inline]
    pub unsafe fn getTimeMicroseconds(&mut self) -> ::std::os::raw::c_ulonglong {
        btClock_getTimeMicroseconds(self)
    }
    #[inline]
    pub unsafe fn getTimeNanoseconds(&mut self) -> ::std::os::raw::c_ulonglong {
        btClock_getTimeNanoseconds(self)
    }
    #[inline]
    pub unsafe fn getTimeSeconds(&mut self) -> btScalar {
        btClock_getTimeSeconds(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btClock_btClock(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(other: *const btClock) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btClock_btClock1(&mut __bindgen_tmp, other);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        btClock_btClock_destructor(self)
    }
}
pub type btEnterProfileZoneFunc =
    ::std::option::Option<unsafe extern "C" fn(msg: *const ::std::os::raw::c_char)>;
pub type btLeaveProfileZoneFunc = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}_Z32btGetCurrentEnterProfileZoneFuncv"]
    pub fn btGetCurrentEnterProfileZoneFunc() -> btEnterProfileZoneFunc;
}
extern "C" {
    #[link_name = "\u{1}_Z32btGetCurrentLeaveProfileZoneFuncv"]
    pub fn btGetCurrentLeaveProfileZoneFunc() -> btLeaveProfileZoneFunc;
}
extern "C" {
    #[link_name = "\u{1}_Z31btSetCustomEnterProfileZoneFuncPFvPKcE"]
    pub fn btSetCustomEnterProfileZoneFunc(enterFunc: btEnterProfileZoneFunc);
}
extern "C" {
    #[link_name = "\u{1}_Z31btSetCustomLeaveProfileZoneFuncPFvvE"]
    pub fn btSetCustomLeaveProfileZoneFunc(leaveFunc: btLeaveProfileZoneFunc);
}
extern "C" {
    #[link_name = "\u{1}_Z33btQuickprofGetCurrentThreadIndex2v"]
    pub fn btQuickprofGetCurrentThreadIndex2() -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btIntSortPredicate {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct btVectorX<T> {
    pub m_storage: btAlignedObjectArray<T>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct btMatrixX<T> {
    pub m_rows: ::std::os::raw::c_int,
    pub m_cols: ::std::os::raw::c_int,
    pub m_operations: ::std::os::raw::c_int,
    pub m_resizeOperations: ::std::os::raw::c_int,
    pub m_setElemOperations: ::std::os::raw::c_int,
    pub m_storage: btAlignedObjectArray<T>,
    pub m_rowNonZeroElements1: btAlignedObjectArray<btAlignedObjectArray<::std::os::raw::c_int>>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
pub type btMatrixXf = btMatrixX<f32>;
pub type btVectorXf = btVectorX<f32>;
pub type btMatrixXd = btMatrixX<f64>;
pub type btVectorXd = btVectorX<f64>;
#[repr(C)]
pub struct btMLCPSolverInterface__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btMLCPSolverInterface {
    pub vtable_: *const btMLCPSolverInterface__bindgen_vtable,
}
#[repr(C)]
#[derive(Debug)]
pub struct btDantzigScratchMemory {
    pub m_scratch: btAlignedObjectArray<btScalar>,
    pub L: btAlignedObjectArray<btScalar>,
    pub d: btAlignedObjectArray<btScalar>,
    pub delta_w: btAlignedObjectArray<btScalar>,
    pub delta_x: btAlignedObjectArray<btScalar>,
    pub Dell: btAlignedObjectArray<btScalar>,
    pub ell: btAlignedObjectArray<btScalar>,
    pub Arows: btAlignedObjectArray<*mut btScalar>,
    pub p: btAlignedObjectArray<::std::os::raw::c_int>,
    pub C: btAlignedObjectArray<::std::os::raw::c_int>,
    pub state: btAlignedObjectArray<bool>,
}
extern "C" {
    #[link_name = "\u{1}_Z17btSolveDantzigLCPiPfS_S_S_iS_S_PiR22btDantzigScratchMemory"]
    pub fn btSolveDantzigLCP(
        n: ::std::os::raw::c_int,
        A: *mut btScalar,
        x: *mut btScalar,
        b: *mut btScalar,
        w: *mut btScalar,
        nub: ::std::os::raw::c_int,
        lo: *mut btScalar,
        hi: *mut btScalar,
        findex: *mut ::std::os::raw::c_int,
        scratch: *mut btDantzigScratchMemory,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct btDantzigSolver {
    pub _base: btMLCPSolverInterface,
    pub m_acceptableUpperLimitSolution: btScalar,
    pub m_tempBuffer: btAlignedObjectArray<::std::os::raw::c_char>,
    pub m_A: btAlignedObjectArray<btScalar>,
    pub m_b: btAlignedObjectArray<btScalar>,
    pub m_x: btAlignedObjectArray<btScalar>,
    pub m_lo: btAlignedObjectArray<btScalar>,
    pub m_hi: btAlignedObjectArray<btScalar>,
    pub m_dependencies: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_scratchMemory: btDantzigScratchMemory,
}
#[repr(C)]
pub struct btLemkeAlgorithm__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btLemkeAlgorithm {
    pub vtable_: *const btLemkeAlgorithm__bindgen_vtable,
    pub m_M: btMatrixXf,
    pub m_q: btVectorXf,
    /// \brief number of steps until the Lemke algorithm found a solution
    pub steps: ::std::os::raw::c_uint,
    /// \brief define level of debug output
    pub DEBUGLEVEL: ::std::os::raw::c_int,
    /// \brief did the algorithm find a solution
    ///
    /// -1 : not successful
    /// 0 : successful
    pub info: ::std::os::raw::c_int,
}
extern "C" {
    /// \brief solve algorithm adapted from : Fast Implementation of Lemke’s Algorithm for Rigid Body Contact Simulation (John E. Lloyd)
    #[link_name = "\u{1}_ZN16btLemkeAlgorithm5solveEj"]
    pub fn btLemkeAlgorithm_solve(
        this: *mut btLemkeAlgorithm,
        maxloops: ::std::os::raw::c_uint,
    ) -> btVectorXf;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btLemkeAlgorithm24findLexicographicMinimumERK9btMatrixXIfERKi"]
    pub fn btLemkeAlgorithm_findLexicographicMinimum(
        this: *mut btLemkeAlgorithm,
        A: *const btMatrixXf,
        pivotColIndex: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btLemkeAlgorithm21LexicographicPositiveERK9btVectorXIfE"]
    pub fn btLemkeAlgorithm_LexicographicPositive(
        this: *mut btLemkeAlgorithm,
        v: *const btVectorXf,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btLemkeAlgorithm26GaussJordanEliminationStepER9btMatrixXIfEiiRK20btAlignedObjectArrayIiE"]
    pub fn btLemkeAlgorithm_GaussJordanEliminationStep(
        this: *mut btLemkeAlgorithm,
        A: *mut btMatrixXf,
        pivotRowIndex: ::std::os::raw::c_int,
        pivotColumnIndex: ::std::os::raw::c_int,
        basis: *const btAlignedObjectArray<::std::os::raw::c_int>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btLemkeAlgorithm11greaterZeroERK9btVectorXIfE"]
    pub fn btLemkeAlgorithm_greaterZero(
        this: *mut btLemkeAlgorithm,
        vector: *const btVectorXf,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btLemkeAlgorithm10validBasisERK20btAlignedObjectArrayIiE"]
    pub fn btLemkeAlgorithm_validBasis(
        this: *mut btLemkeAlgorithm,
        basis: *const btAlignedObjectArray<::std::os::raw::c_int>,
    ) -> bool;
}
impl btLemkeAlgorithm {
    #[inline]
    pub unsafe fn solve(&mut self, maxloops: ::std::os::raw::c_uint) -> btVectorXf {
        btLemkeAlgorithm_solve(self, maxloops)
    }
    #[inline]
    pub unsafe fn findLexicographicMinimum(
        &mut self,
        A: *const btMatrixXf,
        pivotColIndex: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        btLemkeAlgorithm_findLexicographicMinimum(self, A, pivotColIndex)
    }
    #[inline]
    pub unsafe fn LexicographicPositive(&mut self, v: *const btVectorXf) -> bool {
        btLemkeAlgorithm_LexicographicPositive(self, v)
    }
    #[inline]
    pub unsafe fn GaussJordanEliminationStep(
        &mut self,
        A: *mut btMatrixXf,
        pivotRowIndex: ::std::os::raw::c_int,
        pivotColumnIndex: ::std::os::raw::c_int,
        basis: *const btAlignedObjectArray<::std::os::raw::c_int>,
    ) {
        btLemkeAlgorithm_GaussJordanEliminationStep(self, A, pivotRowIndex, pivotColumnIndex, basis)
    }
    #[inline]
    pub unsafe fn greaterZero(&mut self, vector: *const btVectorXf) -> bool {
        btLemkeAlgorithm_greaterZero(self, vector)
    }
    #[inline]
    pub unsafe fn validBasis(
        &mut self,
        basis: *const btAlignedObjectArray<::std::os::raw::c_int>,
    ) -> bool {
        btLemkeAlgorithm_validBasis(self, basis)
    }
}
/// The btLemkeSolver is based on "Fast Implementation of Lemke�s Algorithm for Rigid Body Contact Simulation (John E. Lloyd) "
/// It is a slower but more accurate solver. Increase the m_maxLoops for better convergence, at the cost of more CPU time.
/// The original implementation of the btLemkeAlgorithm was done by Kilian Grundl from the MBSim team
#[repr(C)]
#[derive(Debug)]
pub struct btLemkeSolver {
    pub _base: btMLCPSolverInterface,
    pub m_maxValue: btScalar,
    pub m_debugLevel: ::std::os::raw::c_int,
    pub m_maxLoops: ::std::os::raw::c_int,
    pub m_useLoHighBounds: bool,
}
#[repr(C)]
pub struct btMLCPSolver {
    pub _base: btSequentialImpulseConstraintSolver,
    pub m_A: btMatrixXf,
    pub m_b: btVectorXf,
    pub m_x: btVectorXf,
    pub m_lo: btVectorXf,
    pub m_hi: btVectorXf,
    /// when using 'split impulse' we solve two separate (M)LCPs
    pub m_bSplit: btVectorXf,
    pub m_xSplit: btVectorXf,
    pub m_bSplit1: btVectorXf,
    pub m_xSplit2: btVectorXf,
    pub m_limitDependencies: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_allConstraintPtrArray: btAlignedObjectArray<*mut btSolverConstraint>,
    pub m_solver: *mut btMLCPSolverInterface,
    pub m_fallback: ::std::os::raw::c_int,
    /// The following scratch variables are not stateful -- contents are cleared prior to each use.
    /// /// They are only cached here to avoid extra memory allocations and deallocations and to ensure
    /// /// that multiple instances of the solver can be run in parallel.
    pub m_scratchJ3: btMatrixXf,
    pub m_scratchJInvM3: btMatrixXf,
    pub m_scratchOfs: btAlignedObjectArray<::std::os::raw::c_int>,
    pub m_scratchMInv: btMatrixXf,
    pub m_scratchJ: btMatrixXf,
    pub m_scratchJTranspose: btMatrixXf,
    pub m_scratchTmp: btMatrixXf,
}
extern "C" {
    #[link_name = "\u{1}_ZN12btMLCPSolverC1EP21btMLCPSolverInterface"]
    pub fn btMLCPSolver_btMLCPSolver(this: *mut btMLCPSolver, solver: *mut btMLCPSolverInterface);
}
impl btMLCPSolver {
    #[inline]
    pub unsafe fn new(solver: *mut btMLCPSolverInterface) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMLCPSolver_btMLCPSolver(&mut __bindgen_tmp, solver);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN12btMLCPSolver28solveGroupCacheFriendlySetupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw"]
    pub fn btMLCPSolver_solveGroupCacheFriendlySetup(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN12btMLCPSolver33solveGroupCacheFriendlyIterationsEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw"]
    pub fn btMLCPSolver_solveGroupCacheFriendlyIterations(
        this: *mut ::std::os::raw::c_void,
        bodies: *mut *mut btCollisionObject,
        numBodies: ::std::os::raw::c_int,
        manifoldPtr: *mut *mut btPersistentManifold,
        numManifolds: ::std::os::raw::c_int,
        constraints: *mut *mut btTypedConstraint,
        numConstraints: ::std::os::raw::c_int,
        infoGlobal: *const btContactSolverInfo,
        debugDrawer: *mut btIDebugDraw,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN12btMLCPSolver10createMLCPERK19btContactSolverInfo"]
    pub fn btMLCPSolver_createMLCP(
        this: *mut ::std::os::raw::c_void,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12btMLCPSolver14createMLCPFastERK19btContactSolverInfo"]
    pub fn btMLCPSolver_createMLCPFast(
        this: *mut ::std::os::raw::c_void,
        infoGlobal: *const btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12btMLCPSolver9solveMLCPERK19btContactSolverInfo"]
    pub fn btMLCPSolver_solveMLCP(
        this: *mut ::std::os::raw::c_void,
        infoGlobal: *const btContactSolverInfo,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12btMLCPSolverD1Ev"]
    pub fn btMLCPSolver_btMLCPSolver_destructor(this: *mut btMLCPSolver);
}
/// This solver is mainly for debug/learning purposes: it is functionally equivalent to the btSequentialImpulseConstraintSolver solver, but much slower (it builds the full LCP matrix)
#[repr(C)]
#[derive(Debug)]
pub struct btSolveProjectedGaussSeidel {
    pub _base: btMLCPSolverInterface,
    pub m_leastSquaresResidualThreshold: btScalar,
    pub m_leastSquaresResidual: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBodyTriangleData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBodyLinkData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBodyVertexData {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct btSoftBodySolver__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBodySolver {
    pub vtable_: *const btSoftBodySolver__bindgen_vtable,
    pub m_numberOfPositionIterations: ::std::os::raw::c_int,
    pub m_numberOfVelocityIterations: ::std::os::raw::c_int,
    pub m_timeScale: f32,
}
pub const btSoftBodySolver_SolverTypes_DEFAULT_SOLVER: btSoftBodySolver_SolverTypes = 0;
pub const btSoftBodySolver_SolverTypes_CPU_SOLVER: btSoftBodySolver_SolverTypes = 1;
pub const btSoftBodySolver_SolverTypes_CL_SOLVER: btSoftBodySolver_SolverTypes = 2;
pub const btSoftBodySolver_SolverTypes_CL_SIMD_SOLVER: btSoftBodySolver_SolverTypes = 3;
pub const btSoftBodySolver_SolverTypes_DX_SOLVER: btSoftBodySolver_SolverTypes = 4;
pub const btSoftBodySolver_SolverTypes_DX_SIMD_SOLVER: btSoftBodySolver_SolverTypes = 5;
pub type btSoftBodySolver_SolverTypes = u32;
#[repr(C)]
pub struct btSoftBodySolverOutput__bindgen_vtable(::std::os::raw::c_void);
/// Class to manage movement of data from a solver to a given target.
/// This version is abstract. Subclasses will have custom pairings for different combinations.
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBodySolverOutput {
    pub vtable_: *const btSoftBodySolverOutput__bindgen_vtable,
}
#[repr(C)]
pub struct btVertexBufferDescriptor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btVertexBufferDescriptor {
    pub vtable_: *const btVertexBufferDescriptor__bindgen_vtable,
    pub m_hasVertexPositions: bool,
    pub m_hasNormals: bool,
    pub m_vertexOffset: ::std::os::raw::c_int,
    pub m_vertexStride: ::std::os::raw::c_int,
    pub m_normalOffset: ::std::os::raw::c_int,
    pub m_normalStride: ::std::os::raw::c_int,
}
pub const btVertexBufferDescriptor_BufferTypes_CPU_BUFFER: btVertexBufferDescriptor_BufferTypes = 0;
pub const btVertexBufferDescriptor_BufferTypes_DX11_BUFFER: btVertexBufferDescriptor_BufferTypes =
    1;
pub const btVertexBufferDescriptor_BufferTypes_OPENGL_BUFFER: btVertexBufferDescriptor_BufferTypes =
    2;
pub type btVertexBufferDescriptor_BufferTypes = u32;
#[repr(C)]
#[derive(Debug)]
pub struct btCPUVertexBufferDescriptor {
    pub _base: btVertexBufferDescriptor,
    pub m_basePointer: *mut f32,
}
#[repr(C)]
#[derive(Debug)]
pub struct btDefaultSoftBodySolver {
    pub _base: btSoftBodySolver,
    /// Variable to define whether we need to update solver constants on the next iteration
    pub m_updateSolverConstants: bool,
    pub m_softBodySet: btAlignedObjectArray<*mut btSoftBody>,
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDefaultSoftBodySolverC1Ev"]
    pub fn btDefaultSoftBodySolver_btDefaultSoftBodySolver(this: *mut btDefaultSoftBodySolver);
}
impl btDefaultSoftBodySolver {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btDefaultSoftBodySolver_btDefaultSoftBodySolver(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDefaultSoftBodySolverD1Ev"]
    pub fn btDefaultSoftBodySolver_btDefaultSoftBodySolver_destructor(
        this: *mut btDefaultSoftBodySolver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDefaultSoftBodySolver16checkInitializedEv"]
    pub fn btDefaultSoftBodySolver_checkInitialized(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDefaultSoftBodySolver16updateSoftBodiesEv"]
    pub fn btDefaultSoftBodySolver_updateSoftBodies(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDefaultSoftBodySolver8optimizeER20btAlignedObjectArrayIP10btSoftBodyEb"]
    pub fn btDefaultSoftBodySolver_optimize(
        this: *mut ::std::os::raw::c_void,
        softBodies: *mut btAlignedObjectArray<*mut btSoftBody>,
        forceUpdate: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDefaultSoftBodySolver20copyBackToSoftBodiesEb"]
    pub fn btDefaultSoftBodySolver_copyBackToSoftBodies(
        this: *mut ::std::os::raw::c_void,
        bMove: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDefaultSoftBodySolver16solveConstraintsEf"]
    pub fn btDefaultSoftBodySolver_solveConstraints(
        this: *mut ::std::os::raw::c_void,
        solverdt: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDefaultSoftBodySolver13predictMotionEf"]
    pub fn btDefaultSoftBodySolver_predictMotion(this: *mut ::std::os::raw::c_void, solverdt: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDefaultSoftBodySolver26copySoftBodyToVertexBufferEPK10btSoftBodyP24btVertexBufferDescriptor"]
    pub fn btDefaultSoftBodySolver_copySoftBodyToVertexBuffer(
        this: *mut ::std::os::raw::c_void,
        softBody: *const btSoftBody,
        vertexBuffer: *mut btVertexBufferDescriptor,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDefaultSoftBodySolver16processCollisionEP10btSoftBodyPK24btCollisionObjectWrapper"]
    pub fn btDefaultSoftBodySolver_processCollision(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut btSoftBody,
        arg2: *const btCollisionObjectWrapper,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btDefaultSoftBodySolver16processCollisionEP10btSoftBodyS1_"]
    pub fn btDefaultSoftBodySolver_processCollision1(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut btSoftBody,
        arg2: *mut btSoftBody,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTriIndex {
    pub m_PartIdTriangleIndex: ::std::os::raw::c_int,
    pub m_childShape: *mut btCollisionShape,
}
/// For each triangle in the concave mesh that overlaps with the AABB of a soft body (m_softBody), processTriangle is called.
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBodyTriangleCallback {
    pub _base: btTriangleCallback,
    pub m_softBody: *mut btSoftBody,
    pub m_triBody: *const btCollisionObject,
    pub m_aabbMin: btVector3,
    pub m_aabbMax: btVector3,
    pub m_resultOut: *mut btManifoldResult,
    pub m_dispatcher: *mut btDispatcher,
    pub m_dispatchInfoPtr: *const btDispatcherInfo,
    pub m_collisionMarginTriangle: btScalar,
    pub m_shapeCache: btHashMap<btHashKey, btTriIndex>,
    pub m_triangleCount: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN26btSoftBodyTriangleCallback22setTimeStepAndCountersEfPK24btCollisionObjectWrapperRK16btDispatcherInfoP16btManifoldResult"]
    pub fn btSoftBodyTriangleCallback_setTimeStepAndCounters(
        this: *mut btSoftBodyTriangleCallback,
        collisionMarginTriangle: btScalar,
        triObjWrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN26btSoftBodyTriangleCallback10clearCacheEv"]
    pub fn btSoftBodyTriangleCallback_clearCache(this: *mut btSoftBodyTriangleCallback);
}
extern "C" {
    #[link_name = "\u{1}_ZN26btSoftBodyTriangleCallbackC1EP12btDispatcherPK24btCollisionObjectWrapperS4_b"]
    pub fn btSoftBodyTriangleCallback_btSoftBodyTriangleCallback(
        this: *mut btSoftBodyTriangleCallback,
        dispatcher: *mut btDispatcher,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    );
}
impl btSoftBodyTriangleCallback {
    #[inline]
    pub unsafe fn setTimeStepAndCounters(
        &mut self,
        collisionMarginTriangle: btScalar,
        triObjWrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) {
        btSoftBodyTriangleCallback_setTimeStepAndCounters(
            self,
            collisionMarginTriangle,
            triObjWrap,
            dispatchInfo,
            resultOut,
        )
    }
    #[inline]
    pub unsafe fn clearCache(&mut self) {
        btSoftBodyTriangleCallback_clearCache(self)
    }
    #[inline]
    pub unsafe fn new(
        dispatcher: *mut btDispatcher,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSoftBodyTriangleCallback_btSoftBodyTriangleCallback(
            &mut __bindgen_tmp,
            dispatcher,
            body0Wrap,
            body1Wrap,
            isSwapped,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN26btSoftBodyTriangleCallbackD1Ev"]
    pub fn btSoftBodyTriangleCallback_btSoftBodyTriangleCallback_destructor(
        this: *mut btSoftBodyTriangleCallback,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN26btSoftBodyTriangleCallback15processTriangleEP9btVector3ii"]
    pub fn btSoftBodyTriangleCallback_processTriangle(
        this: *mut ::std::os::raw::c_void,
        triangle: *mut btVector3,
        partId: ::std::os::raw::c_int,
        triangleIndex: ::std::os::raw::c_int,
    );
}
/// btSoftBodyConcaveCollisionAlgorithm  supports collision between soft body shapes and (concave) trianges meshes.
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBodyConcaveCollisionAlgorithm {
    pub _base: btCollisionAlgorithm,
    pub m_isSwapped: bool,
    pub m_btSoftBodyTriangleCallback: btSoftBodyTriangleCallback,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBodyConcaveCollisionAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSoftBodyConcaveCollisionAlgorithm10clearCacheEv"]
    pub fn btSoftBodyConcaveCollisionAlgorithm_clearCache(
        this: *mut btSoftBodyConcaveCollisionAlgorithm,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSoftBodyConcaveCollisionAlgorithmC1ERK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_b"]
    pub fn btSoftBodyConcaveCollisionAlgorithm_btSoftBodyConcaveCollisionAlgorithm(
        this: *mut btSoftBodyConcaveCollisionAlgorithm,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    );
}
impl btSoftBodyConcaveCollisionAlgorithm {
    #[inline]
    pub unsafe fn clearCache(&mut self) {
        btSoftBodyConcaveCollisionAlgorithm_clearCache(self)
    }
    #[inline]
    pub unsafe fn new(
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSoftBodyConcaveCollisionAlgorithm_btSoftBodyConcaveCollisionAlgorithm(
            &mut __bindgen_tmp,
            ci,
            body0Wrap,
            body1Wrap,
            isSwapped,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSoftBodyConcaveCollisionAlgorithmD1Ev"]
    pub fn btSoftBodyConcaveCollisionAlgorithm_btSoftBodyConcaveCollisionAlgorithm_destructor(
        this: *mut btSoftBodyConcaveCollisionAlgorithm,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSoftBodyConcaveCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btSoftBodyConcaveCollisionAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN35btSoftBodyConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btSoftBodyConcaveCollisionAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoftBodyMaterialData {
    pub m_linearStiffness: f32,
    pub m_angularStiffness: f32,
    pub m_volumeStiffness: f32,
    pub m_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoftBodyNodeData {
    pub m_material: *mut SoftBodyMaterialData,
    pub m_position: btVector3FloatData,
    pub m_previousPosition: btVector3FloatData,
    pub m_velocity: btVector3FloatData,
    pub m_accumulatedForce: btVector3FloatData,
    pub m_normal: btVector3FloatData,
    pub m_inverseMass: f32,
    pub m_area: f32,
    pub m_attach: ::std::os::raw::c_int,
    pub m_pad: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoftBodyLinkData {
    pub m_material: *mut SoftBodyMaterialData,
    pub m_nodeIndices: [::std::os::raw::c_int; 2usize],
    pub m_restLength: f32,
    pub m_bbending: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoftBodyFaceData {
    pub m_normal: btVector3FloatData,
    pub m_material: *mut SoftBodyMaterialData,
    pub m_nodeIndices: [::std::os::raw::c_int; 3usize],
    pub m_restArea: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoftBodyTetraData {
    pub m_c0: [btVector3FloatData; 4usize],
    pub m_material: *mut SoftBodyMaterialData,
    pub m_nodeIndices: [::std::os::raw::c_int; 4usize],
    pub m_restVolume: f32,
    pub m_c1: f32,
    pub m_c2: f32,
    pub m_pad: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoftRigidAnchorData {
    pub m_c0: btMatrix3x3FloatData,
    pub m_c1: btVector3FloatData,
    pub m_localFrame: btVector3FloatData,
    pub m_rigidBody: *mut btRigidBodyFloatData,
    pub m_nodeIndex: ::std::os::raw::c_int,
    pub m_c2: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoftBodyConfigData {
    pub m_aeroModel: ::std::os::raw::c_int,
    pub m_baumgarte: f32,
    pub m_damping: f32,
    pub m_drag: f32,
    pub m_lift: f32,
    pub m_pressure: f32,
    pub m_volume: f32,
    pub m_dynamicFriction: f32,
    pub m_poseMatch: f32,
    pub m_rigidContactHardness: f32,
    pub m_kineticContactHardness: f32,
    pub m_softContactHardness: f32,
    pub m_anchorHardness: f32,
    pub m_softRigidClusterHardness: f32,
    pub m_softKineticClusterHardness: f32,
    pub m_softSoftClusterHardness: f32,
    pub m_softRigidClusterImpulseSplit: f32,
    pub m_softKineticClusterImpulseSplit: f32,
    pub m_softSoftClusterImpulseSplit: f32,
    pub m_maxVolume: f32,
    pub m_timeScale: f32,
    pub m_velocityIterations: ::std::os::raw::c_int,
    pub m_positionIterations: ::std::os::raw::c_int,
    pub m_driftIterations: ::std::os::raw::c_int,
    pub m_clusterIterations: ::std::os::raw::c_int,
    pub m_collisionFlags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoftBodyPoseData {
    pub m_rot: btMatrix3x3FloatData,
    pub m_scale: btMatrix3x3FloatData,
    pub m_aqq: btMatrix3x3FloatData,
    pub m_com: btVector3FloatData,
    pub m_positions: *mut btVector3FloatData,
    pub m_weights: *mut f32,
    pub m_numPositions: ::std::os::raw::c_int,
    pub m_numWeigts: ::std::os::raw::c_int,
    pub m_bvolume: ::std::os::raw::c_int,
    pub m_bframe: ::std::os::raw::c_int,
    pub m_restVolume: f32,
    pub m_pad: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoftBodyClusterData {
    pub m_framexform: btTransformFloatData,
    pub m_locii: btMatrix3x3FloatData,
    pub m_invwi: btMatrix3x3FloatData,
    pub m_com: btVector3FloatData,
    pub m_vimpulses: [btVector3FloatData; 2usize],
    pub m_dimpulses: [btVector3FloatData; 2usize],
    pub m_lv: btVector3FloatData,
    pub m_av: btVector3FloatData,
    pub m_framerefs: *mut btVector3FloatData,
    pub m_nodeIndices: *mut ::std::os::raw::c_int,
    pub m_masses: *mut f32,
    pub m_numFrameRefs: ::std::os::raw::c_int,
    pub m_numNodes: ::std::os::raw::c_int,
    pub m_numMasses: ::std::os::raw::c_int,
    pub m_idmass: f32,
    pub m_imass: f32,
    pub m_nvimpulses: ::std::os::raw::c_int,
    pub m_ndimpulses: ::std::os::raw::c_int,
    pub m_ndamping: f32,
    pub m_ldamping: f32,
    pub m_adamping: f32,
    pub m_matching: f32,
    pub m_maxSelfCollisionImpulse: f32,
    pub m_selfCollisionImpulseFactor: f32,
    pub m_containsAnchor: ::std::os::raw::c_int,
    pub m_collide: ::std::os::raw::c_int,
    pub m_clusterIndex: ::std::os::raw::c_int,
}
pub const btSoftJointBodyType_BT_JOINT_SOFT_BODY_CLUSTER: btSoftJointBodyType = 1;
pub const btSoftJointBodyType_BT_JOINT_RIGID_BODY: btSoftJointBodyType = 2;
pub const btSoftJointBodyType_BT_JOINT_COLLISION_OBJECT: btSoftJointBodyType = 3;
pub type btSoftJointBodyType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBodyJointData {
    pub m_bodyA: *mut ::std::os::raw::c_void,
    pub m_bodyB: *mut ::std::os::raw::c_void,
    pub m_refs: [btVector3FloatData; 2usize],
    pub m_cfm: f32,
    pub m_erp: f32,
    pub m_split: f32,
    pub m_delete: ::std::os::raw::c_int,
    pub m_relPosition: [btVector3FloatData; 2usize],
    pub m_bodyAtype: ::std::os::raw::c_int,
    pub m_bodyBtype: ::std::os::raw::c_int,
    pub m_jointType: ::std::os::raw::c_int,
    pub m_pad: ::std::os::raw::c_int,
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBodyFloatData {
    pub m_collisionObjectData: btCollisionObjectFloatData,
    pub m_pose: *mut SoftBodyPoseData,
    pub m_materials: *mut *mut SoftBodyMaterialData,
    pub m_nodes: *mut SoftBodyNodeData,
    pub m_links: *mut SoftBodyLinkData,
    pub m_faces: *mut SoftBodyFaceData,
    pub m_tetrahedra: *mut SoftBodyTetraData,
    pub m_anchors: *mut SoftRigidAnchorData,
    pub m_clusters: *mut SoftBodyClusterData,
    pub m_joints: *mut btSoftBodyJointData,
    pub m_numMaterials: ::std::os::raw::c_int,
    pub m_numNodes: ::std::os::raw::c_int,
    pub m_numLinks: ::std::os::raw::c_int,
    pub m_numFaces: ::std::os::raw::c_int,
    pub m_numTetrahedra: ::std::os::raw::c_int,
    pub m_numAnchors: ::std::os::raw::c_int,
    pub m_numClusters: ::std::os::raw::c_int,
    pub m_numJoints: ::std::os::raw::c_int,
    pub m_config: SoftBodyConfigData,
}
/// btGjkEpaSolver contributed under zlib by Nathanael Presson
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btGjkEpaSolver2 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btGjkEpaSolver2_sResults {
    pub status: btGjkEpaSolver2_sResults_eStatus,
    pub witnesses: [btVector3; 2usize],
    pub normal: btVector3,
    pub distance: btScalar,
}
pub const btGjkEpaSolver2_sResults_eStatus_Separated: btGjkEpaSolver2_sResults_eStatus = 0;
pub const btGjkEpaSolver2_sResults_eStatus_Penetrating: btGjkEpaSolver2_sResults_eStatus = 1;
pub const btGjkEpaSolver2_sResults_eStatus_GJK_Failed: btGjkEpaSolver2_sResults_eStatus = 2;
pub const btGjkEpaSolver2_sResults_eStatus_EPA_Failed: btGjkEpaSolver2_sResults_eStatus = 3;
pub type btGjkEpaSolver2_sResults_eStatus = u32;
extern "C" {
    #[link_name = "\u{1}_ZN15btGjkEpaSolver220StackSizeRequirementEv"]
    pub fn btGjkEpaSolver2_StackSizeRequirement() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN15btGjkEpaSolver28DistanceEPK13btConvexShapeRK11btTransformS2_S5_RK9btVector3RNS_8sResultsE"]
    pub fn btGjkEpaSolver2_Distance(
        shape0: *const btConvexShape,
        wtrs0: *const btTransform,
        shape1: *const btConvexShape,
        wtrs1: *const btTransform,
        guess: *const btVector3,
        results: *mut btGjkEpaSolver2_sResults,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN15btGjkEpaSolver211PenetrationEPK13btConvexShapeRK11btTransformS2_S5_RK9btVector3RNS_8sResultsEb"]
    pub fn btGjkEpaSolver2_Penetration(
        shape0: *const btConvexShape,
        wtrs0: *const btTransform,
        shape1: *const btConvexShape,
        wtrs1: *const btTransform,
        guess: *const btVector3,
        results: *mut btGjkEpaSolver2_sResults,
        usemargins: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN15btGjkEpaSolver214SignedDistanceERK9btVector3fPK13btConvexShapeRK11btTransformRNS_8sResultsE"]
    pub fn btGjkEpaSolver2_SignedDistance(
        position: *const btVector3,
        margin: btScalar,
        shape: *const btConvexShape,
        wtrs: *const btTransform,
        results: *mut btGjkEpaSolver2_sResults,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN15btGjkEpaSolver214SignedDistanceEPK13btConvexShapeRK11btTransformS2_S5_RK9btVector3RNS_8sResultsE"]
    pub fn btGjkEpaSolver2_SignedDistance1(
        shape0: *const btConvexShape,
        wtrs0: *const btTransform,
        shape1: *const btConvexShape,
        wtrs1: *const btTransform,
        guess: *const btVector3,
        results: *mut btGjkEpaSolver2_sResults,
    ) -> bool;
}
impl btGjkEpaSolver2 {
    #[inline]
    pub unsafe fn StackSizeRequirement() -> ::std::os::raw::c_int {
        btGjkEpaSolver2_StackSizeRequirement()
    }
    #[inline]
    pub unsafe fn Distance(
        shape0: *const btConvexShape,
        wtrs0: *const btTransform,
        shape1: *const btConvexShape,
        wtrs1: *const btTransform,
        guess: *const btVector3,
        results: *mut btGjkEpaSolver2_sResults,
    ) -> bool {
        btGjkEpaSolver2_Distance(shape0, wtrs0, shape1, wtrs1, guess, results)
    }
    #[inline]
    pub unsafe fn Penetration(
        shape0: *const btConvexShape,
        wtrs0: *const btTransform,
        shape1: *const btConvexShape,
        wtrs1: *const btTransform,
        guess: *const btVector3,
        results: *mut btGjkEpaSolver2_sResults,
        usemargins: bool,
    ) -> bool {
        btGjkEpaSolver2_Penetration(shape0, wtrs0, shape1, wtrs1, guess, results, usemargins)
    }
    #[inline]
    pub unsafe fn SignedDistance(
        position: *const btVector3,
        margin: btScalar,
        shape: *const btConvexShape,
        wtrs: *const btTransform,
        results: *mut btGjkEpaSolver2_sResults,
    ) -> btScalar {
        btGjkEpaSolver2_SignedDistance(position, margin, shape, wtrs, results)
    }
    #[inline]
    pub unsafe fn SignedDistance1(
        shape0: *const btConvexShape,
        wtrs0: *const btTransform,
        shape1: *const btConvexShape,
        wtrs1: *const btTransform,
        guess: *const btVector3,
        results: *mut btGjkEpaSolver2_sResults,
    ) -> bool {
        btGjkEpaSolver2_SignedDistance1(shape0, wtrs0, shape1, wtrs1, guess, results)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSparseSdf_IntFrac {
    pub b: ::std::os::raw::c_int,
    pub i: ::std::os::raw::c_int,
    pub f: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSparseSdf_Cell {
    pub d: *mut *mut *mut btScalar,
    pub c: [::std::os::raw::c_int; 3usize],
    pub puid: ::std::os::raw::c_int,
    pub hash: ::std::os::raw::c_uint,
    pub pclient: *const btCollisionShape,
    pub next: *mut btSparseSdf_Cell,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBodyWorldInfo {
    pub air_density: btScalar,
    pub water_density: btScalar,
    pub water_offset: btScalar,
    pub m_maxDisplacement: btScalar,
    pub water_normal: btVector3,
    pub m_broadphase: *mut btBroadphaseInterface,
    pub m_dispatcher: *mut btDispatcher,
    pub m_gravity: btVector3,
    pub m_sparsesdf: [u64; 7usize],
}
/// The btSoftBody is an class to simulate cloth and volumetric soft bodies.
/// There is two-way interaction between btSoftBody and btRigidBody/btCollisionObject.
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBody {
    pub _base: btCollisionObject,
    pub m_collisionDisabledObjects: btAlignedObjectArray<*const btCollisionObject>,
    pub m_softBodySolver: *mut btSoftBodySolver,
    pub m_cfg: btSoftBody_Config,
    pub m_sst: btSoftBody_SolverState,
    pub m_pose: btSoftBody_Pose,
    pub m_tag: *mut ::std::os::raw::c_void,
    pub m_worldInfo: *mut btSoftBodyWorldInfo,
    pub m_notes: btSoftBody_tNoteArray,
    pub m_nodes: btSoftBody_tNodeArray,
    pub m_links: btSoftBody_tLinkArray,
    pub m_faces: btSoftBody_tFaceArray,
    pub m_tetras: btSoftBody_tTetraArray,
    pub m_anchors: btSoftBody_tAnchorArray,
    pub m_rcontacts: btSoftBody_tRContactArray,
    pub m_scontacts: btSoftBody_tSContactArray,
    pub m_joints: btSoftBody_tJointArray,
    pub m_materials: btSoftBody_tMaterialArray,
    pub m_timeacc: btScalar,
    pub m_bounds: [btVector3; 2usize],
    pub m_bUpdateRtCst: bool,
    pub m_ndbvt: btDbvt,
    pub m_fdbvt: btDbvt,
    pub m_cdbvt: btDbvt,
    pub m_clusters: btSoftBody_tClusterArray,
    pub m_clusterConnectivity: btAlignedObjectArray<bool>,
    pub m_initialWorldTransform: btTransform,
    pub m_windVelocity: btVector3,
    pub m_restLengthScale: btScalar,
    pub m_userIndexMapping: btAlignedObjectArray<::std::os::raw::c_int>,
}
/// eAeroModel
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_eAeroModel {
    pub _address: u8,
}
pub const btSoftBody_eAeroModel___V_Point: btSoftBody_eAeroModel__ = 0;
/// Vertex normals are oriented toward velocity
pub const btSoftBody_eAeroModel___V_TwoSided: btSoftBody_eAeroModel__ = 1;
/// Vertex normals are flipped to match velocity
pub const btSoftBody_eAeroModel___V_TwoSidedLiftDrag: btSoftBody_eAeroModel__ = 2;
/// Vertex normals are flipped to match velocity and lift and drag forces are applied
pub const btSoftBody_eAeroModel___V_OneSided: btSoftBody_eAeroModel__ = 3;
/// Vertex normals are taken as it is
pub const btSoftBody_eAeroModel___F_TwoSided: btSoftBody_eAeroModel__ = 4;
/// Face normals are flipped to match velocity
pub const btSoftBody_eAeroModel___F_TwoSidedLiftDrag: btSoftBody_eAeroModel__ = 5;
/// Face normals are flipped to match velocity and lift and drag forces are applied
pub const btSoftBody_eAeroModel___F_OneSided: btSoftBody_eAeroModel__ = 6;
/// Face normals are taken as it is
pub const btSoftBody_eAeroModel___END: btSoftBody_eAeroModel__ = 7;
pub type btSoftBody_eAeroModel__ = u32;
/// eVSolver : velocities solvers
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_eVSolver {
    pub _address: u8,
}
pub const btSoftBody_eVSolver___Linear: btSoftBody_eVSolver__ = 0;
/// Linear solver
pub const btSoftBody_eVSolver___END: btSoftBody_eVSolver__ = 1;
pub type btSoftBody_eVSolver__ = u32;
/// ePSolver : positions solvers
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_ePSolver {
    pub _address: u8,
}
pub const btSoftBody_ePSolver___Linear: btSoftBody_ePSolver__ = 0;
/// Linear solver
pub const btSoftBody_ePSolver___Anchors: btSoftBody_ePSolver__ = 1;
/// Anchor solver
pub const btSoftBody_ePSolver___RContacts: btSoftBody_ePSolver__ = 2;
/// Rigid contacts solver
pub const btSoftBody_ePSolver___SContacts: btSoftBody_ePSolver__ = 3;
/// Soft contacts solver
pub const btSoftBody_ePSolver___END: btSoftBody_ePSolver__ = 4;
pub type btSoftBody_ePSolver__ = u32;
/// eSolverPresets
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_eSolverPresets {
    pub _address: u8,
}
pub const btSoftBody_eSolverPresets___Positions: btSoftBody_eSolverPresets__ = 0;
pub const btSoftBody_eSolverPresets___Velocities: btSoftBody_eSolverPresets__ = 1;
pub const btSoftBody_eSolverPresets___Default: btSoftBody_eSolverPresets__ = 0;
pub const btSoftBody_eSolverPresets___END: btSoftBody_eSolverPresets__ = 1;
pub type btSoftBody_eSolverPresets__ = u32;
/// eFeature
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_eFeature {
    pub _address: u8,
}
pub const btSoftBody_eFeature___None: btSoftBody_eFeature__ = 0;
pub const btSoftBody_eFeature___Node: btSoftBody_eFeature__ = 1;
pub const btSoftBody_eFeature___Link: btSoftBody_eFeature__ = 2;
pub const btSoftBody_eFeature___Face: btSoftBody_eFeature__ = 3;
pub const btSoftBody_eFeature___Tetra: btSoftBody_eFeature__ = 4;
pub const btSoftBody_eFeature___END: btSoftBody_eFeature__ = 5;
pub type btSoftBody_eFeature__ = u32;
pub type btSoftBody_tVSolverArray = btAlignedObjectArray<btSoftBody_eVSolver__>;
pub type btSoftBody_tPSolverArray = btAlignedObjectArray<btSoftBody_ePSolver__>;
/// fCollision
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_fCollision {
    pub _address: u8,
}
pub const btSoftBody_fCollision___RVSmask: btSoftBody_fCollision__ = 15;
/// Rigid versus soft mask
pub const btSoftBody_fCollision___SDF_RS: btSoftBody_fCollision__ = 1;
/// SDF based rigid vs soft
pub const btSoftBody_fCollision___CL_RS: btSoftBody_fCollision__ = 2;
/// Cluster vs convex rigid vs soft
pub const btSoftBody_fCollision___SVSmask: btSoftBody_fCollision__ = 48;
/// Rigid versus soft mask
pub const btSoftBody_fCollision___VF_SS: btSoftBody_fCollision__ = 16;
/// Vertex vs face soft vs soft handling
pub const btSoftBody_fCollision___CL_SS: btSoftBody_fCollision__ = 32;
/// Cluster vs cluster soft vs soft handling
pub const btSoftBody_fCollision___CL_SELF: btSoftBody_fCollision__ = 64;
/// Cluster soft body self collision
pub const btSoftBody_fCollision___Default: btSoftBody_fCollision__ = 1;
/// Cluster soft body self collision
pub const btSoftBody_fCollision___END: btSoftBody_fCollision__ = 2;
pub type btSoftBody_fCollision__ = u32;
/// fMaterial
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_fMaterial {
    pub _address: u8,
}
pub const btSoftBody_fMaterial___DebugDraw: btSoftBody_fMaterial__ = 1;
/// Enable debug draw
pub const btSoftBody_fMaterial___Default: btSoftBody_fMaterial__ = 1;
/// Enable debug draw
pub const btSoftBody_fMaterial___END: btSoftBody_fMaterial__ = 2;
pub type btSoftBody_fMaterial__ = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_sRayCast {
    pub body: *mut btSoftBody,
    /// soft body
    pub feature: btSoftBody_eFeature__,
    /// feature type
    pub index: ::std::os::raw::c_int,
    /// feature index
    pub fraction: btScalar,
}
#[repr(C)]
pub struct btSoftBody_ImplicitFn__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBody_ImplicitFn {
    pub vtable_: *const btSoftBody_ImplicitFn__bindgen_vtable,
}
pub type btSoftBody_tScalarArray = btAlignedObjectArray<btScalar>;
pub type btSoftBody_tVector3Array = btAlignedObjectArray<btVector3>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_sCti {
    pub m_colObj: *const btCollisionObject,
    pub m_normal: btVector3,
    pub m_offset: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_sMedium {
    pub m_velocity: btVector3,
    pub m_pressure: btScalar,
    pub m_density: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_Element {
    pub m_tag: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_Material {
    pub _base: btSoftBody_Element,
    pub m_kLST: btScalar,
    pub m_kAST: btScalar,
    pub m_kVST: btScalar,
    pub m_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_Feature {
    pub _base: btSoftBody_Element,
    pub m_material: *mut btSoftBody_Material,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_Node {
    pub _base: btSoftBody_Feature,
    pub m_x: btVector3,
    pub m_q: btVector3,
    pub m_v: btVector3,
    pub m_f: btVector3,
    pub m_n: btVector3,
    pub m_im: btScalar,
    pub m_area: btScalar,
    pub m_leaf: *mut btDbvtNode,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl btSoftBody_Node {
    #[inline]
    pub fn m_battach(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_m_battach(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        m_battach: ::std::os::raw::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let m_battach: u32 = unsafe { ::std::mem::transmute(m_battach) };
            m_battach as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_Link {
    pub _base: btSoftBody_Feature,
    pub m_c3: btVector3,
    pub m_n: [*mut btSoftBody_Node; 2usize],
    pub m_rl: btScalar,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub m_c0: btScalar,
    pub m_c1: btScalar,
    pub m_c2: btScalar,
}
impl btSoftBody_Link {
    #[inline]
    pub fn m_bbending(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_m_bbending(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        m_bbending: ::std::os::raw::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let m_bbending: u32 = unsafe { ::std::mem::transmute(m_bbending) };
            m_bbending as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_Face {
    pub _base: btSoftBody_Feature,
    pub m_n: [*mut btSoftBody_Node; 3usize],
    pub m_normal: btVector3,
    pub m_ra: btScalar,
    pub m_leaf: *mut btDbvtNode,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_Tetra {
    pub _base: btSoftBody_Feature,
    pub m_n: [*mut btSoftBody_Node; 4usize],
    pub m_rv: btScalar,
    pub m_leaf: *mut btDbvtNode,
    pub m_c0: [btVector3; 4usize],
    pub m_c1: btScalar,
    pub m_c2: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_RContact {
    pub m_cti: btSoftBody_sCti,
    pub m_node: *mut btSoftBody_Node,
    pub m_c0: btMatrix3x3,
    pub m_c1: btVector3,
    pub m_c2: btScalar,
    pub m_c3: btScalar,
    pub m_c4: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_SContact {
    pub m_node: *mut btSoftBody_Node,
    pub m_face: *mut btSoftBody_Face,
    pub m_weights: btVector3,
    pub m_normal: btVector3,
    pub m_margin: btScalar,
    pub m_friction: btScalar,
    pub m_cfm: [btScalar; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_Anchor {
    pub m_node: *mut btSoftBody_Node,
    pub m_local: btVector3,
    pub m_body: *mut btRigidBody,
    pub m_influence: btScalar,
    pub m_c0: btMatrix3x3,
    pub m_c1: btVector3,
    pub m_c2: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_Note {
    pub _base: btSoftBody_Element,
    pub m_text: *const ::std::os::raw::c_char,
    pub m_offset: btVector3,
    pub m_rank: ::std::os::raw::c_int,
    pub m_nodes: [*mut btSoftBody_Node; 4usize],
    pub m_coords: [btScalar; 4usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBody_Pose {
    pub m_bvolume: bool,
    pub m_bframe: bool,
    pub m_volume: btScalar,
    pub m_pos: btSoftBody_tVector3Array,
    pub m_wgh: btSoftBody_tScalarArray,
    pub m_com: btVector3,
    pub m_rot: btMatrix3x3,
    pub m_scl: btMatrix3x3,
    pub m_aqq: btMatrix3x3,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBody_Cluster {
    pub m_masses: btSoftBody_tScalarArray,
    pub m_nodes: btAlignedObjectArray<*mut btSoftBody_Node>,
    pub m_framerefs: btSoftBody_tVector3Array,
    pub m_framexform: btTransform,
    pub m_idmass: btScalar,
    pub m_imass: btScalar,
    pub m_locii: btMatrix3x3,
    pub m_invwi: btMatrix3x3,
    pub m_com: btVector3,
    pub m_vimpulses: [btVector3; 2usize],
    pub m_dimpulses: [btVector3; 2usize],
    pub m_nvimpulses: ::std::os::raw::c_int,
    pub m_ndimpulses: ::std::os::raw::c_int,
    pub m_lv: btVector3,
    pub m_av: btVector3,
    pub m_leaf: *mut btDbvtNode,
    pub m_ndamping: btScalar,
    pub m_ldamping: btScalar,
    pub m_adamping: btScalar,
    pub m_matching: btScalar,
    pub m_maxSelfCollisionImpulse: btScalar,
    pub m_selfCollisionImpulseFactor: btScalar,
    pub m_containsAnchor: bool,
    pub m_collide: bool,
    pub m_clusterIndex: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_Impulse {
    pub m_velocity: btVector3,
    pub m_drift: btVector3,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl btSoftBody_Impulse {
    #[inline]
    pub fn m_asVelocity(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_m_asVelocity(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn m_asDrift(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_m_asDrift(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        m_asVelocity: ::std::os::raw::c_int,
        m_asDrift: ::std::os::raw::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let m_asVelocity: u32 = unsafe { ::std::mem::transmute(m_asVelocity) };
            m_asVelocity as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let m_asDrift: u32 = unsafe { ::std::mem::transmute(m_asDrift) };
            m_asDrift as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_Body {
    pub m_soft: *mut btSoftBody_Cluster,
    pub m_rigid: *mut btRigidBody,
    pub m_collisionObject: *const btCollisionObject,
}
#[repr(C)]
pub struct btSoftBody_Joint__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBody_Joint {
    pub vtable_: *const btSoftBody_Joint__bindgen_vtable,
    pub m_bodies: [btSoftBody_Body; 2usize],
    pub m_refs: [btVector3; 2usize],
    pub m_cfm: btScalar,
    pub m_erp: btScalar,
    pub m_split: btScalar,
    pub m_drift: btVector3,
    pub m_sdrift: btVector3,
    pub m_massmatrix: btMatrix3x3,
    pub m_delete: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_Joint_eType {
    pub _address: u8,
}
pub const btSoftBody_Joint_eType___Linear: btSoftBody_Joint_eType__ = 0;
pub const btSoftBody_Joint_eType___Angular: btSoftBody_Joint_eType__ = 1;
pub const btSoftBody_Joint_eType___Contact: btSoftBody_Joint_eType__ = 2;
pub type btSoftBody_Joint_eType__ = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_Joint_Specs {
    pub erp: btScalar,
    pub cfm: btScalar,
    pub split: btScalar,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBody_LJoint {
    pub _base: btSoftBody_Joint,
    pub m_rpos: [btVector3; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_LJoint_Specs {
    pub _base: btSoftBody_Joint_Specs,
    pub position: btVector3,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBody_AJoint {
    pub _base: btSoftBody_Joint,
    pub m_axis: [btVector3; 2usize],
    pub m_icontrol: *mut btSoftBody_AJoint_IControl,
}
#[repr(C)]
pub struct btSoftBody_AJoint_IControl__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBody_AJoint_IControl {
    pub vtable_: *const btSoftBody_AJoint_IControl__bindgen_vtable,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_AJoint_Specs {
    pub _base: btSoftBody_Joint_Specs,
    pub axis: btVector3,
    pub icontrol: *mut btSoftBody_AJoint_IControl,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBody_CJoint {
    pub _base: btSoftBody_Joint,
    pub m_life: ::std::os::raw::c_int,
    pub m_maxlife: ::std::os::raw::c_int,
    pub m_rpos: [btVector3; 2usize],
    pub m_normal: btVector3,
    pub m_friction: btScalar,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBody_Config {
    pub aeromodel: btSoftBody_eAeroModel__,
    pub kVCF: btScalar,
    pub kDP: btScalar,
    pub kDG: btScalar,
    pub kLF: btScalar,
    pub kPR: btScalar,
    pub kVC: btScalar,
    pub kDF: btScalar,
    pub kMT: btScalar,
    pub kCHR: btScalar,
    pub kKHR: btScalar,
    pub kSHR: btScalar,
    pub kAHR: btScalar,
    pub kSRHR_CL: btScalar,
    pub kSKHR_CL: btScalar,
    pub kSSHR_CL: btScalar,
    pub kSR_SPLT_CL: btScalar,
    pub kSK_SPLT_CL: btScalar,
    pub kSS_SPLT_CL: btScalar,
    pub maxvolume: btScalar,
    pub timescale: btScalar,
    pub viterations: ::std::os::raw::c_int,
    pub piterations: ::std::os::raw::c_int,
    pub diterations: ::std::os::raw::c_int,
    pub citerations: ::std::os::raw::c_int,
    pub collisions: ::std::os::raw::c_int,
    pub m_vsequence: btSoftBody_tVSolverArray,
    pub m_psequence: btSoftBody_tPSolverArray,
    pub m_dsequence: btSoftBody_tPSolverArray,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBody_SolverState {
    pub sdt: btScalar,
    pub isdt: btScalar,
    pub velmrg: btScalar,
    pub radmrg: btScalar,
    pub updmrg: btScalar,
}
/// RayFromToCaster takes a ray from, ray to (instead of direction!)
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBody_RayFromToCaster {
    pub _base: btDbvt_ICollide,
    pub m_rayFrom: btVector3,
    pub m_rayTo: btVector3,
    pub m_rayNormalizedDirection: btVector3,
    pub m_mint: btScalar,
    pub m_face: *mut btSoftBody_Face,
    pub m_tests: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f"]
    pub fn btSoftBody_RayFromToCaster_rayFromToTriangle(
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
        rayNormalizedDirection: *const btVector3,
        a: *const btVector3,
        b: *const btVector3,
        c: *const btVector3,
        maxt: btScalar,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody15RayFromToCasterC1ERK9btVector3S3_f"]
    pub fn btSoftBody_RayFromToCaster_RayFromToCaster(
        this: *mut btSoftBody_RayFromToCaster,
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
        mxt: btScalar,
    );
}
impl btSoftBody_RayFromToCaster {
    #[inline]
    pub unsafe fn rayFromToTriangle(
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
        rayNormalizedDirection: *const btVector3,
        a: *const btVector3,
        b: *const btVector3,
        c: *const btVector3,
        maxt: btScalar,
    ) -> btScalar {
        btSoftBody_RayFromToCaster_rayFromToTriangle(
            rayFrom,
            rayTo,
            rayNormalizedDirection,
            a,
            b,
            c,
            maxt,
        )
    }
    #[inline]
    pub unsafe fn new(rayFrom: *const btVector3, rayTo: *const btVector3, mxt: btScalar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSoftBody_RayFromToCaster_RayFromToCaster(&mut __bindgen_tmp, rayFrom, rayTo, mxt);
        __bindgen_tmp
    }
}
pub type btSoftBody_psolver_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut btSoftBody, arg2: btScalar, arg3: btScalar),
>;
pub type btSoftBody_vsolver_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut btSoftBody, arg2: btScalar)>;
pub type btSoftBody_tClusterArray = btAlignedObjectArray<*mut btSoftBody_Cluster>;
pub type btSoftBody_tNoteArray = btAlignedObjectArray<btSoftBody_Note>;
pub type btSoftBody_tNodeArray = btAlignedObjectArray<btSoftBody_Node>;
pub type btSoftBody_tLeafArray = btAlignedObjectArray<*mut btDbvtNode>;
pub type btSoftBody_tLinkArray = btAlignedObjectArray<btSoftBody_Link>;
pub type btSoftBody_tFaceArray = btAlignedObjectArray<btSoftBody_Face>;
pub type btSoftBody_tTetraArray = btAlignedObjectArray<btSoftBody_Tetra>;
pub type btSoftBody_tAnchorArray = btAlignedObjectArray<btSoftBody_Anchor>;
pub type btSoftBody_tRContactArray = btAlignedObjectArray<btSoftBody_RContact>;
pub type btSoftBody_tSContactArray = btAlignedObjectArray<btSoftBody_SContact>;
pub type btSoftBody_tMaterialArray = btAlignedObjectArray<*mut btSoftBody_Material>;
pub type btSoftBody_tJointArray = btAlignedObjectArray<*mut btSoftBody_Joint>;
pub type btSoftBody_tSoftBodyArray = btAlignedObjectArray<*mut btSoftBody>;
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody12initDefaultsEv"]
    pub fn btSoftBody_initDefaults(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZNK10btSoftBody9checkLinkEii"]
    pub fn btSoftBody_checkLink(
        this: *const btSoftBody,
        node0: ::std::os::raw::c_int,
        node1: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10btSoftBody9checkLinkEPKNS_4NodeES2_"]
    pub fn btSoftBody_checkLink1(
        this: *const btSoftBody,
        node0: *const btSoftBody_Node,
        node1: *const btSoftBody_Node,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10btSoftBody9checkFaceEiii"]
    pub fn btSoftBody_checkFace(
        this: *const btSoftBody,
        node0: ::std::os::raw::c_int,
        node1: ::std::os::raw::c_int,
        node2: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody14appendMaterialEv"]
    pub fn btSoftBody_appendMaterial(this: *mut btSoftBody) -> *mut btSoftBody_Material;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody10appendNoteEPKcRK9btVector3RK9btVector4PNS_4NodeES9_S9_S9_"]
    pub fn btSoftBody_appendNote(
        this: *mut btSoftBody,
        text: *const ::std::os::raw::c_char,
        o: *const btVector3,
        c: *const btVector4,
        n0: *mut btSoftBody_Node,
        n1: *mut btSoftBody_Node,
        n2: *mut btSoftBody_Node,
        n3: *mut btSoftBody_Node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4NodeE"]
    pub fn btSoftBody_appendNote1(
        this: *mut btSoftBody,
        text: *const ::std::os::raw::c_char,
        o: *const btVector3,
        feature: *mut btSoftBody_Node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4LinkE"]
    pub fn btSoftBody_appendNote2(
        this: *mut btSoftBody,
        text: *const ::std::os::raw::c_char,
        o: *const btVector3,
        feature: *mut btSoftBody_Link,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4FaceE"]
    pub fn btSoftBody_appendNote3(
        this: *mut btSoftBody,
        text: *const ::std::os::raw::c_char,
        o: *const btVector3,
        feature: *mut btSoftBody_Face,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody10appendNodeERK9btVector3f"]
    pub fn btSoftBody_appendNode(this: *mut btSoftBody, x: *const btVector3, m: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody10appendLinkEiPNS_8MaterialE"]
    pub fn btSoftBody_appendLink(
        this: *mut btSoftBody,
        model: ::std::os::raw::c_int,
        mat: *mut btSoftBody_Material,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody10appendLinkEiiPNS_8MaterialEb"]
    pub fn btSoftBody_appendLink1(
        this: *mut btSoftBody,
        node0: ::std::os::raw::c_int,
        node1: ::std::os::raw::c_int,
        mat: *mut btSoftBody_Material,
        bcheckexist: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody10appendLinkEPNS_4NodeES1_PNS_8MaterialEb"]
    pub fn btSoftBody_appendLink2(
        this: *mut btSoftBody,
        node0: *mut btSoftBody_Node,
        node1: *mut btSoftBody_Node,
        mat: *mut btSoftBody_Material,
        bcheckexist: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody10appendFaceEiPNS_8MaterialE"]
    pub fn btSoftBody_appendFace(
        this: *mut btSoftBody,
        model: ::std::os::raw::c_int,
        mat: *mut btSoftBody_Material,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody10appendFaceEiiiPNS_8MaterialE"]
    pub fn btSoftBody_appendFace1(
        this: *mut btSoftBody,
        node0: ::std::os::raw::c_int,
        node1: ::std::os::raw::c_int,
        node2: ::std::os::raw::c_int,
        mat: *mut btSoftBody_Material,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody11appendTetraEiPNS_8MaterialE"]
    pub fn btSoftBody_appendTetra(
        this: *mut btSoftBody,
        model: ::std::os::raw::c_int,
        mat: *mut btSoftBody_Material,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody11appendTetraEiiiiPNS_8MaterialE"]
    pub fn btSoftBody_appendTetra1(
        this: *mut btSoftBody,
        node0: ::std::os::raw::c_int,
        node1: ::std::os::raw::c_int,
        node2: ::std::os::raw::c_int,
        node3: ::std::os::raw::c_int,
        mat: *mut btSoftBody_Material,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody12appendAnchorEiP11btRigidBodybf"]
    pub fn btSoftBody_appendAnchor(
        this: *mut btSoftBody,
        node: ::std::os::raw::c_int,
        body: *mut btRigidBody,
        disableCollisionBetweenLinkedBodies: bool,
        influence: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody12appendAnchorEiP11btRigidBodyRK9btVector3bf"]
    pub fn btSoftBody_appendAnchor1(
        this: *mut btSoftBody,
        node: ::std::os::raw::c_int,
        body: *mut btRigidBody,
        localPivot: *const btVector3,
        disableCollisionBetweenLinkedBodies: bool,
        influence: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPNS_7ClusterENS_4BodyE"]
    pub fn btSoftBody_appendLinearJoint(
        this: *mut btSoftBody,
        specs: *const btSoftBody_LJoint_Specs,
        body0: *mut btSoftBody_Cluster,
        body1: btSoftBody_Body,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsENS_4BodyE"]
    pub fn btSoftBody_appendLinearJoint1(
        this: *mut btSoftBody,
        specs: *const btSoftBody_LJoint_Specs,
        body: btSoftBody_Body,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPS_"]
    pub fn btSoftBody_appendLinearJoint2(
        this: *mut btSoftBody,
        specs: *const btSoftBody_LJoint_Specs,
        body: *mut btSoftBody,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPNS_7ClusterENS_4BodyE"]
    pub fn btSoftBody_appendAngularJoint(
        this: *mut btSoftBody,
        specs: *const btSoftBody_AJoint_Specs,
        body0: *mut btSoftBody_Cluster,
        body1: btSoftBody_Body,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsENS_4BodyE"]
    pub fn btSoftBody_appendAngularJoint1(
        this: *mut btSoftBody,
        specs: *const btSoftBody_AJoint_Specs,
        body: btSoftBody_Body,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPS_"]
    pub fn btSoftBody_appendAngularJoint2(
        this: *mut btSoftBody,
        specs: *const btSoftBody_AJoint_Specs,
        body: *mut btSoftBody,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody8addForceERK9btVector3"]
    pub fn btSoftBody_addForce(this: *mut btSoftBody, force: *const btVector3);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody8addForceERK9btVector3i"]
    pub fn btSoftBody_addForce1(
        this: *mut btSoftBody,
        force: *const btVector3,
        node: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody18addAeroForceToNodeERK9btVector3i"]
    pub fn btSoftBody_addAeroForceToNode(
        this: *mut btSoftBody,
        windVelocity: *const btVector3,
        nodeIndex: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody18addAeroForceToFaceERK9btVector3i"]
    pub fn btSoftBody_addAeroForceToFace(
        this: *mut btSoftBody,
        windVelocity: *const btVector3,
        faceIndex: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody11addVelocityERK9btVector3"]
    pub fn btSoftBody_addVelocity(this: *mut btSoftBody, velocity: *const btVector3);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody11setVelocityERK9btVector3"]
    pub fn btSoftBody_setVelocity(this: *mut btSoftBody, velocity: *const btVector3);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody11addVelocityERK9btVector3i"]
    pub fn btSoftBody_addVelocity1(
        this: *mut btSoftBody,
        velocity: *const btVector3,
        node: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody7setMassEif"]
    pub fn btSoftBody_setMass(this: *mut btSoftBody, node: ::std::os::raw::c_int, mass: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZNK10btSoftBody7getMassEi"]
    pub fn btSoftBody_getMass(this: *const btSoftBody, node: ::std::os::raw::c_int) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10btSoftBody12getTotalMassEv"]
    pub fn btSoftBody_getTotalMass(this: *const btSoftBody) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody12setTotalMassEfb"]
    pub fn btSoftBody_setTotalMass(this: *mut btSoftBody, mass: btScalar, fromfaces: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody15setTotalDensityEf"]
    pub fn btSoftBody_setTotalDensity(this: *mut btSoftBody, density: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody13setVolumeMassEf"]
    pub fn btSoftBody_setVolumeMass(this: *mut btSoftBody, mass: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody16setVolumeDensityEf"]
    pub fn btSoftBody_setVolumeDensity(this: *mut btSoftBody, density: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody9transformERK11btTransform"]
    pub fn btSoftBody_transform(this: *mut btSoftBody, trs: *const btTransform);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody9translateERK9btVector3"]
    pub fn btSoftBody_translate(this: *mut btSoftBody, trs: *const btVector3);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody6rotateERK12btQuaternion"]
    pub fn btSoftBody_rotate(this: *mut btSoftBody, rot: *const btQuaternion);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody5scaleERK9btVector3"]
    pub fn btSoftBody_scale(this: *mut btSoftBody, scl: *const btVector3);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody18getRestLengthScaleEv"]
    pub fn btSoftBody_getRestLengthScale(this: *mut btSoftBody) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody18setRestLengthScaleEf"]
    pub fn btSoftBody_setRestLengthScale(this: *mut btSoftBody, restLength: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody7setPoseEbb"]
    pub fn btSoftBody_setPose(this: *mut btSoftBody, bvolume: bool, bframe: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody20resetLinkRestLengthsEv"]
    pub fn btSoftBody_resetLinkRestLengths(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZNK10btSoftBody9getVolumeEv"]
    pub fn btSoftBody_getVolume(this: *const btSoftBody) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10btSoftBody12clusterCountEv"]
    pub fn btSoftBody_clusterCount(this: *const btSoftBody) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody10clusterComEPKNS_7ClusterE"]
    pub fn btSoftBody_clusterCom(cluster: *const btSoftBody_Cluster) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10btSoftBody10clusterComEi"]
    pub fn btSoftBody_clusterCom1(
        this: *const btSoftBody,
        cluster: ::std::os::raw::c_int,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody15clusterVelocityEPKNS_7ClusterERK9btVector3"]
    pub fn btSoftBody_clusterVelocity(
        cluster: *const btSoftBody_Cluster,
        rpos: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody15clusterVImpulseEPNS_7ClusterERK9btVector3S4_"]
    pub fn btSoftBody_clusterVImpulse(
        cluster: *mut btSoftBody_Cluster,
        rpos: *const btVector3,
        impulse: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody15clusterDImpulseEPNS_7ClusterERK9btVector3S4_"]
    pub fn btSoftBody_clusterDImpulse(
        cluster: *mut btSoftBody_Cluster,
        rpos: *const btVector3,
        impulse: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody14clusterImpulseEPNS_7ClusterERK9btVector3RKNS_7ImpulseE"]
    pub fn btSoftBody_clusterImpulse(
        cluster: *mut btSoftBody_Cluster,
        rpos: *const btVector3,
        impulse: *const btSoftBody_Impulse,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody16clusterVAImpulseEPNS_7ClusterERK9btVector3"]
    pub fn btSoftBody_clusterVAImpulse(cluster: *mut btSoftBody_Cluster, impulse: *const btVector3);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody16clusterDAImpulseEPNS_7ClusterERK9btVector3"]
    pub fn btSoftBody_clusterDAImpulse(cluster: *mut btSoftBody_Cluster, impulse: *const btVector3);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody15clusterAImpulseEPNS_7ClusterERKNS_7ImpulseE"]
    pub fn btSoftBody_clusterAImpulse(
        cluster: *mut btSoftBody_Cluster,
        impulse: *const btSoftBody_Impulse,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody16clusterDCImpulseEPNS_7ClusterERK9btVector3"]
    pub fn btSoftBody_clusterDCImpulse(cluster: *mut btSoftBody_Cluster, impulse: *const btVector3);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody26generateBendingConstraintsEiPNS_8MaterialE"]
    pub fn btSoftBody_generateBendingConstraints(
        this: *mut btSoftBody,
        distance: ::std::os::raw::c_int,
        mat: *mut btSoftBody_Material,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody20randomizeConstraintsEv"]
    pub fn btSoftBody_randomizeConstraints(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody14releaseClusterEi"]
    pub fn btSoftBody_releaseCluster(this: *mut btSoftBody, index: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody15releaseClustersEv"]
    pub fn btSoftBody_releaseClusters(this: *mut btSoftBody);
}
extern "C" {
    /// generateClusters with k=0 will create a convex cluster for each tetrahedron or triangle
    /// ///otherwise an approximation will be used (better performance)
    #[link_name = "\u{1}_ZN10btSoftBody16generateClustersEii"]
    pub fn btSoftBody_generateClusters(
        this: *mut btSoftBody,
        k: ::std::os::raw::c_int,
        maxiterations: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody6refineEPNS_10ImplicitFnEfb"]
    pub fn btSoftBody_refine(
        this: *mut btSoftBody,
        ifn: *mut btSoftBody_ImplicitFn,
        accurary: btScalar,
        cut: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody7cutLinkEiif"]
    pub fn btSoftBody_cutLink(
        this: *mut btSoftBody,
        node0: ::std::os::raw::c_int,
        node1: ::std::os::raw::c_int,
        position: btScalar,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody7cutLinkEPKNS_4NodeES2_f"]
    pub fn btSoftBody_cutLink1(
        this: *mut btSoftBody,
        node0: *const btSoftBody_Node,
        node1: *const btSoftBody_Node,
        position: btScalar,
    ) -> bool;
}
extern "C" {
    /// Ray casting using rayFrom and rayTo in worldspace, (not direction!)
    #[link_name = "\u{1}_ZN10btSoftBody7rayTestERK9btVector3S2_RNS_8sRayCastE"]
    pub fn btSoftBody_rayTest(
        this: *mut btSoftBody,
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
        results: *mut btSoftBody_sRayCast,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody9setSolverENS_14eSolverPresets1_E"]
    pub fn btSoftBody_setSolver(this: *mut btSoftBody, preset: btSoftBody_eSolverPresets__);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody13predictMotionEf"]
    pub fn btSoftBody_predictMotion(this: *mut btSoftBody, dt: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody16solveConstraintsEv"]
    pub fn btSoftBody_solveConstraints(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody11staticSolveEi"]
    pub fn btSoftBody_staticSolve(this: *mut btSoftBody, iterations: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody22solveCommonConstraintsEPPS_ii"]
    pub fn btSoftBody_solveCommonConstraints(
        bodies: *mut *mut btSoftBody,
        count: ::std::os::raw::c_int,
        iterations: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody13solveClustersERK20btAlignedObjectArrayIPS_E"]
    pub fn btSoftBody_solveClusters(bodies: *const btAlignedObjectArray<*mut btSoftBody>);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody15integrateMotionEv"]
    pub fn btSoftBody_integrateMotion(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody23defaultCollisionHandlerEPK24btCollisionObjectWrapper"]
    pub fn btSoftBody_defaultCollisionHandler(
        this: *mut btSoftBody,
        pcoWrap: *const btCollisionObjectWrapper,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody23defaultCollisionHandlerEPS_"]
    pub fn btSoftBody_defaultCollisionHandler1(this: *mut btSoftBody, psb: *mut btSoftBody);
}
extern "C" {
    /// Set a wind velocity for interaction with the air.
    #[link_name = "\u{1}_ZN10btSoftBody15setWindVelocityERK9btVector3"]
    pub fn btSoftBody_setWindVelocity(this: *mut btSoftBody, velocity: *const btVector3);
}
extern "C" {
    /// Return the wind velocity for interaction with the air.
    #[link_name = "\u{1}_ZN10btSoftBody15getWindVelocityEv"]
    pub fn btSoftBody_getWindVelocity(this: *mut btSoftBody) -> *const btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody17pointersToIndicesEv"]
    pub fn btSoftBody_pointersToIndices(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody17indicesToPointersEPKi"]
    pub fn btSoftBody_indicesToPointers(this: *mut btSoftBody, map: *const ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZNK10btSoftBody7rayTestERK9btVector3S2_RfRNS_8eFeature1_ERib"]
    pub fn btSoftBody_rayTest1(
        this: *const btSoftBody,
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
        mint: *mut btScalar,
        feature: *mut btSoftBody_eFeature__,
        index: *mut ::std::os::raw::c_int,
        bcountonly: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody18initializeFaceTreeEv"]
    pub fn btSoftBody_initializeFaceTree(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZNK10btSoftBody11evaluateComEv"]
    pub fn btSoftBody_evaluateCom(this: *const btSoftBody) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10btSoftBody12checkContactEPK24btCollisionObjectWrapperRK9btVector3fRNS_4sCtiE"]
    pub fn btSoftBody_checkContact(
        this: *const btSoftBody,
        colObjWrap: *const btCollisionObjectWrapper,
        x: *const btVector3,
        margin: btScalar,
        cti: *mut btSoftBody_sCti,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody13updateNormalsEv"]
    pub fn btSoftBody_updateNormals(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody12updateBoundsEv"]
    pub fn btSoftBody_updateBounds(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody10updatePoseEv"]
    pub fn btSoftBody_updatePose(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody15updateConstantsEv"]
    pub fn btSoftBody_updateConstants(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody19updateLinkConstantsEv"]
    pub fn btSoftBody_updateLinkConstants(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody10updateAreaEb"]
    pub fn btSoftBody_updateArea(this: *mut btSoftBody, averageArea: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody18initializeClustersEv"]
    pub fn btSoftBody_initializeClusters(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody14updateClustersEv"]
    pub fn btSoftBody_updateClusters(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody15cleanupClustersEv"]
    pub fn btSoftBody_cleanupClusters(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody15prepareClustersEi"]
    pub fn btSoftBody_prepareClusters(this: *mut btSoftBody, iterations: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody13solveClustersEf"]
    pub fn btSoftBody_solveClusters1(this: *mut btSoftBody, sor: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody13applyClustersEb"]
    pub fn btSoftBody_applyClusters(this: *mut btSoftBody, drift: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody12dampClustersEv"]
    pub fn btSoftBody_dampClusters(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody11applyForcesEv"]
    pub fn btSoftBody_applyForces(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody14PSolve_AnchorsEPS_ff"]
    pub fn btSoftBody_PSolve_Anchors(psb: *mut btSoftBody, kst: btScalar, ti: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody16PSolve_RContactsEPS_ff"]
    pub fn btSoftBody_PSolve_RContacts(psb: *mut btSoftBody, kst: btScalar, ti: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody16PSolve_SContactsEPS_ff"]
    pub fn btSoftBody_PSolve_SContacts(psb: *mut btSoftBody, arg1: btScalar, ti: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody12PSolve_LinksEPS_ff"]
    pub fn btSoftBody_PSolve_Links(psb: *mut btSoftBody, kst: btScalar, ti: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody12VSolve_LinksEPS_f"]
    pub fn btSoftBody_VSolve_Links(psb: *mut btSoftBody, kst: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody9getSolverENS_8ePSolver1_E"]
    pub fn btSoftBody_getSolver(solver: btSoftBody_ePSolver__) -> btSoftBody_psolver_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody9getSolverENS_8eVSolver1_E"]
    pub fn btSoftBody_getSolver1(solver: btSoftBody_eVSolver__) -> btSoftBody_vsolver_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBodyC1EP19btSoftBodyWorldInfoiPK9btVector3PKf"]
    pub fn btSoftBody_btSoftBody(
        this: *mut btSoftBody,
        worldInfo: *mut btSoftBodyWorldInfo,
        node_count: ::std::os::raw::c_int,
        x: *const btVector3,
        m: *const btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBodyC1EP19btSoftBodyWorldInfo"]
    pub fn btSoftBody_btSoftBody1(this: *mut btSoftBody, worldInfo: *mut btSoftBodyWorldInfo);
}
impl btSoftBody {
    #[inline]
    pub unsafe fn initDefaults(&mut self) {
        btSoftBody_initDefaults(self)
    }
    #[inline]
    pub unsafe fn checkLink(
        &self,
        node0: ::std::os::raw::c_int,
        node1: ::std::os::raw::c_int,
    ) -> bool {
        btSoftBody_checkLink(self, node0, node1)
    }
    #[inline]
    pub unsafe fn checkLink1(
        &self,
        node0: *const btSoftBody_Node,
        node1: *const btSoftBody_Node,
    ) -> bool {
        btSoftBody_checkLink1(self, node0, node1)
    }
    #[inline]
    pub unsafe fn checkFace(
        &self,
        node0: ::std::os::raw::c_int,
        node1: ::std::os::raw::c_int,
        node2: ::std::os::raw::c_int,
    ) -> bool {
        btSoftBody_checkFace(self, node0, node1, node2)
    }
    #[inline]
    pub unsafe fn appendMaterial(&mut self) -> *mut btSoftBody_Material {
        btSoftBody_appendMaterial(self)
    }
    #[inline]
    pub unsafe fn appendNote(
        &mut self,
        text: *const ::std::os::raw::c_char,
        o: *const btVector3,
        c: *const btVector4,
        n0: *mut btSoftBody_Node,
        n1: *mut btSoftBody_Node,
        n2: *mut btSoftBody_Node,
        n3: *mut btSoftBody_Node,
    ) {
        btSoftBody_appendNote(self, text, o, c, n0, n1, n2, n3)
    }
    #[inline]
    pub unsafe fn appendNote1(
        &mut self,
        text: *const ::std::os::raw::c_char,
        o: *const btVector3,
        feature: *mut btSoftBody_Node,
    ) {
        btSoftBody_appendNote1(self, text, o, feature)
    }
    #[inline]
    pub unsafe fn appendNote2(
        &mut self,
        text: *const ::std::os::raw::c_char,
        o: *const btVector3,
        feature: *mut btSoftBody_Link,
    ) {
        btSoftBody_appendNote2(self, text, o, feature)
    }
    #[inline]
    pub unsafe fn appendNote3(
        &mut self,
        text: *const ::std::os::raw::c_char,
        o: *const btVector3,
        feature: *mut btSoftBody_Face,
    ) {
        btSoftBody_appendNote3(self, text, o, feature)
    }
    #[inline]
    pub unsafe fn appendNode(&mut self, x: *const btVector3, m: btScalar) {
        btSoftBody_appendNode(self, x, m)
    }
    #[inline]
    pub unsafe fn appendLink(
        &mut self,
        model: ::std::os::raw::c_int,
        mat: *mut btSoftBody_Material,
    ) {
        btSoftBody_appendLink(self, model, mat)
    }
    #[inline]
    pub unsafe fn appendLink1(
        &mut self,
        node0: ::std::os::raw::c_int,
        node1: ::std::os::raw::c_int,
        mat: *mut btSoftBody_Material,
        bcheckexist: bool,
    ) {
        btSoftBody_appendLink1(self, node0, node1, mat, bcheckexist)
    }
    #[inline]
    pub unsafe fn appendLink2(
        &mut self,
        node0: *mut btSoftBody_Node,
        node1: *mut btSoftBody_Node,
        mat: *mut btSoftBody_Material,
        bcheckexist: bool,
    ) {
        btSoftBody_appendLink2(self, node0, node1, mat, bcheckexist)
    }
    #[inline]
    pub unsafe fn appendFace(
        &mut self,
        model: ::std::os::raw::c_int,
        mat: *mut btSoftBody_Material,
    ) {
        btSoftBody_appendFace(self, model, mat)
    }
    #[inline]
    pub unsafe fn appendFace1(
        &mut self,
        node0: ::std::os::raw::c_int,
        node1: ::std::os::raw::c_int,
        node2: ::std::os::raw::c_int,
        mat: *mut btSoftBody_Material,
    ) {
        btSoftBody_appendFace1(self, node0, node1, node2, mat)
    }
    #[inline]
    pub unsafe fn appendTetra(
        &mut self,
        model: ::std::os::raw::c_int,
        mat: *mut btSoftBody_Material,
    ) {
        btSoftBody_appendTetra(self, model, mat)
    }
    #[inline]
    pub unsafe fn appendTetra1(
        &mut self,
        node0: ::std::os::raw::c_int,
        node1: ::std::os::raw::c_int,
        node2: ::std::os::raw::c_int,
        node3: ::std::os::raw::c_int,
        mat: *mut btSoftBody_Material,
    ) {
        btSoftBody_appendTetra1(self, node0, node1, node2, node3, mat)
    }
    #[inline]
    pub unsafe fn appendAnchor(
        &mut self,
        node: ::std::os::raw::c_int,
        body: *mut btRigidBody,
        disableCollisionBetweenLinkedBodies: bool,
        influence: btScalar,
    ) {
        btSoftBody_appendAnchor(
            self,
            node,
            body,
            disableCollisionBetweenLinkedBodies,
            influence,
        )
    }
    #[inline]
    pub unsafe fn appendAnchor1(
        &mut self,
        node: ::std::os::raw::c_int,
        body: *mut btRigidBody,
        localPivot: *const btVector3,
        disableCollisionBetweenLinkedBodies: bool,
        influence: btScalar,
    ) {
        btSoftBody_appendAnchor1(
            self,
            node,
            body,
            localPivot,
            disableCollisionBetweenLinkedBodies,
            influence,
        )
    }
    #[inline]
    pub unsafe fn appendLinearJoint(
        &mut self,
        specs: *const btSoftBody_LJoint_Specs,
        body0: *mut btSoftBody_Cluster,
        body1: btSoftBody_Body,
    ) {
        btSoftBody_appendLinearJoint(self, specs, body0, body1)
    }
    #[inline]
    pub unsafe fn appendLinearJoint1(
        &mut self,
        specs: *const btSoftBody_LJoint_Specs,
        body: btSoftBody_Body,
    ) {
        btSoftBody_appendLinearJoint1(self, specs, body)
    }
    #[inline]
    pub unsafe fn appendLinearJoint2(
        &mut self,
        specs: *const btSoftBody_LJoint_Specs,
        body: *mut btSoftBody,
    ) {
        btSoftBody_appendLinearJoint2(self, specs, body)
    }
    #[inline]
    pub unsafe fn appendAngularJoint(
        &mut self,
        specs: *const btSoftBody_AJoint_Specs,
        body0: *mut btSoftBody_Cluster,
        body1: btSoftBody_Body,
    ) {
        btSoftBody_appendAngularJoint(self, specs, body0, body1)
    }
    #[inline]
    pub unsafe fn appendAngularJoint1(
        &mut self,
        specs: *const btSoftBody_AJoint_Specs,
        body: btSoftBody_Body,
    ) {
        btSoftBody_appendAngularJoint1(self, specs, body)
    }
    #[inline]
    pub unsafe fn appendAngularJoint2(
        &mut self,
        specs: *const btSoftBody_AJoint_Specs,
        body: *mut btSoftBody,
    ) {
        btSoftBody_appendAngularJoint2(self, specs, body)
    }
    #[inline]
    pub unsafe fn addForce(&mut self, force: *const btVector3) {
        btSoftBody_addForce(self, force)
    }
    #[inline]
    pub unsafe fn addForce1(&mut self, force: *const btVector3, node: ::std::os::raw::c_int) {
        btSoftBody_addForce1(self, force, node)
    }
    #[inline]
    pub unsafe fn addAeroForceToNode(
        &mut self,
        windVelocity: *const btVector3,
        nodeIndex: ::std::os::raw::c_int,
    ) {
        btSoftBody_addAeroForceToNode(self, windVelocity, nodeIndex)
    }
    #[inline]
    pub unsafe fn addAeroForceToFace(
        &mut self,
        windVelocity: *const btVector3,
        faceIndex: ::std::os::raw::c_int,
    ) {
        btSoftBody_addAeroForceToFace(self, windVelocity, faceIndex)
    }
    #[inline]
    pub unsafe fn addVelocity(&mut self, velocity: *const btVector3) {
        btSoftBody_addVelocity(self, velocity)
    }
    #[inline]
    pub unsafe fn setVelocity(&mut self, velocity: *const btVector3) {
        btSoftBody_setVelocity(self, velocity)
    }
    #[inline]
    pub unsafe fn addVelocity1(&mut self, velocity: *const btVector3, node: ::std::os::raw::c_int) {
        btSoftBody_addVelocity1(self, velocity, node)
    }
    #[inline]
    pub unsafe fn setMass(&mut self, node: ::std::os::raw::c_int, mass: btScalar) {
        btSoftBody_setMass(self, node, mass)
    }
    #[inline]
    pub unsafe fn getMass(&self, node: ::std::os::raw::c_int) -> btScalar {
        btSoftBody_getMass(self, node)
    }
    #[inline]
    pub unsafe fn getTotalMass(&self) -> btScalar {
        btSoftBody_getTotalMass(self)
    }
    #[inline]
    pub unsafe fn setTotalMass(&mut self, mass: btScalar, fromfaces: bool) {
        btSoftBody_setTotalMass(self, mass, fromfaces)
    }
    #[inline]
    pub unsafe fn setTotalDensity(&mut self, density: btScalar) {
        btSoftBody_setTotalDensity(self, density)
    }
    #[inline]
    pub unsafe fn setVolumeMass(&mut self, mass: btScalar) {
        btSoftBody_setVolumeMass(self, mass)
    }
    #[inline]
    pub unsafe fn setVolumeDensity(&mut self, density: btScalar) {
        btSoftBody_setVolumeDensity(self, density)
    }
    #[inline]
    pub unsafe fn transform(&mut self, trs: *const btTransform) {
        btSoftBody_transform(self, trs)
    }
    #[inline]
    pub unsafe fn translate(&mut self, trs: *const btVector3) {
        btSoftBody_translate(self, trs)
    }
    #[inline]
    pub unsafe fn rotate(&mut self, rot: *const btQuaternion) {
        btSoftBody_rotate(self, rot)
    }
    #[inline]
    pub unsafe fn scale(&mut self, scl: *const btVector3) {
        btSoftBody_scale(self, scl)
    }
    #[inline]
    pub unsafe fn getRestLengthScale(&mut self) -> btScalar {
        btSoftBody_getRestLengthScale(self)
    }
    #[inline]
    pub unsafe fn setRestLengthScale(&mut self, restLength: btScalar) {
        btSoftBody_setRestLengthScale(self, restLength)
    }
    #[inline]
    pub unsafe fn setPose(&mut self, bvolume: bool, bframe: bool) {
        btSoftBody_setPose(self, bvolume, bframe)
    }
    #[inline]
    pub unsafe fn resetLinkRestLengths(&mut self) {
        btSoftBody_resetLinkRestLengths(self)
    }
    #[inline]
    pub unsafe fn getVolume(&self) -> btScalar {
        btSoftBody_getVolume(self)
    }
    #[inline]
    pub unsafe fn clusterCount(&self) -> ::std::os::raw::c_int {
        btSoftBody_clusterCount(self)
    }
    #[inline]
    pub unsafe fn clusterCom(cluster: *const btSoftBody_Cluster) -> btVector3 {
        btSoftBody_clusterCom(cluster)
    }
    #[inline]
    pub unsafe fn clusterCom1(&self, cluster: ::std::os::raw::c_int) -> btVector3 {
        btSoftBody_clusterCom1(self, cluster)
    }
    #[inline]
    pub unsafe fn clusterVelocity(
        cluster: *const btSoftBody_Cluster,
        rpos: *const btVector3,
    ) -> btVector3 {
        btSoftBody_clusterVelocity(cluster, rpos)
    }
    #[inline]
    pub unsafe fn clusterVImpulse(
        cluster: *mut btSoftBody_Cluster,
        rpos: *const btVector3,
        impulse: *const btVector3,
    ) {
        btSoftBody_clusterVImpulse(cluster, rpos, impulse)
    }
    #[inline]
    pub unsafe fn clusterDImpulse(
        cluster: *mut btSoftBody_Cluster,
        rpos: *const btVector3,
        impulse: *const btVector3,
    ) {
        btSoftBody_clusterDImpulse(cluster, rpos, impulse)
    }
    #[inline]
    pub unsafe fn clusterImpulse(
        cluster: *mut btSoftBody_Cluster,
        rpos: *const btVector3,
        impulse: *const btSoftBody_Impulse,
    ) {
        btSoftBody_clusterImpulse(cluster, rpos, impulse)
    }
    #[inline]
    pub unsafe fn clusterVAImpulse(cluster: *mut btSoftBody_Cluster, impulse: *const btVector3) {
        btSoftBody_clusterVAImpulse(cluster, impulse)
    }
    #[inline]
    pub unsafe fn clusterDAImpulse(cluster: *mut btSoftBody_Cluster, impulse: *const btVector3) {
        btSoftBody_clusterDAImpulse(cluster, impulse)
    }
    #[inline]
    pub unsafe fn clusterAImpulse(
        cluster: *mut btSoftBody_Cluster,
        impulse: *const btSoftBody_Impulse,
    ) {
        btSoftBody_clusterAImpulse(cluster, impulse)
    }
    #[inline]
    pub unsafe fn clusterDCImpulse(cluster: *mut btSoftBody_Cluster, impulse: *const btVector3) {
        btSoftBody_clusterDCImpulse(cluster, impulse)
    }
    #[inline]
    pub unsafe fn generateBendingConstraints(
        &mut self,
        distance: ::std::os::raw::c_int,
        mat: *mut btSoftBody_Material,
    ) -> ::std::os::raw::c_int {
        btSoftBody_generateBendingConstraints(self, distance, mat)
    }
    #[inline]
    pub unsafe fn randomizeConstraints(&mut self) {
        btSoftBody_randomizeConstraints(self)
    }
    #[inline]
    pub unsafe fn releaseCluster(&mut self, index: ::std::os::raw::c_int) {
        btSoftBody_releaseCluster(self, index)
    }
    #[inline]
    pub unsafe fn releaseClusters(&mut self) {
        btSoftBody_releaseClusters(self)
    }
    #[inline]
    pub unsafe fn generateClusters(
        &mut self,
        k: ::std::os::raw::c_int,
        maxiterations: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        btSoftBody_generateClusters(self, k, maxiterations)
    }
    #[inline]
    pub unsafe fn refine(
        &mut self,
        ifn: *mut btSoftBody_ImplicitFn,
        accurary: btScalar,
        cut: bool,
    ) {
        btSoftBody_refine(self, ifn, accurary, cut)
    }
    #[inline]
    pub unsafe fn cutLink(
        &mut self,
        node0: ::std::os::raw::c_int,
        node1: ::std::os::raw::c_int,
        position: btScalar,
    ) -> bool {
        btSoftBody_cutLink(self, node0, node1, position)
    }
    #[inline]
    pub unsafe fn cutLink1(
        &mut self,
        node0: *const btSoftBody_Node,
        node1: *const btSoftBody_Node,
        position: btScalar,
    ) -> bool {
        btSoftBody_cutLink1(self, node0, node1, position)
    }
    #[inline]
    pub unsafe fn rayTest(
        &mut self,
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
        results: *mut btSoftBody_sRayCast,
    ) -> bool {
        btSoftBody_rayTest(self, rayFrom, rayTo, results)
    }
    #[inline]
    pub unsafe fn setSolver(&mut self, preset: btSoftBody_eSolverPresets__) {
        btSoftBody_setSolver(self, preset)
    }
    #[inline]
    pub unsafe fn predictMotion(&mut self, dt: btScalar) {
        btSoftBody_predictMotion(self, dt)
    }
    #[inline]
    pub unsafe fn solveConstraints(&mut self) {
        btSoftBody_solveConstraints(self)
    }
    #[inline]
    pub unsafe fn staticSolve(&mut self, iterations: ::std::os::raw::c_int) {
        btSoftBody_staticSolve(self, iterations)
    }
    #[inline]
    pub unsafe fn solveCommonConstraints(
        bodies: *mut *mut btSoftBody,
        count: ::std::os::raw::c_int,
        iterations: ::std::os::raw::c_int,
    ) {
        btSoftBody_solveCommonConstraints(bodies, count, iterations)
    }
    #[inline]
    pub unsafe fn solveClusters(bodies: *const btAlignedObjectArray<*mut btSoftBody>) {
        btSoftBody_solveClusters(bodies)
    }
    #[inline]
    pub unsafe fn integrateMotion(&mut self) {
        btSoftBody_integrateMotion(self)
    }
    #[inline]
    pub unsafe fn defaultCollisionHandler(&mut self, pcoWrap: *const btCollisionObjectWrapper) {
        btSoftBody_defaultCollisionHandler(self, pcoWrap)
    }
    #[inline]
    pub unsafe fn defaultCollisionHandler1(&mut self, psb: *mut btSoftBody) {
        btSoftBody_defaultCollisionHandler1(self, psb)
    }
    #[inline]
    pub unsafe fn setWindVelocity(&mut self, velocity: *const btVector3) {
        btSoftBody_setWindVelocity(self, velocity)
    }
    #[inline]
    pub unsafe fn getWindVelocity(&mut self) -> *const btVector3 {
        btSoftBody_getWindVelocity(self)
    }
    #[inline]
    pub unsafe fn pointersToIndices(&mut self) {
        btSoftBody_pointersToIndices(self)
    }
    #[inline]
    pub unsafe fn indicesToPointers(&mut self, map: *const ::std::os::raw::c_int) {
        btSoftBody_indicesToPointers(self, map)
    }
    #[inline]
    pub unsafe fn rayTest1(
        &self,
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
        mint: *mut btScalar,
        feature: *mut btSoftBody_eFeature__,
        index: *mut ::std::os::raw::c_int,
        bcountonly: bool,
    ) -> ::std::os::raw::c_int {
        btSoftBody_rayTest1(self, rayFrom, rayTo, mint, feature, index, bcountonly)
    }
    #[inline]
    pub unsafe fn initializeFaceTree(&mut self) {
        btSoftBody_initializeFaceTree(self)
    }
    #[inline]
    pub unsafe fn evaluateCom(&self) -> btVector3 {
        btSoftBody_evaluateCom(self)
    }
    #[inline]
    pub unsafe fn checkContact(
        &self,
        colObjWrap: *const btCollisionObjectWrapper,
        x: *const btVector3,
        margin: btScalar,
        cti: *mut btSoftBody_sCti,
    ) -> bool {
        btSoftBody_checkContact(self, colObjWrap, x, margin, cti)
    }
    #[inline]
    pub unsafe fn updateNormals(&mut self) {
        btSoftBody_updateNormals(self)
    }
    #[inline]
    pub unsafe fn updateBounds(&mut self) {
        btSoftBody_updateBounds(self)
    }
    #[inline]
    pub unsafe fn updatePose(&mut self) {
        btSoftBody_updatePose(self)
    }
    #[inline]
    pub unsafe fn updateConstants(&mut self) {
        btSoftBody_updateConstants(self)
    }
    #[inline]
    pub unsafe fn updateLinkConstants(&mut self) {
        btSoftBody_updateLinkConstants(self)
    }
    #[inline]
    pub unsafe fn updateArea(&mut self, averageArea: bool) {
        btSoftBody_updateArea(self, averageArea)
    }
    #[inline]
    pub unsafe fn initializeClusters(&mut self) {
        btSoftBody_initializeClusters(self)
    }
    #[inline]
    pub unsafe fn updateClusters(&mut self) {
        btSoftBody_updateClusters(self)
    }
    #[inline]
    pub unsafe fn cleanupClusters(&mut self) {
        btSoftBody_cleanupClusters(self)
    }
    #[inline]
    pub unsafe fn prepareClusters(&mut self, iterations: ::std::os::raw::c_int) {
        btSoftBody_prepareClusters(self, iterations)
    }
    #[inline]
    pub unsafe fn solveClusters1(&mut self, sor: btScalar) {
        btSoftBody_solveClusters1(self, sor)
    }
    #[inline]
    pub unsafe fn applyClusters(&mut self, drift: bool) {
        btSoftBody_applyClusters(self, drift)
    }
    #[inline]
    pub unsafe fn dampClusters(&mut self) {
        btSoftBody_dampClusters(self)
    }
    #[inline]
    pub unsafe fn applyForces(&mut self) {
        btSoftBody_applyForces(self)
    }
    #[inline]
    pub unsafe fn PSolve_Anchors(psb: *mut btSoftBody, kst: btScalar, ti: btScalar) {
        btSoftBody_PSolve_Anchors(psb, kst, ti)
    }
    #[inline]
    pub unsafe fn PSolve_RContacts(psb: *mut btSoftBody, kst: btScalar, ti: btScalar) {
        btSoftBody_PSolve_RContacts(psb, kst, ti)
    }
    #[inline]
    pub unsafe fn PSolve_SContacts(psb: *mut btSoftBody, arg1: btScalar, ti: btScalar) {
        btSoftBody_PSolve_SContacts(psb, arg1, ti)
    }
    #[inline]
    pub unsafe fn PSolve_Links(psb: *mut btSoftBody, kst: btScalar, ti: btScalar) {
        btSoftBody_PSolve_Links(psb, kst, ti)
    }
    #[inline]
    pub unsafe fn VSolve_Links(psb: *mut btSoftBody, kst: btScalar) {
        btSoftBody_VSolve_Links(psb, kst)
    }
    #[inline]
    pub unsafe fn getSolver(solver: btSoftBody_ePSolver__) -> btSoftBody_psolver_t {
        btSoftBody_getSolver(solver)
    }
    #[inline]
    pub unsafe fn getSolver1(solver: btSoftBody_eVSolver__) -> btSoftBody_vsolver_t {
        btSoftBody_getSolver1(solver)
    }
    #[inline]
    pub unsafe fn new(
        worldInfo: *mut btSoftBodyWorldInfo,
        node_count: ::std::os::raw::c_int,
        x: *const btVector3,
        m: *const btScalar,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSoftBody_btSoftBody(&mut __bindgen_tmp, worldInfo, node_count, x, m);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(worldInfo: *mut btSoftBodyWorldInfo) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSoftBody_btSoftBody1(&mut __bindgen_tmp, worldInfo);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody5Joint7PrepareEfi"]
    pub fn btSoftBody_Joint_Prepare(
        this: *mut ::std::os::raw::c_void,
        dt: btScalar,
        iterations: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody6LJoint7PrepareEfi"]
    pub fn btSoftBody_LJoint_Prepare(
        this: *mut ::std::os::raw::c_void,
        dt: btScalar,
        iterations: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody6LJoint5SolveEff"]
    pub fn btSoftBody_LJoint_Solve(this: *mut ::std::os::raw::c_void, dt: btScalar, sor: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody6LJoint9TerminateEf"]
    pub fn btSoftBody_LJoint_Terminate(this: *mut ::std::os::raw::c_void, dt: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody6AJoint7PrepareEfi"]
    pub fn btSoftBody_AJoint_Prepare(
        this: *mut ::std::os::raw::c_void,
        dt: btScalar,
        iterations: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody6AJoint5SolveEff"]
    pub fn btSoftBody_AJoint_Solve(this: *mut ::std::os::raw::c_void, dt: btScalar, sor: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody6AJoint9TerminateEf"]
    pub fn btSoftBody_AJoint_Terminate(this: *mut ::std::os::raw::c_void, dt: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody6CJoint7PrepareEfi"]
    pub fn btSoftBody_CJoint_Prepare(
        this: *mut ::std::os::raw::c_void,
        dt: btScalar,
        iterations: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody6CJoint5SolveEff"]
    pub fn btSoftBody_CJoint_Solve(this: *mut ::std::os::raw::c_void, dt: btScalar, sor: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody6CJoint9TerminateEf"]
    pub fn btSoftBody_CJoint_Terminate(this: *mut ::std::os::raw::c_void, dt: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBody15RayFromToCaster7ProcessEPK10btDbvtNode"]
    pub fn btSoftBody_RayFromToCaster_Process(
        this: *mut ::std::os::raw::c_void,
        leaf: *const btDbvtNode,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10btSoftBodyD1Ev"]
    pub fn btSoftBody_btSoftBody_destructor(this: *mut btSoftBody);
}
extern "C" {
    #[link_name = "\u{1}_ZNK10btSoftBody28calculateSerializeBufferSizeEv"]
    pub fn btSoftBody_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK10btSoftBody9serializeEPvP12btSerializer"]
    pub fn btSoftBody_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBodyHelpers {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN17btSoftBodyHelpers4DrawEP10btSoftBodyP12btIDebugDrawi"]
    pub fn btSoftBodyHelpers_Draw(
        psb: *mut btSoftBody,
        idraw: *mut btIDebugDraw,
        drawflags: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btSoftBodyHelpers9DrawInfosEP10btSoftBodyP12btIDebugDrawbbb"]
    pub fn btSoftBodyHelpers_DrawInfos(
        psb: *mut btSoftBody,
        idraw: *mut btIDebugDraw,
        masses: bool,
        areas: bool,
        stress: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btSoftBodyHelpers12DrawNodeTreeEP10btSoftBodyP12btIDebugDrawii"]
    pub fn btSoftBodyHelpers_DrawNodeTree(
        psb: *mut btSoftBody,
        idraw: *mut btIDebugDraw,
        mindepth: ::std::os::raw::c_int,
        maxdepth: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btSoftBodyHelpers12DrawFaceTreeEP10btSoftBodyP12btIDebugDrawii"]
    pub fn btSoftBodyHelpers_DrawFaceTree(
        psb: *mut btSoftBody,
        idraw: *mut btIDebugDraw,
        mindepth: ::std::os::raw::c_int,
        maxdepth: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btSoftBodyHelpers15DrawClusterTreeEP10btSoftBodyP12btIDebugDrawii"]
    pub fn btSoftBodyHelpers_DrawClusterTree(
        psb: *mut btSoftBody,
        idraw: *mut btIDebugDraw,
        mindepth: ::std::os::raw::c_int,
        maxdepth: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btSoftBodyHelpers9DrawFrameEP10btSoftBodyP12btIDebugDraw"]
    pub fn btSoftBodyHelpers_DrawFrame(psb: *mut btSoftBody, idraw: *mut btIDebugDraw);
}
extern "C" {
    #[link_name = "\u{1}_ZN17btSoftBodyHelpers10CreateRopeER19btSoftBodyWorldInfoRK9btVector3S4_ii"]
    pub fn btSoftBodyHelpers_CreateRope(
        worldInfo: *mut btSoftBodyWorldInfo,
        from: *const btVector3,
        to: *const btVector3,
        res: ::std::os::raw::c_int,
        fixeds: ::std::os::raw::c_int,
    ) -> *mut btSoftBody;
}
extern "C" {
    #[link_name = "\u{1}_ZN17btSoftBodyHelpers11CreatePatchER19btSoftBodyWorldInfoRK9btVector3S4_S4_S4_iiib"]
    pub fn btSoftBodyHelpers_CreatePatch(
        worldInfo: *mut btSoftBodyWorldInfo,
        corner00: *const btVector3,
        corner10: *const btVector3,
        corner01: *const btVector3,
        corner11: *const btVector3,
        resx: ::std::os::raw::c_int,
        resy: ::std::os::raw::c_int,
        fixeds: ::std::os::raw::c_int,
        gendiags: bool,
    ) -> *mut btSoftBody;
}
extern "C" {
    #[link_name = "\u{1}_ZN17btSoftBodyHelpers13CreatePatchUVER19btSoftBodyWorldInfoRK9btVector3S4_S4_S4_iiibPf"]
    pub fn btSoftBodyHelpers_CreatePatchUV(
        worldInfo: *mut btSoftBodyWorldInfo,
        corner00: *const btVector3,
        corner10: *const btVector3,
        corner01: *const btVector3,
        corner11: *const btVector3,
        resx: ::std::os::raw::c_int,
        resy: ::std::os::raw::c_int,
        fixeds: ::std::os::raw::c_int,
        gendiags: bool,
        tex_coords: *mut f32,
    ) -> *mut btSoftBody;
}
extern "C" {
    #[link_name = "\u{1}_ZN17btSoftBodyHelpers11CalculateUVEiiiii"]
    pub fn btSoftBodyHelpers_CalculateUV(
        resx: ::std::os::raw::c_int,
        resy: ::std::os::raw::c_int,
        ix: ::std::os::raw::c_int,
        iy: ::std::os::raw::c_int,
        id: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN17btSoftBodyHelpers15CreateEllipsoidER19btSoftBodyWorldInfoRK9btVector3S4_i"]
    pub fn btSoftBodyHelpers_CreateEllipsoid(
        worldInfo: *mut btSoftBodyWorldInfo,
        center: *const btVector3,
        radius: *const btVector3,
        res: ::std::os::raw::c_int,
    ) -> *mut btSoftBody;
}
extern "C" {
    #[link_name = "\u{1}_ZN17btSoftBodyHelpers17CreateFromTriMeshER19btSoftBodyWorldInfoPKfPKiib"]
    pub fn btSoftBodyHelpers_CreateFromTriMesh(
        worldInfo: *mut btSoftBodyWorldInfo,
        vertices: *const btScalar,
        triangles: *const ::std::os::raw::c_int,
        ntriangles: ::std::os::raw::c_int,
        randomizeConstraints: bool,
    ) -> *mut btSoftBody;
}
extern "C" {
    #[link_name = "\u{1}_ZN17btSoftBodyHelpers20CreateFromConvexHullER19btSoftBodyWorldInfoPK9btVector3ib"]
    pub fn btSoftBodyHelpers_CreateFromConvexHull(
        worldInfo: *mut btSoftBodyWorldInfo,
        vertices: *const btVector3,
        nvertices: ::std::os::raw::c_int,
        randomizeConstraints: bool,
    ) -> *mut btSoftBody;
}
extern "C" {
    #[link_name = "\u{1}_ZN17btSoftBodyHelpers20CreateFromTetGenDataER19btSoftBodyWorldInfoPKcS3_S3_bbb"]
    pub fn btSoftBodyHelpers_CreateFromTetGenData(
        worldInfo: *mut btSoftBodyWorldInfo,
        ele: *const ::std::os::raw::c_char,
        face: *const ::std::os::raw::c_char,
        node: *const ::std::os::raw::c_char,
        bfacelinks: bool,
        btetralinks: bool,
        bfacesfromtetras: bool,
    ) -> *mut btSoftBody;
}
extern "C" {
    /// Sort the list of links to move link calculations that are dependent upon earlier
    /// /// ones as far as possible away from the calculation of those values
    /// /// This tends to make adjacent loop iterations not dependent upon one another,
    /// /// so out-of-order processors can execute instructions from multiple iterations at once
    #[link_name = "\u{1}_ZN17btSoftBodyHelpers19ReoptimizeLinkOrderEP10btSoftBody"]
    pub fn btSoftBodyHelpers_ReoptimizeLinkOrder(psb: *mut btSoftBody);
}
impl btSoftBodyHelpers {
    #[inline]
    pub unsafe fn Draw(
        psb: *mut btSoftBody,
        idraw: *mut btIDebugDraw,
        drawflags: ::std::os::raw::c_int,
    ) {
        btSoftBodyHelpers_Draw(psb, idraw, drawflags)
    }
    #[inline]
    pub unsafe fn DrawInfos(
        psb: *mut btSoftBody,
        idraw: *mut btIDebugDraw,
        masses: bool,
        areas: bool,
        stress: bool,
    ) {
        btSoftBodyHelpers_DrawInfos(psb, idraw, masses, areas, stress)
    }
    #[inline]
    pub unsafe fn DrawNodeTree(
        psb: *mut btSoftBody,
        idraw: *mut btIDebugDraw,
        mindepth: ::std::os::raw::c_int,
        maxdepth: ::std::os::raw::c_int,
    ) {
        btSoftBodyHelpers_DrawNodeTree(psb, idraw, mindepth, maxdepth)
    }
    #[inline]
    pub unsafe fn DrawFaceTree(
        psb: *mut btSoftBody,
        idraw: *mut btIDebugDraw,
        mindepth: ::std::os::raw::c_int,
        maxdepth: ::std::os::raw::c_int,
    ) {
        btSoftBodyHelpers_DrawFaceTree(psb, idraw, mindepth, maxdepth)
    }
    #[inline]
    pub unsafe fn DrawClusterTree(
        psb: *mut btSoftBody,
        idraw: *mut btIDebugDraw,
        mindepth: ::std::os::raw::c_int,
        maxdepth: ::std::os::raw::c_int,
    ) {
        btSoftBodyHelpers_DrawClusterTree(psb, idraw, mindepth, maxdepth)
    }
    #[inline]
    pub unsafe fn DrawFrame(psb: *mut btSoftBody, idraw: *mut btIDebugDraw) {
        btSoftBodyHelpers_DrawFrame(psb, idraw)
    }
    #[inline]
    pub unsafe fn CreateRope(
        worldInfo: *mut btSoftBodyWorldInfo,
        from: *const btVector3,
        to: *const btVector3,
        res: ::std::os::raw::c_int,
        fixeds: ::std::os::raw::c_int,
    ) -> *mut btSoftBody {
        btSoftBodyHelpers_CreateRope(worldInfo, from, to, res, fixeds)
    }
    #[inline]
    pub unsafe fn CreatePatch(
        worldInfo: *mut btSoftBodyWorldInfo,
        corner00: *const btVector3,
        corner10: *const btVector3,
        corner01: *const btVector3,
        corner11: *const btVector3,
        resx: ::std::os::raw::c_int,
        resy: ::std::os::raw::c_int,
        fixeds: ::std::os::raw::c_int,
        gendiags: bool,
    ) -> *mut btSoftBody {
        btSoftBodyHelpers_CreatePatch(
            worldInfo, corner00, corner10, corner01, corner11, resx, resy, fixeds, gendiags,
        )
    }
    #[inline]
    pub unsafe fn CreatePatchUV(
        worldInfo: *mut btSoftBodyWorldInfo,
        corner00: *const btVector3,
        corner10: *const btVector3,
        corner01: *const btVector3,
        corner11: *const btVector3,
        resx: ::std::os::raw::c_int,
        resy: ::std::os::raw::c_int,
        fixeds: ::std::os::raw::c_int,
        gendiags: bool,
        tex_coords: *mut f32,
    ) -> *mut btSoftBody {
        btSoftBodyHelpers_CreatePatchUV(
            worldInfo, corner00, corner10, corner01, corner11, resx, resy, fixeds, gendiags,
            tex_coords,
        )
    }
    #[inline]
    pub unsafe fn CalculateUV(
        resx: ::std::os::raw::c_int,
        resy: ::std::os::raw::c_int,
        ix: ::std::os::raw::c_int,
        iy: ::std::os::raw::c_int,
        id: ::std::os::raw::c_int,
    ) -> f32 {
        btSoftBodyHelpers_CalculateUV(resx, resy, ix, iy, id)
    }
    #[inline]
    pub unsafe fn CreateEllipsoid(
        worldInfo: *mut btSoftBodyWorldInfo,
        center: *const btVector3,
        radius: *const btVector3,
        res: ::std::os::raw::c_int,
    ) -> *mut btSoftBody {
        btSoftBodyHelpers_CreateEllipsoid(worldInfo, center, radius, res)
    }
    #[inline]
    pub unsafe fn CreateFromTriMesh(
        worldInfo: *mut btSoftBodyWorldInfo,
        vertices: *const btScalar,
        triangles: *const ::std::os::raw::c_int,
        ntriangles: ::std::os::raw::c_int,
        randomizeConstraints: bool,
    ) -> *mut btSoftBody {
        btSoftBodyHelpers_CreateFromTriMesh(
            worldInfo,
            vertices,
            triangles,
            ntriangles,
            randomizeConstraints,
        )
    }
    #[inline]
    pub unsafe fn CreateFromConvexHull(
        worldInfo: *mut btSoftBodyWorldInfo,
        vertices: *const btVector3,
        nvertices: ::std::os::raw::c_int,
        randomizeConstraints: bool,
    ) -> *mut btSoftBody {
        btSoftBodyHelpers_CreateFromConvexHull(worldInfo, vertices, nvertices, randomizeConstraints)
    }
    #[inline]
    pub unsafe fn CreateFromTetGenData(
        worldInfo: *mut btSoftBodyWorldInfo,
        ele: *const ::std::os::raw::c_char,
        face: *const ::std::os::raw::c_char,
        node: *const ::std::os::raw::c_char,
        bfacelinks: bool,
        btetralinks: bool,
        bfacesfromtetras: bool,
    ) -> *mut btSoftBody {
        btSoftBodyHelpers_CreateFromTetGenData(
            worldInfo,
            ele,
            face,
            node,
            bfacelinks,
            btetralinks,
            bfacesfromtetras,
        )
    }
    #[inline]
    pub unsafe fn ReoptimizeLinkOrder(psb: *mut btSoftBody) {
        btSoftBodyHelpers_ReoptimizeLinkOrder(psb)
    }
}
/// This class is used to compute the polar decomposition of a matrix. In
/// general, the polar decomposition factorizes a matrix, A, into two parts: a
/// unitary matrix (U) and a positive, semi-definite Hermitian matrix (H).
/// However, in this particular implementation the original matrix, A, is
/// required to be a square 3x3 matrix with real elements. This means that U will
/// be an orthogonal matrix and H with be a positive-definite, symmetric matrix.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btPolarDecomposition {
    pub m_tolerance: btScalar,
    pub m_maxIterations: ::std::os::raw::c_uint,
}
extern "C" {
    /// Decomposes a matrix into orthogonal and symmetric, positive-definite
    /// parts. If the number of iterations returned by this function is equal to
    /// the maximum number of iterations, the algorithm has failed to converge.
    ///
    /// @param a - the original matrix
    /// @param u - the resulting orthogonal matrix
    /// @param h - the resulting symmetric matrix
    ///
    /// @return the number of iterations performed by the algorithm.
    #[link_name = "\u{1}_ZNK20btPolarDecomposition9decomposeERK11btMatrix3x3RS0_S3_"]
    pub fn btPolarDecomposition_decompose(
        this: *const btPolarDecomposition,
        a: *const btMatrix3x3,
        u: *mut btMatrix3x3,
        h: *mut btMatrix3x3,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    /// Returns the maximum number of iterations that this algorithm will perform
    /// to achieve convergence.
    ///
    /// @return maximum number of iterations
    #[link_name = "\u{1}_ZNK20btPolarDecomposition13maxIterationsEv"]
    pub fn btPolarDecomposition_maxIterations(
        this: *const btPolarDecomposition,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    /// Creates an instance with optional parameters.
    ///
    /// @param tolerance     - the tolerance used to determine convergence of the
    /// algorithm
    /// @param maxIterations - the maximum number of iterations used to achieve
    /// convergence
    #[link_name = "\u{1}_ZN20btPolarDecompositionC1Efj"]
    pub fn btPolarDecomposition_btPolarDecomposition(
        this: *mut btPolarDecomposition,
        tolerance: btScalar,
        maxIterations: ::std::os::raw::c_uint,
    );
}
impl btPolarDecomposition {
    #[inline]
    pub unsafe fn decompose(
        &self,
        a: *const btMatrix3x3,
        u: *mut btMatrix3x3,
        h: *mut btMatrix3x3,
    ) -> ::std::os::raw::c_uint {
        btPolarDecomposition_decompose(self, a, u, h)
    }
    #[inline]
    pub unsafe fn maxIterations(&self) -> ::std::os::raw::c_uint {
        btPolarDecomposition_maxIterations(self)
    }
    #[inline]
    pub unsafe fn new(tolerance: btScalar, maxIterations: ::std::os::raw::c_uint) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btPolarDecomposition_btPolarDecomposition(&mut __bindgen_tmp, tolerance, maxIterations);
        __bindgen_tmp
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct btSymMatrix<T> {
    pub store: btAlignedObjectArray<T>,
    pub dim: ::std::os::raw::c_int,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBodyCollisionShape {
    pub _base: btConcaveShape,
    pub m_body: *mut btSoftBody,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftClusterCollisionShape {
    pub _base: btConvexInternalShape,
    pub m_cluster: *const btSoftBody_Cluster,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btEigen {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftColliders {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftColliders_ClusterBase {
    pub _base: btDbvt_ICollide,
    pub erp: btScalar,
    pub idt: btScalar,
    pub m_margin: btScalar,
    pub friction: btScalar,
    pub threshold: btScalar,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftColliders_CollideCL_RS {
    pub _base: btSoftColliders_ClusterBase,
    pub psb: *mut btSoftBody,
    pub m_colObjWrap: *const btCollisionObjectWrapper,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftColliders_CollideCL_SS {
    pub _base: btSoftColliders_ClusterBase,
    pub bodies: [*mut btSoftBody; 2usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftColliders_CollideSDF_RS {
    pub _base: btDbvt_ICollide,
    pub psb: *mut btSoftBody,
    pub m_colObj1Wrap: *const btCollisionObjectWrapper,
    pub m_rigidBody: *mut btRigidBody,
    pub dynmargin: btScalar,
    pub stamargin: btScalar,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftColliders_CollideVF_SS {
    pub _base: btDbvt_ICollide,
    pub psb: [*mut btSoftBody; 2usize],
    pub mrg: btScalar,
}
#[repr(C)]
pub struct btCollisionConfiguration__bindgen_vtable(::std::os::raw::c_void);
/// btCollisionConfiguration allows to configure Bullet collision detection
/// stack allocator size, default collision algorithms and persistent manifold pool size
/// @todo: describe the meaning
#[repr(C)]
#[derive(Debug)]
pub struct btCollisionConfiguration {
    pub vtable_: *const btCollisionConfiguration__bindgen_vtable,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btDefaultCollisionConstructionInfo {
    pub m_persistentManifoldPool: *mut btPoolAllocator,
    pub m_collisionAlgorithmPool: *mut btPoolAllocator,
    pub m_defaultMaxPersistentManifoldPoolSize: ::std::os::raw::c_int,
    pub m_defaultMaxCollisionAlgorithmPoolSize: ::std::os::raw::c_int,
    pub m_customCollisionAlgorithmMaxElementSize: ::std::os::raw::c_int,
    pub m_useEpaPenetrationAlgorithm: ::std::os::raw::c_int,
}
/// btCollisionConfiguration allows to configure Bullet collision detection
/// stack allocator, pool memory allocators
/// @todo: describe the meaning
#[repr(C)]
#[derive(Debug)]
pub struct btDefaultCollisionConfiguration {
    pub _base: btCollisionConfiguration,
    pub m_persistentManifoldPoolSize: ::std::os::raw::c_int,
    pub m_persistentManifoldPool: *mut btPoolAllocator,
    pub m_ownsPersistentManifoldPool: bool,
    pub m_collisionAlgorithmPool: *mut btPoolAllocator,
    pub m_ownsCollisionAlgorithmPool: bool,
    pub m_pdSolver: *mut btConvexPenetrationDepthSolver,
    pub m_convexConvexCreateFunc: *mut btCollisionAlgorithmCreateFunc,
    pub m_convexConcaveCreateFunc: *mut btCollisionAlgorithmCreateFunc,
    pub m_swappedConvexConcaveCreateFunc: *mut btCollisionAlgorithmCreateFunc,
    pub m_compoundCreateFunc: *mut btCollisionAlgorithmCreateFunc,
    pub m_compoundCompoundCreateFunc: *mut btCollisionAlgorithmCreateFunc,
    pub m_swappedCompoundCreateFunc: *mut btCollisionAlgorithmCreateFunc,
    pub m_emptyCreateFunc: *mut btCollisionAlgorithmCreateFunc,
    pub m_sphereSphereCF: *mut btCollisionAlgorithmCreateFunc,
    pub m_sphereBoxCF: *mut btCollisionAlgorithmCreateFunc,
    pub m_boxSphereCF: *mut btCollisionAlgorithmCreateFunc,
    pub m_boxBoxCF: *mut btCollisionAlgorithmCreateFunc,
    pub m_sphereTriangleCF: *mut btCollisionAlgorithmCreateFunc,
    pub m_triangleSphereCF: *mut btCollisionAlgorithmCreateFunc,
    pub m_planeConvexCF: *mut btCollisionAlgorithmCreateFunc,
    pub m_convexPlaneCF: *mut btCollisionAlgorithmCreateFunc,
}
extern "C" {
    /// Use this method to allow to generate multiple contact points between at once, between two objects using the generic convex-convex algorithm.
    /// ///By default, this feature is disabled for best performance.
    /// ///@param numPerturbationIterations controls the number of collision queries. Set it to zero to disable the feature.
    /// ///@param minimumPointsPerturbationThreshold is the minimum number of points in the contact cache, above which the feature is disabled
    /// ///3 is a good value for both params, if you want to enable the feature. This is because the default contact cache contains a maximum of 4 points, and one collision query at the unperturbed orientation is performed first.
    /// ///See Bullet/Demos/CollisionDemo for an example how this feature gathers multiple points.
    /// ///@todo we could add a per-object setting of those parameters, for level-of-detail collision detection.
    #[link_name = "\u{1}_ZN31btDefaultCollisionConfiguration35setConvexConvexMultipointIterationsEii"]
    pub fn btDefaultCollisionConfiguration_setConvexConvexMultipointIterations(
        this: *mut btDefaultCollisionConfiguration,
        numPerturbationIterations: ::std::os::raw::c_int,
        minimumPointsPerturbationThreshold: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN31btDefaultCollisionConfiguration34setPlaneConvexMultipointIterationsEii"]
    pub fn btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations(
        this: *mut btDefaultCollisionConfiguration,
        numPerturbationIterations: ::std::os::raw::c_int,
        minimumPointsPerturbationThreshold: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN31btDefaultCollisionConfigurationC1ERK34btDefaultCollisionConstructionInfo"]
    pub fn btDefaultCollisionConfiguration_btDefaultCollisionConfiguration(
        this: *mut btDefaultCollisionConfiguration,
        constructionInfo: *const btDefaultCollisionConstructionInfo,
    );
}
impl btDefaultCollisionConfiguration {
    #[inline]
    pub unsafe fn setConvexConvexMultipointIterations(
        &mut self,
        numPerturbationIterations: ::std::os::raw::c_int,
        minimumPointsPerturbationThreshold: ::std::os::raw::c_int,
    ) {
        btDefaultCollisionConfiguration_setConvexConvexMultipointIterations(
            self,
            numPerturbationIterations,
            minimumPointsPerturbationThreshold,
        )
    }
    #[inline]
    pub unsafe fn setPlaneConvexMultipointIterations(
        &mut self,
        numPerturbationIterations: ::std::os::raw::c_int,
        minimumPointsPerturbationThreshold: ::std::os::raw::c_int,
    ) {
        btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations(
            self,
            numPerturbationIterations,
            minimumPointsPerturbationThreshold,
        )
    }
    #[inline]
    pub unsafe fn new(constructionInfo: *const btDefaultCollisionConstructionInfo) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btDefaultCollisionConfiguration_btDefaultCollisionConfiguration(
            &mut __bindgen_tmp,
            constructionInfo,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN31btDefaultCollisionConfigurationD1Ev"]
    pub fn btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_destructor(
        this: *mut btDefaultCollisionConfiguration,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN31btDefaultCollisionConfiguration31getCollisionAlgorithmCreateFuncEii"]
    pub fn btDefaultCollisionConfiguration_getCollisionAlgorithmCreateFunc(
        this: *mut ::std::os::raw::c_void,
        proxyType0: ::std::os::raw::c_int,
        proxyType1: ::std::os::raw::c_int,
    ) -> *mut btCollisionAlgorithmCreateFunc;
}
extern "C" {
    #[link_name = "\u{1}_ZN31btDefaultCollisionConfiguration35getClosestPointsAlgorithmCreateFuncEii"]
    pub fn btDefaultCollisionConfiguration_getClosestPointsAlgorithmCreateFunc(
        this: *mut ::std::os::raw::c_void,
        proxyType0: ::std::os::raw::c_int,
        proxyType1: ::std::os::raw::c_int,
    ) -> *mut btCollisionAlgorithmCreateFunc;
}
/// btSoftBodyRigidBodyCollisionConfiguration add softbody interaction on top of btDefaultCollisionConfiguration
#[repr(C)]
#[derive(Debug)]
pub struct btSoftBodyRigidBodyCollisionConfiguration {
    pub _base: btDefaultCollisionConfiguration,
    pub m_softSoftCreateFunc: *mut btCollisionAlgorithmCreateFunc,
    pub m_softRigidConvexCreateFunc: *mut btCollisionAlgorithmCreateFunc,
    pub m_swappedSoftRigidConvexCreateFunc: *mut btCollisionAlgorithmCreateFunc,
    pub m_softRigidConcaveCreateFunc: *mut btCollisionAlgorithmCreateFunc,
    pub m_swappedSoftRigidConcaveCreateFunc: *mut btCollisionAlgorithmCreateFunc,
}
extern "C" {
    #[link_name = "\u{1}_ZN41btSoftBodyRigidBodyCollisionConfigurationC1ERK34btDefaultCollisionConstructionInfo"]
    pub fn btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration(
        this: *mut btSoftBodyRigidBodyCollisionConfiguration,
        constructionInfo: *const btDefaultCollisionConstructionInfo,
    );
}
impl btSoftBodyRigidBodyCollisionConfiguration {
    #[inline]
    pub unsafe fn new(constructionInfo: *const btDefaultCollisionConstructionInfo) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration(
            &mut __bindgen_tmp,
            constructionInfo,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN41btSoftBodyRigidBodyCollisionConfigurationD1Ev"]
    pub fn btSoftBodyRigidBodyCollisionConfiguration_btSoftBodyRigidBodyCollisionConfiguration_destructor(
        this: *mut btSoftBodyRigidBodyCollisionConfiguration,
    );
}
extern "C" {
    /// creation of soft-soft and soft-rigid, and otherwise fallback to base class implementation
    #[link_name = "\u{1}_ZN41btSoftBodyRigidBodyCollisionConfiguration31getCollisionAlgorithmCreateFuncEii"]
    pub fn btSoftBodyRigidBodyCollisionConfiguration_getCollisionAlgorithmCreateFunc(
        this: *mut ::std::os::raw::c_void,
        proxyType0: ::std::os::raw::c_int,
        proxyType1: ::std::os::raw::c_int,
    ) -> *mut btCollisionAlgorithmCreateFunc;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MultiBodyInplaceSolverIslandCallback {
    _unused: [u8; 0],
}
/// The btMultiBodyDynamicsWorld adds Featherstone multi body dynamics to Bullet
/// This implementation is still preliminary/experimental.
#[repr(C)]
#[derive(Debug)]
pub struct btMultiBodyDynamicsWorld {
    pub _base: btDiscreteDynamicsWorld,
    pub m_multiBodies: btAlignedObjectArray<*mut btMultiBody>,
    pub m_multiBodyConstraints: btAlignedObjectArray<*mut btMultiBodyConstraint>,
    pub m_sortedMultiBodyConstraints: btAlignedObjectArray<*mut btMultiBodyConstraint>,
    pub m_multiBodyConstraintSolver: *mut btMultiBodyConstraintSolver,
    pub m_solverMultiBodyIslandCallback: *mut MultiBodyInplaceSolverIslandCallback,
    pub m_scratch_world_to_local: btAlignedObjectArray<btQuaternion>,
    pub m_scratch_local_origin: btAlignedObjectArray<btVector3>,
    pub m_scratch_world_to_local1: btAlignedObjectArray<btQuaternion>,
    pub m_scratch_local_origin1: btAlignedObjectArray<btVector3>,
    pub m_scratch_r: btAlignedObjectArray<btScalar>,
    pub m_scratch_v: btAlignedObjectArray<btVector3>,
    pub m_scratch_m: btAlignedObjectArray<btMatrix3x3>,
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld17forwardKinematicsEv"]
    pub fn btMultiBodyDynamicsWorld_forwardKinematics(this: *mut btMultiBodyDynamicsWorld);
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorldC1EP12btDispatcherP21btBroadphaseInterfaceP27btMultiBodyConstraintSolverP24btCollisionConfiguration"]
    pub fn btMultiBodyDynamicsWorld_btMultiBodyDynamicsWorld(
        this: *mut btMultiBodyDynamicsWorld,
        dispatcher: *mut btDispatcher,
        pairCache: *mut btBroadphaseInterface,
        constraintSolver: *mut btMultiBodyConstraintSolver,
        collisionConfiguration: *mut btCollisionConfiguration,
    );
}
impl btMultiBodyDynamicsWorld {
    #[inline]
    pub unsafe fn forwardKinematics(&mut self) {
        btMultiBodyDynamicsWorld_forwardKinematics(self)
    }
    #[inline]
    pub unsafe fn new(
        dispatcher: *mut btDispatcher,
        pairCache: *mut btBroadphaseInterface,
        constraintSolver: *mut btMultiBodyConstraintSolver,
        collisionConfiguration: *mut btCollisionConfiguration,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMultiBodyDynamicsWorld_btMultiBodyDynamicsWorld(
            &mut __bindgen_tmp,
            dispatcher,
            pairCache,
            constraintSolver,
            collisionConfiguration,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld26calculateSimulationIslandsEv"]
    pub fn btMultiBodyDynamicsWorld_calculateSimulationIslands(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld21updateActivationStateEf"]
    pub fn btMultiBodyDynamicsWorld_updateActivationState(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld16solveConstraintsER19btContactSolverInfo"]
    pub fn btMultiBodyDynamicsWorld_solveConstraints(
        this: *mut ::std::os::raw::c_void,
        solverInfo: *mut btContactSolverInfo,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld20serializeMultiBodiesEP12btSerializer"]
    pub fn btMultiBodyDynamicsWorld_serializeMultiBodies(
        this: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorldD1Ev"]
    pub fn btMultiBodyDynamicsWorld_btMultiBodyDynamicsWorld_destructor(
        this: *mut btMultiBodyDynamicsWorld,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld12addMultiBodyEP11btMultiBodyii"]
    pub fn btMultiBodyDynamicsWorld_addMultiBody(
        this: *mut ::std::os::raw::c_void,
        body: *mut btMultiBody,
        group: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld15removeMultiBodyEP11btMultiBody"]
    pub fn btMultiBodyDynamicsWorld_removeMultiBody(
        this: *mut ::std::os::raw::c_void,
        body: *mut btMultiBody,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld22addMultiBodyConstraintEP21btMultiBodyConstraint"]
    pub fn btMultiBodyDynamicsWorld_addMultiBodyConstraint(
        this: *mut ::std::os::raw::c_void,
        constraint: *mut btMultiBodyConstraint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld25removeMultiBodyConstraintEP21btMultiBodyConstraint"]
    pub fn btMultiBodyDynamicsWorld_removeMultiBodyConstraint(
        this: *mut ::std::os::raw::c_void,
        constraint: *mut btMultiBodyConstraint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld19integrateTransformsEf"]
    pub fn btMultiBodyDynamicsWorld_integrateTransforms(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld14debugDrawWorldEv"]
    pub fn btMultiBodyDynamicsWorld_debugDrawWorld(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld28debugDrawMultiBodyConstraintEP21btMultiBodyConstraint"]
    pub fn btMultiBodyDynamicsWorld_debugDrawMultiBodyConstraint(
        this: *mut ::std::os::raw::c_void,
        constraint: *mut btMultiBodyConstraint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld11clearForcesEv"]
    pub fn btMultiBodyDynamicsWorld_clearForces(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld30clearMultiBodyConstraintForcesEv"]
    pub fn btMultiBodyDynamicsWorld_clearMultiBodyConstraintForces(
        this: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld20clearMultiBodyForcesEv"]
    pub fn btMultiBodyDynamicsWorld_clearMultiBodyForces(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld12applyGravityEv"]
    pub fn btMultiBodyDynamicsWorld_applyGravity(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN24btMultiBodyDynamicsWorld9serializeEP12btSerializer"]
    pub fn btMultiBodyDynamicsWorld_serialize(
        this: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    );
}
pub type btSoftBodyArray = btAlignedObjectArray<*mut btSoftBody>;
#[repr(C)]
#[derive(Debug)]
pub struct btSoftMultiBodyDynamicsWorld {
    pub _base: btMultiBodyDynamicsWorld,
    pub m_softBodies: btSoftBodyArray,
    pub m_drawFlags: ::std::os::raw::c_int,
    pub m_drawNodeTree: bool,
    pub m_drawFaceTree: bool,
    pub m_drawClusterTree: bool,
    pub m_sbi: btSoftBodyWorldInfo,
    /// Solver classes that encapsulate multiple soft bodies for solving
    pub m_softBodySolver: *mut btSoftBodySolver,
    pub m_ownsSolver: bool,
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSoftMultiBodyDynamicsWorld26solveSoftBodiesConstraintsEf"]
    pub fn btSoftMultiBodyDynamicsWorld_solveSoftBodiesConstraints(
        this: *mut btSoftMultiBodyDynamicsWorld,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSoftMultiBodyDynamicsWorld19serializeSoftBodiesEP12btSerializer"]
    pub fn btSoftMultiBodyDynamicsWorld_serializeSoftBodies(
        this: *mut btSoftMultiBodyDynamicsWorld,
        serializer: *mut btSerializer,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSoftMultiBodyDynamicsWorld11addSoftBodyEP10btSoftBodyii"]
    pub fn btSoftMultiBodyDynamicsWorld_addSoftBody(
        this: *mut btSoftMultiBodyDynamicsWorld,
        body: *mut btSoftBody,
        collisionFilterGroup: ::std::os::raw::c_int,
        collisionFilterMask: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSoftMultiBodyDynamicsWorld14removeSoftBodyEP10btSoftBody"]
    pub fn btSoftMultiBodyDynamicsWorld_removeSoftBody(
        this: *mut btSoftMultiBodyDynamicsWorld,
        body: *mut btSoftBody,
    );
}
extern "C" {
    /// rayTestSingle performs a raycast call and calls the resultCallback. It is used internally by rayTest.
    /// /// In a future implementation, we consider moving the ray test as a virtual method in btCollisionShape.
    /// /// This allows more customization.
    #[link_name = "\u{1}_ZN28btSoftMultiBodyDynamicsWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RN16btCollisionWorld17RayResultCallbackE"]
    pub fn btSoftMultiBodyDynamicsWorld_rayTestSingle(
        rayFromTrans: *const btTransform,
        rayToTrans: *const btTransform,
        collisionObject: *mut btCollisionObject,
        collisionShape: *const btCollisionShape,
        colObjWorldTransform: *const btTransform,
        resultCallback: *mut btCollisionWorld_RayResultCallback,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSoftMultiBodyDynamicsWorldC1EP12btDispatcherP21btBroadphaseInterfaceP27btMultiBodyConstraintSolverP24btCollisionConfigurationP16btSoftBodySolver"]
    pub fn btSoftMultiBodyDynamicsWorld_btSoftMultiBodyDynamicsWorld(
        this: *mut btSoftMultiBodyDynamicsWorld,
        dispatcher: *mut btDispatcher,
        pairCache: *mut btBroadphaseInterface,
        constraintSolver: *mut btMultiBodyConstraintSolver,
        collisionConfiguration: *mut btCollisionConfiguration,
        softBodySolver: *mut btSoftBodySolver,
    );
}
impl btSoftMultiBodyDynamicsWorld {
    #[inline]
    pub unsafe fn solveSoftBodiesConstraints(&mut self, timeStep: btScalar) {
        btSoftMultiBodyDynamicsWorld_solveSoftBodiesConstraints(self, timeStep)
    }
    #[inline]
    pub unsafe fn serializeSoftBodies(&mut self, serializer: *mut btSerializer) {
        btSoftMultiBodyDynamicsWorld_serializeSoftBodies(self, serializer)
    }
    #[inline]
    pub unsafe fn addSoftBody(
        &mut self,
        body: *mut btSoftBody,
        collisionFilterGroup: ::std::os::raw::c_int,
        collisionFilterMask: ::std::os::raw::c_int,
    ) {
        btSoftMultiBodyDynamicsWorld_addSoftBody(
            self,
            body,
            collisionFilterGroup,
            collisionFilterMask,
        )
    }
    #[inline]
    pub unsafe fn removeSoftBody(&mut self, body: *mut btSoftBody) {
        btSoftMultiBodyDynamicsWorld_removeSoftBody(self, body)
    }
    #[inline]
    pub unsafe fn rayTestSingle(
        rayFromTrans: *const btTransform,
        rayToTrans: *const btTransform,
        collisionObject: *mut btCollisionObject,
        collisionShape: *const btCollisionShape,
        colObjWorldTransform: *const btTransform,
        resultCallback: *mut btCollisionWorld_RayResultCallback,
    ) {
        btSoftMultiBodyDynamicsWorld_rayTestSingle(
            rayFromTrans,
            rayToTrans,
            collisionObject,
            collisionShape,
            colObjWorldTransform,
            resultCallback,
        )
    }
    #[inline]
    pub unsafe fn new(
        dispatcher: *mut btDispatcher,
        pairCache: *mut btBroadphaseInterface,
        constraintSolver: *mut btMultiBodyConstraintSolver,
        collisionConfiguration: *mut btCollisionConfiguration,
        softBodySolver: *mut btSoftBodySolver,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSoftMultiBodyDynamicsWorld_btSoftMultiBodyDynamicsWorld(
            &mut __bindgen_tmp,
            dispatcher,
            pairCache,
            constraintSolver,
            collisionConfiguration,
            softBodySolver,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSoftMultiBodyDynamicsWorld25predictUnconstraintMotionEf"]
    pub fn btSoftMultiBodyDynamicsWorld_predictUnconstraintMotion(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSoftMultiBodyDynamicsWorld28internalSingleStepSimulationEf"]
    pub fn btSoftMultiBodyDynamicsWorld_internalSingleStepSimulation(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSoftMultiBodyDynamicsWorldD1Ev"]
    pub fn btSoftMultiBodyDynamicsWorld_btSoftMultiBodyDynamicsWorld_destructor(
        this: *mut btSoftMultiBodyDynamicsWorld,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSoftMultiBodyDynamicsWorld14debugDrawWorldEv"]
    pub fn btSoftMultiBodyDynamicsWorld_debugDrawWorld(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    /// removeCollisionObject will first check if it is a rigid body, if so call removeRigidBody otherwise call btDiscreteDynamicsWorld::removeCollisionObject
    #[link_name = "\u{1}_ZN28btSoftMultiBodyDynamicsWorld21removeCollisionObjectEP17btCollisionObject"]
    pub fn btSoftMultiBodyDynamicsWorld_removeCollisionObject(
        this: *mut ::std::os::raw::c_void,
        collisionObject: *mut btCollisionObject,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK28btSoftMultiBodyDynamicsWorld7rayTestERK9btVector3S2_RN16btCollisionWorld17RayResultCallbackE"]
    pub fn btSoftMultiBodyDynamicsWorld_rayTest(
        this: *mut ::std::os::raw::c_void,
        rayFromWorld: *const btVector3,
        rayToWorld: *const btVector3,
        resultCallback: *mut btCollisionWorld_RayResultCallback,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSoftMultiBodyDynamicsWorld9serializeEP12btSerializer"]
    pub fn btSoftMultiBodyDynamicsWorld_serialize(
        this: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    );
}
/// btSoftRigidCollisionAlgorithm  provides collision detection between btSoftBody and btRigidBody
#[repr(C)]
#[derive(Debug)]
pub struct btSoftRigidCollisionAlgorithm {
    pub _base: btCollisionAlgorithm,
    /// for rigid versus soft (instead of soft versus rigid), we use this swapped boolean
    pub m_isSwapped: bool,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftRigidCollisionAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
extern "C" {
    #[link_name = "\u{1}_ZN29btSoftRigidCollisionAlgorithmC1EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS7_b"]
    pub fn btSoftRigidCollisionAlgorithm_btSoftRigidCollisionAlgorithm(
        this: *mut btSoftRigidCollisionAlgorithm,
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        col0: *const btCollisionObjectWrapper,
        col1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    );
}
impl btSoftRigidCollisionAlgorithm {
    #[inline]
    pub unsafe fn new(
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        col0: *const btCollisionObjectWrapper,
        col1Wrap: *const btCollisionObjectWrapper,
        isSwapped: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSoftRigidCollisionAlgorithm_btSoftRigidCollisionAlgorithm(
            &mut __bindgen_tmp,
            mf,
            ci,
            col0,
            col1Wrap,
            isSwapped,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN29btSoftRigidCollisionAlgorithmD1Ev"]
    pub fn btSoftRigidCollisionAlgorithm_btSoftRigidCollisionAlgorithm_destructor(
        this: *mut btSoftRigidCollisionAlgorithm,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN29btSoftRigidCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btSoftRigidCollisionAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN29btSoftRigidCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btSoftRigidCollisionAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftRigidDynamicsWorld {
    pub _base: btDiscreteDynamicsWorld,
    pub m_softBodies: btSoftBodyArray,
    pub m_drawFlags: ::std::os::raw::c_int,
    pub m_drawNodeTree: bool,
    pub m_drawFaceTree: bool,
    pub m_drawClusterTree: bool,
    pub m_sbi: btSoftBodyWorldInfo,
    /// Solver classes that encapsulate multiple soft bodies for solving
    pub m_softBodySolver: *mut btSoftBodySolver,
    pub m_ownsSolver: bool,
}
extern "C" {
    #[link_name = "\u{1}_ZN24btSoftRigidDynamicsWorld26solveSoftBodiesConstraintsEf"]
    pub fn btSoftRigidDynamicsWorld_solveSoftBodiesConstraints(
        this: *mut btSoftRigidDynamicsWorld,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btSoftRigidDynamicsWorld19serializeSoftBodiesEP12btSerializer"]
    pub fn btSoftRigidDynamicsWorld_serializeSoftBodies(
        this: *mut btSoftRigidDynamicsWorld,
        serializer: *mut btSerializer,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btSoftRigidDynamicsWorld11addSoftBodyEP10btSoftBodyii"]
    pub fn btSoftRigidDynamicsWorld_addSoftBody(
        this: *mut btSoftRigidDynamicsWorld,
        body: *mut btSoftBody,
        collisionFilterGroup: ::std::os::raw::c_int,
        collisionFilterMask: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btSoftRigidDynamicsWorld14removeSoftBodyEP10btSoftBody"]
    pub fn btSoftRigidDynamicsWorld_removeSoftBody(
        this: *mut btSoftRigidDynamicsWorld,
        body: *mut btSoftBody,
    );
}
extern "C" {
    /// rayTestSingle performs a raycast call and calls the resultCallback. It is used internally by rayTest.
    /// /// In a future implementation, we consider moving the ray test as a virtual method in btCollisionShape.
    /// /// This allows more customization.
    #[link_name = "\u{1}_ZN24btSoftRigidDynamicsWorld13rayTestSingleERK11btTransformS2_P17btCollisionObjectPK16btCollisionShapeS2_RN16btCollisionWorld17RayResultCallbackE"]
    pub fn btSoftRigidDynamicsWorld_rayTestSingle(
        rayFromTrans: *const btTransform,
        rayToTrans: *const btTransform,
        collisionObject: *mut btCollisionObject,
        collisionShape: *const btCollisionShape,
        colObjWorldTransform: *const btTransform,
        resultCallback: *mut btCollisionWorld_RayResultCallback,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btSoftRigidDynamicsWorldC1EP12btDispatcherP21btBroadphaseInterfaceP18btConstraintSolverP24btCollisionConfigurationP16btSoftBodySolver"]
    pub fn btSoftRigidDynamicsWorld_btSoftRigidDynamicsWorld(
        this: *mut btSoftRigidDynamicsWorld,
        dispatcher: *mut btDispatcher,
        pairCache: *mut btBroadphaseInterface,
        constraintSolver: *mut btConstraintSolver,
        collisionConfiguration: *mut btCollisionConfiguration,
        softBodySolver: *mut btSoftBodySolver,
    );
}
impl btSoftRigidDynamicsWorld {
    #[inline]
    pub unsafe fn solveSoftBodiesConstraints(&mut self, timeStep: btScalar) {
        btSoftRigidDynamicsWorld_solveSoftBodiesConstraints(self, timeStep)
    }
    #[inline]
    pub unsafe fn serializeSoftBodies(&mut self, serializer: *mut btSerializer) {
        btSoftRigidDynamicsWorld_serializeSoftBodies(self, serializer)
    }
    #[inline]
    pub unsafe fn addSoftBody(
        &mut self,
        body: *mut btSoftBody,
        collisionFilterGroup: ::std::os::raw::c_int,
        collisionFilterMask: ::std::os::raw::c_int,
    ) {
        btSoftRigidDynamicsWorld_addSoftBody(self, body, collisionFilterGroup, collisionFilterMask)
    }
    #[inline]
    pub unsafe fn removeSoftBody(&mut self, body: *mut btSoftBody) {
        btSoftRigidDynamicsWorld_removeSoftBody(self, body)
    }
    #[inline]
    pub unsafe fn rayTestSingle(
        rayFromTrans: *const btTransform,
        rayToTrans: *const btTransform,
        collisionObject: *mut btCollisionObject,
        collisionShape: *const btCollisionShape,
        colObjWorldTransform: *const btTransform,
        resultCallback: *mut btCollisionWorld_RayResultCallback,
    ) {
        btSoftRigidDynamicsWorld_rayTestSingle(
            rayFromTrans,
            rayToTrans,
            collisionObject,
            collisionShape,
            colObjWorldTransform,
            resultCallback,
        )
    }
    #[inline]
    pub unsafe fn new(
        dispatcher: *mut btDispatcher,
        pairCache: *mut btBroadphaseInterface,
        constraintSolver: *mut btConstraintSolver,
        collisionConfiguration: *mut btCollisionConfiguration,
        softBodySolver: *mut btSoftBodySolver,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSoftRigidDynamicsWorld_btSoftRigidDynamicsWorld(
            &mut __bindgen_tmp,
            dispatcher,
            pairCache,
            constraintSolver,
            collisionConfiguration,
            softBodySolver,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN24btSoftRigidDynamicsWorld25predictUnconstraintMotionEf"]
    pub fn btSoftRigidDynamicsWorld_predictUnconstraintMotion(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btSoftRigidDynamicsWorld28internalSingleStepSimulationEf"]
    pub fn btSoftRigidDynamicsWorld_internalSingleStepSimulation(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btSoftRigidDynamicsWorldD1Ev"]
    pub fn btSoftRigidDynamicsWorld_btSoftRigidDynamicsWorld_destructor(
        this: *mut btSoftRigidDynamicsWorld,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btSoftRigidDynamicsWorld14debugDrawWorldEv"]
    pub fn btSoftRigidDynamicsWorld_debugDrawWorld(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    /// removeCollisionObject will first check if it is a rigid body, if so call removeRigidBody otherwise call btDiscreteDynamicsWorld::removeCollisionObject
    #[link_name = "\u{1}_ZN24btSoftRigidDynamicsWorld21removeCollisionObjectEP17btCollisionObject"]
    pub fn btSoftRigidDynamicsWorld_removeCollisionObject(
        this: *mut ::std::os::raw::c_void,
        collisionObject: *mut btCollisionObject,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK24btSoftRigidDynamicsWorld7rayTestERK9btVector3S2_RN16btCollisionWorld17RayResultCallbackE"]
    pub fn btSoftRigidDynamicsWorld_rayTest(
        this: *mut ::std::os::raw::c_void,
        rayFromWorld: *const btVector3,
        rayToWorld: *const btVector3,
        resultCallback: *mut btCollisionWorld_RayResultCallback,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24btSoftRigidDynamicsWorld9serializeEP12btSerializer"]
    pub fn btSoftRigidDynamicsWorld_serialize(
        this: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    );
}
/// collision detection between two btSoftBody shapes
#[repr(C)]
#[derive(Debug)]
pub struct btSoftSoftCollisionAlgorithm {
    pub _base: btCollisionAlgorithm,
    pub m_ownManifold: bool,
    pub m_manifoldPtr: *mut btPersistentManifold,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSoftSoftCollisionAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSoftSoftCollisionAlgorithmC1EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS7_"]
    pub fn btSoftSoftCollisionAlgorithm_btSoftSoftCollisionAlgorithm(
        this: *mut btSoftSoftCollisionAlgorithm,
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
    );
}
impl btSoftSoftCollisionAlgorithm {
    #[inline]
    pub unsafe fn new(
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSoftSoftCollisionAlgorithm_btSoftSoftCollisionAlgorithm(
            &mut __bindgen_tmp,
            mf,
            ci,
            body0Wrap,
            body1Wrap,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSoftSoftCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btSoftSoftCollisionAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSoftSoftCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btSoftSoftCollisionAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN28btSoftSoftCollisionAlgorithmD1Ev"]
    pub fn btSoftSoftCollisionAlgorithm_btSoftSoftCollisionAlgorithm_destructor(
        this: *mut btSoftSoftCollisionAlgorithm,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btPlane {
    pub normal: btVector3,
    pub dist: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConvexH_HalfEdge {
    pub ea: ::std::os::raw::c_short,
    pub v: ::std::os::raw::c_uchar,
    pub p: ::std::os::raw::c_uchar,
}
/// Convex hull implementation based on Preparata and Hong
/// See http://code.google.com/p/bullet/issues/detail?id=275
/// Ole Kniemeyer, MAXON Computer GmbH
#[repr(C)]
#[derive(Debug)]
pub struct btConvexHullComputer {
    pub vertices: btAlignedObjectArray<btVector3>,
    pub edges: btAlignedObjectArray<btConvexHullComputer_Edge>,
    pub faces: btAlignedObjectArray<::std::os::raw::c_int>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btConvexHullComputer_Edge {
    pub next: ::std::os::raw::c_int,
    pub reverse: ::std::os::raw::c_int,
    pub targetVertex: ::std::os::raw::c_int,
}
/// Rudimentary btCpuFeatureUtility for CPU features: only report the features that Bullet actually uses (SSE4/FMA3, NEON_HPFP)
/// We assume SSE2 in case BT_USE_SSE2 is defined in LinearMath/btScalar.h
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCpuFeatureUtility {
    pub _address: u8,
}
pub const btCpuFeatureUtility_btCpuFeature_CPU_FEATURE_FMA3: btCpuFeatureUtility_btCpuFeature = 1;
pub const btCpuFeatureUtility_btCpuFeature_CPU_FEATURE_SSE4_1: btCpuFeatureUtility_btCpuFeature = 2;
pub const btCpuFeatureUtility_btCpuFeature_CPU_FEATURE_NEON_HPFP: btCpuFeatureUtility_btCpuFeature =
    4;
pub type btCpuFeatureUtility_btCpuFeature = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GrahamVector3 {
    pub _base: btVector3,
    pub m_angle: btScalar,
    pub m_orgIndex: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btAngleCompareFunc {
    pub m_anchor: btVector3,
}
/// The btPoolAllocator class allows to efficiently allocate a large pool of objects, instead of dynamically allocating them separately.
#[repr(C)]
#[derive(Debug)]
pub struct btPoolAllocator {
    pub m_elemSize: ::std::os::raw::c_int,
    pub m_maxElements: ::std::os::raw::c_int,
    pub m_freeCount: ::std::os::raw::c_int,
    pub m_firstFree: *mut ::std::os::raw::c_void,
    pub m_pool: *mut ::std::os::raw::c_uchar,
    pub m_mutex: btSpinMutex,
}
/// The btBlock class is an internal structure for the btStackAlloc memory allocator.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btBlock {
    pub previous: *mut btBlock,
    pub address: *mut ::std::os::raw::c_uchar,
}
/// The StackAlloc class provides some fast stack-based memory allocator (LIFO last-in first-out)
#[repr(C)]
#[derive(Debug)]
pub struct btStackAlloc {
    pub data: *mut ::std::os::raw::c_uchar,
    pub totalsize: ::std::os::raw::c_uint,
    pub usedsize: ::std::os::raw::c_uint,
    pub current: *mut btBlock,
    pub ischild: bool,
}
/// The btSphereShape implements an implicit sphere, centered around a local origin with radius.
#[repr(C)]
#[derive(Debug)]
pub struct btSphereShape {
    pub _base: btConvexInternalShape,
}
extern "C" {
    #[link_name = "\u{1}_ZNK13btSphereShape24localGetSupportingVertexERK9btVector3"]
    pub fn btSphereShape_localGetSupportingVertex(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13btSphereShape37localGetSupportingVertexWithoutMarginERK9btVector3"]
    pub fn btSphereShape_localGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13btSphereShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i"]
    pub fn btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vectors: *const btVector3,
        supportVerticesOut: *mut btVector3,
        numVectors: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK13btSphereShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btSphereShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK13btSphereShape7getAabbERK11btTransformR9btVector3S4_"]
    pub fn btSphereShape_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
/// The btCapsuleShape represents a capsule around the Y axis, there is also the btCapsuleShapeX aligned around the X axis and btCapsuleShapeZ around the Z axis.
/// The total height is height+2*radius, so the height is just the height between the center of each 'sphere' of the capsule caps.
/// The btCapsuleShape is a convex hull of two spheres. The btMultiSphereShape is a more general collision shape that takes the convex hull of multiple sphere, so it can also represent a capsule when just using two spheres.
#[repr(C)]
#[derive(Debug)]
pub struct btCapsuleShape {
    pub _base: btConvexInternalShape,
    pub m_upAxis: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN14btCapsuleShapeC1Eff"]
    pub fn btCapsuleShape_btCapsuleShape(
        this: *mut btCapsuleShape,
        radius: btScalar,
        height: btScalar,
    );
}
impl btCapsuleShape {
    #[inline]
    pub unsafe fn new(radius: btScalar, height: btScalar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btCapsuleShape_btCapsuleShape(&mut __bindgen_tmp, radius, height);
        __bindgen_tmp
    }
}
extern "C" {
    /// CollisionShape Interface
    #[link_name = "\u{1}_ZNK14btCapsuleShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btCapsuleShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
extern "C" {
    /// btConvexShape Interface
    #[link_name = "\u{1}_ZNK14btCapsuleShape37localGetSupportingVertexWithoutMarginERK9btVector3"]
    pub fn btCapsuleShape_localGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK14btCapsuleShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i"]
    pub fn btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vectors: *const btVector3,
        supportVerticesOut: *mut btVector3,
        numVectors: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK14btCapsuleShape28calculateSerializeBufferSizeEv"]
    pub fn btCapsuleShape_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK14btCapsuleShape9serializeEPvP12btSerializer"]
    pub fn btCapsuleShape_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
/// btCapsuleShapeX represents a capsule around the Z axis
/// the total height is height+2*radius, so the height is just the height between the center of each 'sphere' of the capsule caps.
#[repr(C)]
#[derive(Debug)]
pub struct btCapsuleShapeX {
    pub _base: btCapsuleShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN15btCapsuleShapeXC1Eff"]
    pub fn btCapsuleShapeX_btCapsuleShapeX(
        this: *mut btCapsuleShapeX,
        radius: btScalar,
        height: btScalar,
    );
}
impl btCapsuleShapeX {
    #[inline]
    pub unsafe fn new(radius: btScalar, height: btScalar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btCapsuleShapeX_btCapsuleShapeX(&mut __bindgen_tmp, radius, height);
        __bindgen_tmp
    }
}
/// btCapsuleShapeZ represents a capsule around the Z axis
/// the total height is height+2*radius, so the height is just the height between the center of each 'sphere' of the capsule caps.
#[repr(C)]
#[derive(Debug)]
pub struct btCapsuleShapeZ {
    pub _base: btCapsuleShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN15btCapsuleShapeZC1Eff"]
    pub fn btCapsuleShapeZ_btCapsuleShapeZ(
        this: *mut btCapsuleShapeZ,
        radius: btScalar,
        height: btScalar,
    );
}
impl btCapsuleShapeZ {
    #[inline]
    pub unsafe fn new(radius: btScalar, height: btScalar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btCapsuleShapeZ_btCapsuleShapeZ(&mut __bindgen_tmp, radius, height);
        __bindgen_tmp
    }
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCapsuleShapeData {
    pub m_convexInternalShapeData: btConvexInternalShapeData,
    pub m_upAxis: ::std::os::raw::c_int,
    pub m_padding: [::std::os::raw::c_char; 4usize],
}
/// The btCylinderShape class implements a cylinder shape primitive, centered around the origin. Its central axis aligned with the Y axis. btCylinderShapeX is aligned with the X axis and btCylinderShapeZ around the Z axis.
#[repr(C)]
#[derive(Debug)]
pub struct btCylinderShape {
    pub _base: btConvexInternalShape,
    pub m_upAxis: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN15btCylinderShapeC1ERK9btVector3"]
    pub fn btCylinderShape_btCylinderShape(
        this: *mut btCylinderShape,
        halfExtents: *const btVector3,
    );
}
impl btCylinderShape {
    #[inline]
    pub unsafe fn new(halfExtents: *const btVector3) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btCylinderShape_btCylinderShape(&mut __bindgen_tmp, halfExtents);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btCylinderShape7getAabbERK11btTransformR9btVector3S4_"]
    pub fn btCylinderShape_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btCylinderShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btCylinderShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btCylinderShape37localGetSupportingVertexWithoutMarginERK9btVector3"]
    pub fn btCylinderShape_localGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btCylinderShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i"]
    pub fn btCylinderShape_batchedUnitVectorGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vectors: *const btVector3,
        supportVerticesOut: *mut btVector3,
        numVectors: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK15btCylinderShape28calculateSerializeBufferSizeEv"]
    pub fn btCylinderShape_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK15btCylinderShape9serializeEPvP12btSerializer"]
    pub fn btCylinderShape_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct btCylinderShapeX {
    pub _base: btCylinderShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN16btCylinderShapeXC1ERK9btVector3"]
    pub fn btCylinderShapeX_btCylinderShapeX(
        this: *mut btCylinderShapeX,
        halfExtents: *const btVector3,
    );
}
impl btCylinderShapeX {
    #[inline]
    pub unsafe fn new(halfExtents: *const btVector3) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btCylinderShapeX_btCylinderShapeX(&mut __bindgen_tmp, halfExtents);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btCylinderShapeX37localGetSupportingVertexWithoutMarginERK9btVector3"]
    pub fn btCylinderShapeX_localGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btCylinderShapeX49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i"]
    pub fn btCylinderShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vectors: *const btVector3,
        supportVerticesOut: *mut btVector3,
        numVectors: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btCylinderShapeZ {
    pub _base: btCylinderShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN16btCylinderShapeZC1ERK9btVector3"]
    pub fn btCylinderShapeZ_btCylinderShapeZ(
        this: *mut btCylinderShapeZ,
        halfExtents: *const btVector3,
    );
}
impl btCylinderShapeZ {
    #[inline]
    pub unsafe fn new(halfExtents: *const btVector3) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btCylinderShapeZ_btCylinderShapeZ(&mut __bindgen_tmp, halfExtents);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btCylinderShapeZ37localGetSupportingVertexWithoutMarginERK9btVector3"]
    pub fn btCylinderShapeZ_localGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btCylinderShapeZ49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i"]
    pub fn btCylinderShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vectors: *const btVector3,
        supportVerticesOut: *mut btVector3,
        numVectors: ::std::os::raw::c_int,
    );
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btCylinderShapeData {
    pub m_convexInternalShapeData: btConvexInternalShapeData,
    pub m_upAxis: ::std::os::raw::c_int,
    pub m_padding: [::std::os::raw::c_char; 4usize],
}
/// The btConeShape implements a cone shape primitive, centered around the origin and aligned with the Y axis. The btConeShapeX is aligned around the X axis and btConeShapeZ around the Z axis.
#[repr(C)]
#[derive(Debug)]
pub struct btConeShape {
    pub _base: btConvexInternalShape,
    pub m_sinAngle: btScalar,
    pub m_radius: btScalar,
    pub m_height: btScalar,
    pub m_coneIndices: [::std::os::raw::c_int; 3usize],
}
extern "C" {
    /// choose upAxis index
    #[link_name = "\u{1}_ZN11btConeShape14setConeUpIndexEi"]
    pub fn btConeShape_setConeUpIndex(this: *mut btConeShape, upIndex: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN11btConeShapeC1Eff"]
    pub fn btConeShape_btConeShape(this: *mut btConeShape, radius: btScalar, height: btScalar);
}
impl btConeShape {
    #[inline]
    pub unsafe fn setConeUpIndex(&mut self, upIndex: ::std::os::raw::c_int) {
        btConeShape_setConeUpIndex(self, upIndex)
    }
    #[inline]
    pub unsafe fn new(radius: btScalar, height: btScalar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConeShape_btConeShape(&mut __bindgen_tmp, radius, height);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btConeShape24localGetSupportingVertexERK9btVector3"]
    pub fn btConeShape_localGetSupportingVertex(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btConeShape37localGetSupportingVertexWithoutMarginERK9btVector3"]
    pub fn btConeShape_localGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btConeShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i"]
    pub fn btConeShape_batchedUnitVectorGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vectors: *const btVector3,
        supportVerticesOut: *mut btVector3,
        numVectors: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11btConeShape15setLocalScalingERK9btVector3"]
    pub fn btConeShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btConeShape28calculateSerializeBufferSizeEv"]
    pub fn btConeShape_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK11btConeShape9serializeEPvP12btSerializer"]
    pub fn btConeShape_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
/// btConeShape implements a Cone shape, around the X axis
#[repr(C)]
#[derive(Debug)]
pub struct btConeShapeX {
    pub _base: btConeShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN12btConeShapeXC1Eff"]
    pub fn btConeShapeX_btConeShapeX(this: *mut btConeShapeX, radius: btScalar, height: btScalar);
}
impl btConeShapeX {
    #[inline]
    pub unsafe fn new(radius: btScalar, height: btScalar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConeShapeX_btConeShapeX(&mut __bindgen_tmp, radius, height);
        __bindgen_tmp
    }
}
/// btConeShapeZ implements a Cone shape, around the Z axis
#[repr(C)]
#[derive(Debug)]
pub struct btConeShapeZ {
    pub _base: btConeShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN12btConeShapeZC1Eff"]
    pub fn btConeShapeZ_btConeShapeZ(this: *mut btConeShapeZ, radius: btScalar, height: btScalar);
}
impl btConeShapeZ {
    #[inline]
    pub unsafe fn new(radius: btScalar, height: btScalar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConeShapeZ_btConeShapeZ(&mut __bindgen_tmp, radius, height);
        __bindgen_tmp
    }
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btConeShapeData {
    pub m_convexInternalShapeData: btConvexInternalShapeData,
    pub m_upIndex: ::std::os::raw::c_int,
    pub m_padding: [::std::os::raw::c_char; 4usize],
}
/// The btConvexHullShape implements an implicit convex hull of an array of vertices.
/// Bullet provides a general and fast collision detector for convex shapes based on GJK and EPA using localGetSupportingVertex.
#[repr(C)]
#[derive(Debug)]
pub struct btConvexHullShape {
    pub _base: btPolyhedralConvexAabbCachingShape,
    pub m_unscaledPoints: btAlignedObjectArray<btVector3>,
}
extern "C" {
    #[link_name = "\u{1}_ZN17btConvexHullShape8addPointERK9btVector3b"]
    pub fn btConvexHullShape_addPoint(
        this: *mut btConvexHullShape,
        point: *const btVector3,
        recalculateLocalAabb: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btConvexHullShape18optimizeConvexHullEv"]
    pub fn btConvexHullShape_optimizeConvexHull(this: *mut btConvexHullShape);
}
extern "C" {
    /// this constructor optionally takes in a pointer to points. Each point is assumed to be 3 consecutive btScalar (x,y,z), the striding defines the number of bytes between each point, in memory.
    /// ///It is easier to not pass any points in the constructor, and just add one point at a time, using addPoint.
    /// ///btConvexHullShape make an internal copy of the points.
    #[link_name = "\u{1}_ZN17btConvexHullShapeC1EPKfii"]
    pub fn btConvexHullShape_btConvexHullShape(
        this: *mut btConvexHullShape,
        points: *const btScalar,
        numPoints: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
impl btConvexHullShape {
    #[inline]
    pub unsafe fn addPoint(&mut self, point: *const btVector3, recalculateLocalAabb: bool) {
        btConvexHullShape_addPoint(self, point, recalculateLocalAabb)
    }
    #[inline]
    pub unsafe fn optimizeConvexHull(&mut self) {
        btConvexHullShape_optimizeConvexHull(self)
    }
    #[inline]
    pub unsafe fn new(
        points: *const btScalar,
        numPoints: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConvexHullShape_btConvexHullShape(&mut __bindgen_tmp, points, numPoints, stride);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btConvexHullShape24localGetSupportingVertexERK9btVector3"]
    pub fn btConvexHullShape_localGetSupportingVertex(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btConvexHullShape37localGetSupportingVertexWithoutMarginERK9btVector3"]
    pub fn btConvexHullShape_localGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btConvexHullShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i"]
    pub fn btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vectors: *const btVector3,
        supportVerticesOut: *mut btVector3,
        numVectors: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btConvexHullShape7projectERK11btTransformRK9btVector3RfS6_RS3_S7_"]
    pub fn btConvexHullShape_project(
        this: *mut ::std::os::raw::c_void,
        trans: *const btTransform,
        dir: *const btVector3,
        minProj: *mut btScalar,
        maxProj: *mut btScalar,
        witnesPtMin: *mut btVector3,
        witnesPtMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btConvexHullShape14getNumVerticesEv"]
    pub fn btConvexHullShape_getNumVertices(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btConvexHullShape11getNumEdgesEv"]
    pub fn btConvexHullShape_getNumEdges(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btConvexHullShape7getEdgeEiR9btVector3S1_"]
    pub fn btConvexHullShape_getEdge(
        this: *mut ::std::os::raw::c_void,
        i: ::std::os::raw::c_int,
        pa: *mut btVector3,
        pb: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btConvexHullShape9getVertexEiR9btVector3"]
    pub fn btConvexHullShape_getVertex(
        this: *mut ::std::os::raw::c_void,
        i: ::std::os::raw::c_int,
        vtx: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btConvexHullShape12getNumPlanesEv"]
    pub fn btConvexHullShape_getNumPlanes(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btConvexHullShape8getPlaneER9btVector3S1_i"]
    pub fn btConvexHullShape_getPlane(
        this: *mut ::std::os::raw::c_void,
        planeNormal: *mut btVector3,
        planeSupport: *mut btVector3,
        i: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btConvexHullShape8isInsideERK9btVector3f"]
    pub fn btConvexHullShape_isInside(
        this: *mut ::std::os::raw::c_void,
        pt: *const btVector3,
        tolerance: btScalar,
    ) -> bool;
}
extern "C" {
    /// in case we receive negative scaling
    #[link_name = "\u{1}_ZN17btConvexHullShape15setLocalScalingERK9btVector3"]
    pub fn btConvexHullShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btConvexHullShape28calculateSerializeBufferSizeEv"]
    pub fn btConvexHullShape_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK17btConvexHullShape9serializeEPvP12btSerializer"]
    pub fn btConvexHullShape_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btConvexHullShapeData {
    pub m_convexInternalShapeData: btConvexInternalShapeData,
    pub m_unscaledPointsFloatPtr: *mut btVector3FloatData,
    pub m_unscaledPointsDoublePtr: *mut btVector3DoubleData,
    pub m_numUnscaledPoints: ::std::os::raw::c_int,
    pub m_padding3: [::std::os::raw::c_char; 4usize],
}
/// The btTriangleMesh class is a convenience class derived from btTriangleIndexVertexArray, that provides storage for a concave triangle mesh. It can be used as data for the btBvhTriangleMeshShape.
/// It allows either 32bit or 16bit indices, and 4 (x-y-z-w) or 3 (x-y-z) component vertices.
/// If you want to share triangle/index data between graphics mesh and collision mesh (btBvhTriangleMeshShape), you can directly use btTriangleIndexVertexArray or derive your own class from btStridingMeshInterface.
/// Performance of btTriangleMesh and btTriangleIndexVertexArray used in a btBvhTriangleMeshShape is the same.
#[repr(C)]
#[derive(Debug)]
pub struct btTriangleMesh {
    pub _base: btTriangleIndexVertexArray,
    pub m_4componentVertices: btAlignedObjectArray<btVector3>,
    pub m_3componentVertices: btAlignedObjectArray<btScalar>,
    pub m_32bitIndices: btAlignedObjectArray<::std::os::raw::c_uint>,
    pub m_16bitIndices: btAlignedObjectArray<::std::os::raw::c_ushort>,
    pub m_use32bitIndices: bool,
    pub m_use4componentVertices: bool,
    pub m_weldingThreshold: btScalar,
}
extern "C" {
    /// By default addTriangle won't search for duplicate vertices, because the search is very slow for large triangle meshes.
    /// ///In general it is better to directly use btTriangleIndexVertexArray instead.
    #[link_name = "\u{1}_ZN14btTriangleMesh11addTriangleERK9btVector3S2_S2_b"]
    pub fn btTriangleMesh_addTriangle(
        this: *mut btTriangleMesh,
        vertex0: *const btVector3,
        vertex1: *const btVector3,
        vertex2: *const btVector3,
        removeDuplicateVertices: bool,
    );
}
extern "C" {
    /// Add a triangle using its indices. Make sure the indices are pointing within the vertices array, so add the vertices first (and to be sure, avoid removal of duplicate vertices)
    #[link_name = "\u{1}_ZN14btTriangleMesh18addTriangleIndicesEiii"]
    pub fn btTriangleMesh_addTriangleIndices(
        this: *mut btTriangleMesh,
        index1: ::std::os::raw::c_int,
        index2: ::std::os::raw::c_int,
        index3: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK14btTriangleMesh15getNumTrianglesEv"]
    pub fn btTriangleMesh_getNumTriangles(this: *const btTriangleMesh) -> ::std::os::raw::c_int;
}
extern "C" {
    /// findOrAddVertex is an internal method, use addTriangle instead
    #[link_name = "\u{1}_ZN14btTriangleMesh15findOrAddVertexERK9btVector3b"]
    pub fn btTriangleMesh_findOrAddVertex(
        this: *mut btTriangleMesh,
        vertex: *const btVector3,
        removeDuplicateVertices: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// addIndex is an internal method, use addTriangle instead
    #[link_name = "\u{1}_ZN14btTriangleMesh8addIndexEi"]
    pub fn btTriangleMesh_addIndex(this: *mut btTriangleMesh, index: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN14btTriangleMeshC1Ebb"]
    pub fn btTriangleMesh_btTriangleMesh(
        this: *mut btTriangleMesh,
        use32bitIndices: bool,
        use4componentVertices: bool,
    );
}
impl btTriangleMesh {
    #[inline]
    pub unsafe fn addTriangle(
        &mut self,
        vertex0: *const btVector3,
        vertex1: *const btVector3,
        vertex2: *const btVector3,
        removeDuplicateVertices: bool,
    ) {
        btTriangleMesh_addTriangle(self, vertex0, vertex1, vertex2, removeDuplicateVertices)
    }
    #[inline]
    pub unsafe fn addTriangleIndices(
        &mut self,
        index1: ::std::os::raw::c_int,
        index2: ::std::os::raw::c_int,
        index3: ::std::os::raw::c_int,
    ) {
        btTriangleMesh_addTriangleIndices(self, index1, index2, index3)
    }
    #[inline]
    pub unsafe fn getNumTriangles(&self) -> ::std::os::raw::c_int {
        btTriangleMesh_getNumTriangles(self)
    }
    #[inline]
    pub unsafe fn findOrAddVertex(
        &mut self,
        vertex: *const btVector3,
        removeDuplicateVertices: bool,
    ) -> ::std::os::raw::c_int {
        btTriangleMesh_findOrAddVertex(self, vertex, removeDuplicateVertices)
    }
    #[inline]
    pub unsafe fn addIndex(&mut self, index: ::std::os::raw::c_int) {
        btTriangleMesh_addIndex(self, index)
    }
    #[inline]
    pub unsafe fn new(use32bitIndices: bool, use4componentVertices: bool) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btTriangleMesh_btTriangleMesh(&mut __bindgen_tmp, use32bitIndices, use4componentVertices);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN14btTriangleMesh19preallocateVerticesEi"]
    pub fn btTriangleMesh_preallocateVertices(
        this: *mut ::std::os::raw::c_void,
        numverts: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14btTriangleMesh18preallocateIndicesEi"]
    pub fn btTriangleMesh_preallocateIndices(
        this: *mut ::std::os::raw::c_void,
        numindices: ::std::os::raw::c_int,
    );
}
/// The btConvexTriangleMeshShape is a convex hull of a triangle mesh, but the performance is not as good as btConvexHullShape.
/// A small benefit of this class is that it uses the btStridingMeshInterface, so you can avoid the duplication of the triangle mesh data. Nevertheless, most users should use the much better performing btConvexHullShape instead.
#[repr(C)]
#[derive(Debug)]
pub struct btConvexTriangleMeshShape {
    pub _base: btPolyhedralConvexAabbCachingShape,
    pub m_stridingMesh: *mut btStridingMeshInterface,
}
extern "C" {
    /// computes the exact moment of inertia and the transform from the coordinate system defined by the principal axes of the moment of inertia
    /// ///and the center of mass to the current coordinate system. A mass of 1 is assumed, for other masses just multiply the computed "inertia"
    /// ///by the mass. The resulting transform "principal" has to be applied inversely to the mesh in order for the local coordinate system of the
    /// ///shape to be centered at the center of mass and to coincide with the principal axes. This also necessitates a correction of the world transform
    /// ///of the collision object by the principal transform. This method also computes the volume of the convex mesh.
    #[link_name = "\u{1}_ZNK25btConvexTriangleMeshShape31calculatePrincipalAxisTransformER11btTransformR9btVector3Rf"]
    pub fn btConvexTriangleMeshShape_calculatePrincipalAxisTransform(
        this: *const btConvexTriangleMeshShape,
        principal: *mut btTransform,
        inertia: *mut btVector3,
        volume: *mut btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25btConvexTriangleMeshShapeC1EP23btStridingMeshInterfaceb"]
    pub fn btConvexTriangleMeshShape_btConvexTriangleMeshShape(
        this: *mut btConvexTriangleMeshShape,
        meshInterface: *mut btStridingMeshInterface,
        calcAabb: bool,
    );
}
impl btConvexTriangleMeshShape {
    #[inline]
    pub unsafe fn calculatePrincipalAxisTransform(
        &self,
        principal: *mut btTransform,
        inertia: *mut btVector3,
        volume: *mut btScalar,
    ) {
        btConvexTriangleMeshShape_calculatePrincipalAxisTransform(self, principal, inertia, volume)
    }
    #[inline]
    pub unsafe fn new(meshInterface: *mut btStridingMeshInterface, calcAabb: bool) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConvexTriangleMeshShape_btConvexTriangleMeshShape(
            &mut __bindgen_tmp,
            meshInterface,
            calcAabb,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btConvexTriangleMeshShape24localGetSupportingVertexERK9btVector3"]
    pub fn btConvexTriangleMeshShape_localGetSupportingVertex(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btConvexTriangleMeshShape37localGetSupportingVertexWithoutMarginERK9btVector3"]
    pub fn btConvexTriangleMeshShape_localGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btConvexTriangleMeshShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i"]
    pub fn btConvexTriangleMeshShape_batchedUnitVectorGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vectors: *const btVector3,
        supportVerticesOut: *mut btVector3,
        numVectors: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btConvexTriangleMeshShape14getNumVerticesEv"]
    pub fn btConvexTriangleMeshShape_getNumVertices(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btConvexTriangleMeshShape11getNumEdgesEv"]
    pub fn btConvexTriangleMeshShape_getNumEdges(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btConvexTriangleMeshShape7getEdgeEiR9btVector3S1_"]
    pub fn btConvexTriangleMeshShape_getEdge(
        this: *mut ::std::os::raw::c_void,
        i: ::std::os::raw::c_int,
        pa: *mut btVector3,
        pb: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btConvexTriangleMeshShape9getVertexEiR9btVector3"]
    pub fn btConvexTriangleMeshShape_getVertex(
        this: *mut ::std::os::raw::c_void,
        i: ::std::os::raw::c_int,
        vtx: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btConvexTriangleMeshShape12getNumPlanesEv"]
    pub fn btConvexTriangleMeshShape_getNumPlanes(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btConvexTriangleMeshShape8getPlaneER9btVector3S1_i"]
    pub fn btConvexTriangleMeshShape_getPlane(
        this: *mut ::std::os::raw::c_void,
        planeNormal: *mut btVector3,
        planeSupport: *mut btVector3,
        i: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btConvexTriangleMeshShape8isInsideERK9btVector3f"]
    pub fn btConvexTriangleMeshShape_isInside(
        this: *mut ::std::os::raw::c_void,
        pt: *const btVector3,
        tolerance: btScalar,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN25btConvexTriangleMeshShape15setLocalScalingERK9btVector3"]
    pub fn btConvexTriangleMeshShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK25btConvexTriangleMeshShape15getLocalScalingEv"]
    pub fn btConvexTriangleMeshShape_getLocalScaling(
        this: *mut ::std::os::raw::c_void,
    ) -> *const btVector3;
}
/// The btScaledBvhTriangleMeshShape allows to instance a scaled version of an existing btBvhTriangleMeshShape.
/// Note that each btBvhTriangleMeshShape still can have its own local scaling, independent from this btScaledBvhTriangleMeshShape 'localScaling'
#[repr(C)]
#[derive(Debug)]
pub struct btScaledBvhTriangleMeshShape {
    pub _base: btConcaveShape,
    pub m_localScaling: btVector3,
    pub m_bvhTriMeshShape: *mut btBvhTriangleMeshShape,
}
extern "C" {
    #[link_name = "\u{1}_ZN28btScaledBvhTriangleMeshShapeC1EP22btBvhTriangleMeshShapeRK9btVector3"]
    pub fn btScaledBvhTriangleMeshShape_btScaledBvhTriangleMeshShape(
        this: *mut btScaledBvhTriangleMeshShape,
        childShape: *mut btBvhTriangleMeshShape,
        localScaling: *const btVector3,
    );
}
impl btScaledBvhTriangleMeshShape {
    #[inline]
    pub unsafe fn new(
        childShape: *mut btBvhTriangleMeshShape,
        localScaling: *const btVector3,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btScaledBvhTriangleMeshShape_btScaledBvhTriangleMeshShape(
            &mut __bindgen_tmp,
            childShape,
            localScaling,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN28btScaledBvhTriangleMeshShapeD1Ev"]
    pub fn btScaledBvhTriangleMeshShape_btScaledBvhTriangleMeshShape_destructor(
        this: *mut btScaledBvhTriangleMeshShape,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK28btScaledBvhTriangleMeshShape7getAabbERK11btTransformR9btVector3S4_"]
    pub fn btScaledBvhTriangleMeshShape_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN28btScaledBvhTriangleMeshShape15setLocalScalingERK9btVector3"]
    pub fn btScaledBvhTriangleMeshShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK28btScaledBvhTriangleMeshShape15getLocalScalingEv"]
    pub fn btScaledBvhTriangleMeshShape_getLocalScaling(
        this: *mut ::std::os::raw::c_void,
    ) -> *const btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK28btScaledBvhTriangleMeshShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btScaledBvhTriangleMeshShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK28btScaledBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_"]
    pub fn btScaledBvhTriangleMeshShape_processAllTriangles(
        this: *mut ::std::os::raw::c_void,
        callback: *mut btTriangleCallback,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK28btScaledBvhTriangleMeshShape28calculateSerializeBufferSizeEv"]
    pub fn btScaledBvhTriangleMeshShape_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK28btScaledBvhTriangleMeshShape9serializeEPvP12btSerializer"]
    pub fn btScaledBvhTriangleMeshShape_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btScaledTriangleMeshShapeData {
    pub m_trimeshShapeData: btTriangleMeshShapeData,
    pub m_localScaling: btVector3FloatData,
}
/// The btEmptyShape is a collision shape without actual collision detection shape, so most users should ignore this class.
/// It can be replaced by another shape during runtime, but the inertia tensor should be recomputed.
#[repr(C)]
#[derive(Debug)]
pub struct btEmptyShape {
    pub _base: btConcaveShape,
    pub m_localScaling: btVector3,
}
extern "C" {
    #[link_name = "\u{1}_ZN12btEmptyShapeC1Ev"]
    pub fn btEmptyShape_btEmptyShape(this: *mut btEmptyShape);
}
impl btEmptyShape {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btEmptyShape_btEmptyShape(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN12btEmptyShapeD1Ev"]
    pub fn btEmptyShape_btEmptyShape_destructor(this: *mut btEmptyShape);
}
extern "C" {
    /// getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version
    #[link_name = "\u{1}_ZNK12btEmptyShape7getAabbERK11btTransformR9btVector3S4_"]
    pub fn btEmptyShape_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK12btEmptyShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btEmptyShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
/// The btMultiSphereShape represents the convex hull of a collection of spheres. You can create special capsules or other smooth volumes.
/// It is possible to animate the spheres for deformation, but call 'recalcLocalAabb' after changing any sphere position/radius
#[repr(C)]
#[derive(Debug)]
pub struct btMultiSphereShape {
    pub _base: btConvexInternalAabbCachingShape,
    pub m_localPositionArray: btAlignedObjectArray<btVector3>,
    pub m_radiArray: btAlignedObjectArray<btScalar>,
}
extern "C" {
    #[link_name = "\u{1}_ZN18btMultiSphereShapeC1EPK9btVector3PKfi"]
    pub fn btMultiSphereShape_btMultiSphereShape(
        this: *mut btMultiSphereShape,
        positions: *const btVector3,
        radi: *const btScalar,
        numSpheres: ::std::os::raw::c_int,
    );
}
impl btMultiSphereShape {
    #[inline]
    pub unsafe fn new(
        positions: *const btVector3,
        radi: *const btScalar,
        numSpheres: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btMultiSphereShape_btMultiSphereShape(&mut __bindgen_tmp, positions, radi, numSpheres);
        __bindgen_tmp
    }
}
extern "C" {
    /// CollisionShape Interface
    #[link_name = "\u{1}_ZNK18btMultiSphereShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btMultiSphereShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
extern "C" {
    /// btConvexShape Interface
    #[link_name = "\u{1}_ZNK18btMultiSphereShape37localGetSupportingVertexWithoutMarginERK9btVector3"]
    pub fn btMultiSphereShape_localGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK18btMultiSphereShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i"]
    pub fn btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vectors: *const btVector3,
        supportVerticesOut: *mut btVector3,
        numVectors: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK18btMultiSphereShape28calculateSerializeBufferSizeEv"]
    pub fn btMultiSphereShape_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK18btMultiSphereShape9serializeEPvP12btSerializer"]
    pub fn btMultiSphereShape_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btPositionAndRadius {
    pub m_pos: btVector3FloatData,
    pub m_radius: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btMultiSphereShapeData {
    pub m_convexInternalShapeData: btConvexInternalShapeData,
    pub m_localPositionArrayPtr: *mut btPositionAndRadius,
    pub m_localPositionArraySize: ::std::os::raw::c_int,
    pub m_padding: [::std::os::raw::c_char; 4usize],
}
/// The btUniformScalingShape allows to re-use uniform scaled instances of btConvexShape in a memory efficient way.
/// Istead of using btUniformScalingShape, it is better to use the non-uniform setLocalScaling method on convex shapes that implement it.
#[repr(C)]
#[derive(Debug)]
pub struct btUniformScalingShape {
    pub _base: btConvexShape,
    pub m_childConvexShape: *mut btConvexShape,
    pub m_uniformScalingFactor: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZN21btUniformScalingShapeC1EP13btConvexShapef"]
    pub fn btUniformScalingShape_btUniformScalingShape(
        this: *mut btUniformScalingShape,
        convexChildShape: *mut btConvexShape,
        uniformScalingFactor: btScalar,
    );
}
impl btUniformScalingShape {
    #[inline]
    pub unsafe fn new(
        convexChildShape: *mut btConvexShape,
        uniformScalingFactor: btScalar,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btUniformScalingShape_btUniformScalingShape(
            &mut __bindgen_tmp,
            convexChildShape,
            uniformScalingFactor,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN21btUniformScalingShapeD1Ev"]
    pub fn btUniformScalingShape_btUniformScalingShape_destructor(this: *mut btUniformScalingShape);
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btUniformScalingShape37localGetSupportingVertexWithoutMarginERK9btVector3"]
    pub fn btUniformScalingShape_localGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btUniformScalingShape24localGetSupportingVertexERK9btVector3"]
    pub fn btUniformScalingShape_localGetSupportingVertex(
        this: *mut ::std::os::raw::c_void,
        vec: *const btVector3,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btUniformScalingShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i"]
    pub fn btUniformScalingShape_batchedUnitVectorGetSupportingVertexWithoutMargin(
        this: *mut ::std::os::raw::c_void,
        vectors: *const btVector3,
        supportVerticesOut: *mut btVector3,
        numVectors: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btUniformScalingShape21calculateLocalInertiaEfR9btVector3"]
    pub fn btUniformScalingShape_calculateLocalInertia(
        this: *mut ::std::os::raw::c_void,
        mass: btScalar,
        inertia: *mut btVector3,
    );
}
extern "C" {
    /// getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version
    #[link_name = "\u{1}_ZNK21btUniformScalingShape7getAabbERK11btTransformR9btVector3S4_"]
    pub fn btUniformScalingShape_getAabb(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btUniformScalingShape11getAabbSlowERK11btTransformR9btVector3S4_"]
    pub fn btUniformScalingShape_getAabbSlow(
        this: *mut ::std::os::raw::c_void,
        t: *const btTransform,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btUniformScalingShape15setLocalScalingERK9btVector3"]
    pub fn btUniformScalingShape_setLocalScaling(
        this: *mut ::std::os::raw::c_void,
        scaling: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btUniformScalingShape15getLocalScalingEv"]
    pub fn btUniformScalingShape_getLocalScaling(
        this: *mut ::std::os::raw::c_void,
    ) -> *const btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN21btUniformScalingShape9setMarginEf"]
    pub fn btUniformScalingShape_setMargin(this: *mut ::std::os::raw::c_void, margin: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btUniformScalingShape9getMarginEv"]
    pub fn btUniformScalingShape_getMargin(this: *mut ::std::os::raw::c_void) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btUniformScalingShape36getNumPreferredPenetrationDirectionsEv"]
    pub fn btUniformScalingShape_getNumPreferredPenetrationDirections(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btUniformScalingShape32getPreferredPenetrationDirectionEiR9btVector3"]
    pub fn btUniformScalingShape_getPreferredPenetrationDirection(
        this: *mut ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
        penetrationVector: *mut btVector3,
    );
}
/// btSphereSphereCollisionAlgorithm  provides sphere-sphere collision detection.
/// Other features are frame-coherency (persistent data) and collision response.
/// Also provides the most basic sample for custom/user btCollisionAlgorithm
#[repr(C)]
#[derive(Debug)]
pub struct btSphereSphereCollisionAlgorithm {
    pub _base: btActivatingCollisionAlgorithm,
    pub m_ownManifold: bool,
    pub m_manifoldPtr: *mut btPersistentManifold,
}
#[repr(C)]
#[derive(Debug)]
pub struct btSphereSphereCollisionAlgorithm_CreateFunc {
    pub _base: btCollisionAlgorithmCreateFunc,
}
extern "C" {
    #[link_name = "\u{1}_ZN32btSphereSphereCollisionAlgorithmC1EP20btPersistentManifoldRK36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS7_"]
    pub fn btSphereSphereCollisionAlgorithm_btSphereSphereCollisionAlgorithm(
        this: *mut btSphereSphereCollisionAlgorithm,
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        col0Wrap: *const btCollisionObjectWrapper,
        col1Wrap: *const btCollisionObjectWrapper,
    );
}
impl btSphereSphereCollisionAlgorithm {
    #[inline]
    pub unsafe fn new(
        mf: *mut btPersistentManifold,
        ci: *const btCollisionAlgorithmConstructionInfo,
        col0Wrap: *const btCollisionObjectWrapper,
        col1Wrap: *const btCollisionObjectWrapper,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSphereSphereCollisionAlgorithm_btSphereSphereCollisionAlgorithm(
            &mut __bindgen_tmp,
            mf,
            ci,
            col0Wrap,
            col1Wrap,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN32btSphereSphereCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btSphereSphereCollisionAlgorithm_processCollision(
        this: *mut ::std::os::raw::c_void,
        body0Wrap: *const btCollisionObjectWrapper,
        body1Wrap: *const btCollisionObjectWrapper,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN32btSphereSphereCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult"]
    pub fn btSphereSphereCollisionAlgorithm_calculateTimeOfImpact(
        this: *mut ::std::os::raw::c_void,
        body0: *mut btCollisionObject,
        body1: *mut btCollisionObject,
        dispatchInfo: *const btDispatcherInfo,
        resultOut: *mut btManifoldResult,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN32btSphereSphereCollisionAlgorithmD1Ev"]
    pub fn btSphereSphereCollisionAlgorithm_btSphereSphereCollisionAlgorithm_destructor(
        this: *mut btSphereSphereCollisionAlgorithm,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSimpleBroadphaseProxy {
    pub _base: btBroadphaseProxy,
    pub m_nextFree: ::std::os::raw::c_int,
}
/// The SimpleBroadphase is just a unit-test for btAxisSweep3, bt32BitAxisSweep3, or btDbvtBroadphase, so use those classes instead.
/// It is a brute force aabb culling broadphase based on O(n^2) aabb checks
#[repr(C)]
#[derive(Debug)]
pub struct btSimpleBroadphase {
    pub _base: btBroadphaseInterface,
    pub m_numHandles: ::std::os::raw::c_int,
    pub m_maxHandles: ::std::os::raw::c_int,
    pub m_LastHandleIndex: ::std::os::raw::c_int,
    pub m_pHandles: *mut btSimpleBroadphaseProxy,
    pub m_pHandlesRawPtr: *mut ::std::os::raw::c_void,
    pub m_firstFreeHandle: ::std::os::raw::c_int,
    pub m_pairCache: *mut btOverlappingPairCache,
    pub m_ownsPairCache: bool,
    pub m_invalidPair: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSimpleBroadphase8validateEv"]
    pub fn btSimpleBroadphase_validate(this: *mut btSimpleBroadphase);
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSimpleBroadphase11aabbOverlapEP23btSimpleBroadphaseProxyS1_"]
    pub fn btSimpleBroadphase_aabbOverlap(
        proxy0: *mut btSimpleBroadphaseProxy,
        proxy1: *mut btSimpleBroadphaseProxy,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSimpleBroadphase15testAabbOverlapEP17btBroadphaseProxyS1_"]
    pub fn btSimpleBroadphase_testAabbOverlap(
        this: *mut btSimpleBroadphase,
        proxy0: *mut btBroadphaseProxy,
        proxy1: *mut btBroadphaseProxy,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSimpleBroadphaseC1EiP22btOverlappingPairCache"]
    pub fn btSimpleBroadphase_btSimpleBroadphase(
        this: *mut btSimpleBroadphase,
        maxProxies: ::std::os::raw::c_int,
        overlappingPairCache: *mut btOverlappingPairCache,
    );
}
impl btSimpleBroadphase {
    #[inline]
    pub unsafe fn validate(&mut self) {
        btSimpleBroadphase_validate(self)
    }
    #[inline]
    pub unsafe fn aabbOverlap(
        proxy0: *mut btSimpleBroadphaseProxy,
        proxy1: *mut btSimpleBroadphaseProxy,
    ) -> bool {
        btSimpleBroadphase_aabbOverlap(proxy0, proxy1)
    }
    #[inline]
    pub unsafe fn testAabbOverlap(
        &mut self,
        proxy0: *mut btBroadphaseProxy,
        proxy1: *mut btBroadphaseProxy,
    ) -> bool {
        btSimpleBroadphase_testAabbOverlap(self, proxy0, proxy1)
    }
    #[inline]
    pub unsafe fn new(
        maxProxies: ::std::os::raw::c_int,
        overlappingPairCache: *mut btOverlappingPairCache,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSimpleBroadphase_btSimpleBroadphase(&mut __bindgen_tmp, maxProxies, overlappingPairCache);
        __bindgen_tmp
    }
}
extern "C" {
    /// reset broadphase internal structures, to ensure determinism/reproducability
    #[link_name = "\u{1}_ZN18btSimpleBroadphase9resetPoolEP12btDispatcher"]
    pub fn btSimpleBroadphase_resetPool(
        this: *mut ::std::os::raw::c_void,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSimpleBroadphaseD1Ev"]
    pub fn btSimpleBroadphase_btSimpleBroadphase_destructor(this: *mut btSimpleBroadphase);
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSimpleBroadphase11createProxyERK9btVector3S2_iPviiP12btDispatcher"]
    pub fn btSimpleBroadphase_createProxy(
        this: *mut ::std::os::raw::c_void,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
        shapeType: ::std::os::raw::c_int,
        userPtr: *mut ::std::os::raw::c_void,
        collisionFilterGroup: ::std::os::raw::c_int,
        collisionFilterMask: ::std::os::raw::c_int,
        dispatcher: *mut btDispatcher,
    ) -> *mut btBroadphaseProxy;
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSimpleBroadphase25calculateOverlappingPairsEP12btDispatcher"]
    pub fn btSimpleBroadphase_calculateOverlappingPairs(
        this: *mut ::std::os::raw::c_void,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSimpleBroadphase12destroyProxyEP17btBroadphaseProxyP12btDispatcher"]
    pub fn btSimpleBroadphase_destroyProxy(
        this: *mut ::std::os::raw::c_void,
        proxy: *mut btBroadphaseProxy,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSimpleBroadphase7setAabbEP17btBroadphaseProxyRK9btVector3S4_P12btDispatcher"]
    pub fn btSimpleBroadphase_setAabb(
        this: *mut ::std::os::raw::c_void,
        proxy: *mut btBroadphaseProxy,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK18btSimpleBroadphase7getAabbEP17btBroadphaseProxyR9btVector3S3_"]
    pub fn btSimpleBroadphase_getAabb(
        this: *mut ::std::os::raw::c_void,
        proxy: *mut btBroadphaseProxy,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSimpleBroadphase7rayTestERK9btVector3S2_R23btBroadphaseRayCallbackS2_S2_"]
    pub fn btSimpleBroadphase_rayTest(
        this: *mut ::std::os::raw::c_void,
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
        rayCallback: *mut btBroadphaseRayCallback,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSimpleBroadphase8aabbTestERK9btVector3S2_R24btBroadphaseAabbCallback"]
    pub fn btSimpleBroadphase_aabbTest(
        this: *mut ::std::os::raw::c_void,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
        callback: *mut btBroadphaseAabbCallback,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btDbvtProxy {
    pub _base: btBroadphaseProxy,
    pub leaf: *mut btDbvtNode,
    pub links: [*mut btDbvtProxy; 2usize],
    pub stage: ::std::os::raw::c_int,
}
pub type btDbvtProxyArray = btAlignedObjectArray<*mut btDbvtProxy>;
/// The btDbvtBroadphase implements a broadphase using two dynamic AABB bounding volume hierarchies/trees (see btDbvt).
/// One tree is used for static/non-moving objects, and another tree is used for dynamic objects. Objects can move from one tree to the other.
/// This is a very fast broadphase, especially for very dynamic worlds where many objects are moving. Its insert/add and remove of objects is generally faster than the sweep and prune broadphases btAxisSweep3 and bt32BitAxisSweep3.
#[repr(C)]
#[derive(Debug)]
pub struct btDbvtBroadphase {
    pub _base: btBroadphaseInterface,
    pub m_sets: [btDbvt; 2usize],
    pub m_stageRoots: [*mut btDbvtProxy; 3usize],
    pub m_paircache: *mut btOverlappingPairCache,
    pub m_prediction: btScalar,
    pub m_stageCurrent: ::std::os::raw::c_int,
    pub m_fupdates: ::std::os::raw::c_int,
    pub m_dupdates: ::std::os::raw::c_int,
    pub m_cupdates: ::std::os::raw::c_int,
    pub m_newpairs: ::std::os::raw::c_int,
    pub m_fixedleft: ::std::os::raw::c_int,
    pub m_updates_call: ::std::os::raw::c_uint,
    pub m_updates_done: ::std::os::raw::c_uint,
    pub m_updates_ratio: btScalar,
    pub m_pid: ::std::os::raw::c_int,
    pub m_cid: ::std::os::raw::c_int,
    pub m_gid: ::std::os::raw::c_int,
    pub m_releasepaircache: bool,
    pub m_deferedcollide: bool,
    pub m_needcleanup: bool,
    pub m_rayTestStacks: btAlignedObjectArray<btAlignedObjectArray<*const btDbvtNode>>,
}
pub const btDbvtBroadphase_DYNAMIC_SET: btDbvtBroadphase__bindgen_ty_1 = 0;
pub const btDbvtBroadphase_FIXED_SET: btDbvtBroadphase__bindgen_ty_1 = 1;
pub const btDbvtBroadphase_STAGECOUNT: btDbvtBroadphase__bindgen_ty_1 = 2;
pub type btDbvtBroadphase__bindgen_ty_1 = u32;
extern "C" {
    #[link_name = "\u{1}_ZN16btDbvtBroadphase7collideEP12btDispatcher"]
    pub fn btDbvtBroadphase_collide(this: *mut btDbvtBroadphase, dispatcher: *mut btDispatcher);
}
extern "C" {
    #[link_name = "\u{1}_ZN16btDbvtBroadphase8optimizeEv"]
    pub fn btDbvtBroadphase_optimize(this: *mut btDbvtBroadphase);
}
extern "C" {
    #[link_name = "\u{1}_ZN16btDbvtBroadphase22performDeferredRemovalEP12btDispatcher"]
    pub fn btDbvtBroadphase_performDeferredRemoval(
        this: *mut btDbvtBroadphase,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    /// this setAabbForceUpdate is similar to setAabb but always forces the aabb update.
    /// ///it is not part of the btBroadphaseInterface but specific to btDbvtBroadphase.
    /// ///it bypasses certain optimizations that prevent aabb updates (when the aabb shrinks), see
    /// ///http://code.google.com/p/bullet/issues/detail?id=223
    #[link_name = "\u{1}_ZN16btDbvtBroadphase18setAabbForceUpdateEP17btBroadphaseProxyRK9btVector3S4_P12btDispatcher"]
    pub fn btDbvtBroadphase_setAabbForceUpdate(
        this: *mut btDbvtBroadphase,
        absproxy: *mut btBroadphaseProxy,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
        arg1: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btDbvtBroadphase9benchmarkEP21btBroadphaseInterface"]
    pub fn btDbvtBroadphase_benchmark(arg1: *mut btBroadphaseInterface);
}
extern "C" {
    #[link_name = "\u{1}_ZN16btDbvtBroadphaseC1EP22btOverlappingPairCache"]
    pub fn btDbvtBroadphase_btDbvtBroadphase(
        this: *mut btDbvtBroadphase,
        paircache: *mut btOverlappingPairCache,
    );
}
impl btDbvtBroadphase {
    #[inline]
    pub unsafe fn collide(&mut self, dispatcher: *mut btDispatcher) {
        btDbvtBroadphase_collide(self, dispatcher)
    }
    #[inline]
    pub unsafe fn optimize(&mut self) {
        btDbvtBroadphase_optimize(self)
    }
    #[inline]
    pub unsafe fn performDeferredRemoval(&mut self, dispatcher: *mut btDispatcher) {
        btDbvtBroadphase_performDeferredRemoval(self, dispatcher)
    }
    #[inline]
    pub unsafe fn setAabbForceUpdate(
        &mut self,
        absproxy: *mut btBroadphaseProxy,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
        arg1: *mut btDispatcher,
    ) {
        btDbvtBroadphase_setAabbForceUpdate(self, absproxy, aabbMin, aabbMax, arg1)
    }
    #[inline]
    pub unsafe fn benchmark(arg1: *mut btBroadphaseInterface) {
        btDbvtBroadphase_benchmark(arg1)
    }
    #[inline]
    pub unsafe fn new(paircache: *mut btOverlappingPairCache) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btDbvtBroadphase_btDbvtBroadphase(&mut __bindgen_tmp, paircache);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN16btDbvtBroadphaseD1Ev"]
    pub fn btDbvtBroadphase_btDbvtBroadphase_destructor(this: *mut btDbvtBroadphase);
}
extern "C" {
    #[link_name = "\u{1}_ZN16btDbvtBroadphase11createProxyERK9btVector3S2_iPviiP12btDispatcher"]
    pub fn btDbvtBroadphase_createProxy(
        this: *mut ::std::os::raw::c_void,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
        shapeType: ::std::os::raw::c_int,
        userPtr: *mut ::std::os::raw::c_void,
        collisionFilterGroup: ::std::os::raw::c_int,
        collisionFilterMask: ::std::os::raw::c_int,
        dispatcher: *mut btDispatcher,
    ) -> *mut btBroadphaseProxy;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btDbvtBroadphase12destroyProxyEP17btBroadphaseProxyP12btDispatcher"]
    pub fn btDbvtBroadphase_destroyProxy(
        this: *mut ::std::os::raw::c_void,
        proxy: *mut btBroadphaseProxy,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btDbvtBroadphase7setAabbEP17btBroadphaseProxyRK9btVector3S4_P12btDispatcher"]
    pub fn btDbvtBroadphase_setAabb(
        this: *mut ::std::os::raw::c_void,
        proxy: *mut btBroadphaseProxy,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btDbvtBroadphase7rayTestERK9btVector3S2_R23btBroadphaseRayCallbackS2_S2_"]
    pub fn btDbvtBroadphase_rayTest(
        this: *mut ::std::os::raw::c_void,
        rayFrom: *const btVector3,
        rayTo: *const btVector3,
        rayCallback: *mut btBroadphaseRayCallback,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btDbvtBroadphase8aabbTestERK9btVector3S2_R24btBroadphaseAabbCallback"]
    pub fn btDbvtBroadphase_aabbTest(
        this: *mut ::std::os::raw::c_void,
        aabbMin: *const btVector3,
        aabbMax: *const btVector3,
        callback: *mut btBroadphaseAabbCallback,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btDbvtBroadphase7getAabbEP17btBroadphaseProxyR9btVector3S3_"]
    pub fn btDbvtBroadphase_getAabb(
        this: *mut ::std::os::raw::c_void,
        proxy: *mut btBroadphaseProxy,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btDbvtBroadphase25calculateOverlappingPairsEP12btDispatcher"]
    pub fn btDbvtBroadphase_calculateOverlappingPairs(
        this: *mut ::std::os::raw::c_void,
        dispatcher: *mut btDispatcher,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btDbvtBroadphase23getOverlappingPairCacheEv"]
    pub fn btDbvtBroadphase_getOverlappingPairCache(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut btOverlappingPairCache;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btDbvtBroadphase23getOverlappingPairCacheEv"]
    pub fn btDbvtBroadphase_getOverlappingPairCache1(
        this: *mut ::std::os::raw::c_void,
    ) -> *const btOverlappingPairCache;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btDbvtBroadphase17getBroadphaseAabbER9btVector3S1_"]
    pub fn btDbvtBroadphase_getBroadphaseAabb(
        this: *mut ::std::os::raw::c_void,
        aabbMin: *mut btVector3,
        aabbMax: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btDbvtBroadphase10printStatsEv"]
    pub fn btDbvtBroadphase_printStats(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    /// reset broadphase internal structures, to ensure determinism/reproducability
    #[link_name = "\u{1}_ZN16btDbvtBroadphase9resetPoolEP12btDispatcher"]
    pub fn btDbvtBroadphase_resetPool(
        this: *mut ::std::os::raw::c_void,
        dispatcher: *mut btDispatcher,
    );
}
/// The internal templace class btAxisSweep3Internal implements the sweep and prune broadphase.
/// It uses quantized integers to represent the begin and end points for each of the 3 axis.
/// Dont use this class directly, use btAxisSweep3 or bt32BitAxisSweep3 instead.
#[repr(C)]
#[derive(Debug)]
pub struct btAxisSweep3Internal<BP_FP_INT_TYPE> {
    pub _base: btBroadphaseInterface,
    pub m_bpHandleMask: BP_FP_INT_TYPE,
    pub m_handleSentinel: BP_FP_INT_TYPE,
    pub m_worldAabbMin: btVector3,
    pub m_worldAabbMax: btVector3,
    pub m_quantize: btVector3,
    pub m_numHandles: BP_FP_INT_TYPE,
    pub m_maxHandles: BP_FP_INT_TYPE,
    pub m_pHandles: *mut btAxisSweep3Internal_Handle<BP_FP_INT_TYPE>,
    pub m_firstFreeHandle: BP_FP_INT_TYPE,
    pub m_pEdges: [*mut btAxisSweep3Internal_Edge<BP_FP_INT_TYPE>; 3usize],
    pub m_pEdgesRawPtr: [*mut ::std::os::raw::c_void; 3usize],
    pub m_pairCache: *mut btOverlappingPairCache,
    /// btOverlappingPairCallback is an additional optional user callback for adding/removing overlapping pairs, similar interface to btOverlappingPairCache.
    pub m_userPairCallback: *mut btOverlappingPairCallback,
    pub m_ownsPairCache: bool,
    pub m_invalidPair: ::std::os::raw::c_int,
    /// additional dynamic aabb structure, used to accelerate ray cast queries.
    /// ///can be disabled using a optional argument in the constructor
    pub m_raycastAccelerator: *mut btDbvtBroadphase,
    pub m_nullPairCache: *mut btOverlappingPairCache,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<BP_FP_INT_TYPE>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btAxisSweep3Internal_Edge<BP_FP_INT_TYPE> {
    pub m_pos: BP_FP_INT_TYPE,
    pub m_handle: BP_FP_INT_TYPE,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<BP_FP_INT_TYPE>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct btAxisSweep3Internal_Handle<BP_FP_INT_TYPE> {
    pub _base: btBroadphaseProxy,
    pub m_minEdges: [BP_FP_INT_TYPE; 3usize],
    pub m_maxEdges: [BP_FP_INT_TYPE; 3usize],
    pub m_dbvtProxy: *mut btBroadphaseProxy,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<BP_FP_INT_TYPE>>,
}
/// The btAxisSweep3 is an efficient implementation of the 3d axis sweep and prune broadphase.
/// It uses arrays rather then lists for storage of the 3 axis. Also it operates using 16 bit integer coordinates instead of floats.
/// For large worlds and many objects, use bt32BitAxisSweep3 or btDbvtBroadphase instead. bt32BitAxisSweep3 has higher precision and allows more then 16384 objects at the cost of more memory and bit of performance.
#[repr(C)]
#[derive(Debug)]
pub struct btAxisSweep3 {
    pub _base: btAxisSweep3Internal<::std::os::raw::c_ushort>,
}
extern "C" {
    #[link_name = "\u{1}_ZN12btAxisSweep3C1ERK9btVector3S2_tP22btOverlappingPairCacheb"]
    pub fn btAxisSweep3_btAxisSweep3(
        this: *mut btAxisSweep3,
        worldAabbMin: *const btVector3,
        worldAabbMax: *const btVector3,
        maxHandles: ::std::os::raw::c_ushort,
        pairCache: *mut btOverlappingPairCache,
        disableRaycastAccelerator: bool,
    );
}
impl btAxisSweep3 {
    #[inline]
    pub unsafe fn new(
        worldAabbMin: *const btVector3,
        worldAabbMax: *const btVector3,
        maxHandles: ::std::os::raw::c_ushort,
        pairCache: *mut btOverlappingPairCache,
        disableRaycastAccelerator: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btAxisSweep3_btAxisSweep3(
            &mut __bindgen_tmp,
            worldAabbMin,
            worldAabbMax,
            maxHandles,
            pairCache,
            disableRaycastAccelerator,
        );
        __bindgen_tmp
    }
}
/// The bt32BitAxisSweep3 allows higher precision quantization and more objects compared to the btAxisSweep3 sweep and prune.
/// This comes at the cost of more memory per handle, and a bit slower performance.
/// It uses arrays rather then lists for storage of the 3 axis.
#[repr(C)]
#[derive(Debug)]
pub struct bt32BitAxisSweep3 {
    pub _base: btAxisSweep3Internal<::std::os::raw::c_uint>,
}
extern "C" {
    #[link_name = "\u{1}_ZN17bt32BitAxisSweep3C1ERK9btVector3S2_jP22btOverlappingPairCacheb"]
    pub fn bt32BitAxisSweep3_bt32BitAxisSweep3(
        this: *mut bt32BitAxisSweep3,
        worldAabbMin: *const btVector3,
        worldAabbMax: *const btVector3,
        maxHandles: ::std::os::raw::c_uint,
        pairCache: *mut btOverlappingPairCache,
        disableRaycastAccelerator: bool,
    );
}
impl bt32BitAxisSweep3 {
    #[inline]
    pub unsafe fn new(
        worldAabbMin: *const btVector3,
        worldAabbMax: *const btVector3,
        maxHandles: ::std::os::raw::c_uint,
        pairCache: *mut btOverlappingPairCache,
        disableRaycastAccelerator: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        bt32BitAxisSweep3_bt32BitAxisSweep3(
            &mut __bindgen_tmp,
            worldAabbMin,
            worldAabbMax,
            maxHandles,
            pairCache,
            disableRaycastAccelerator,
        );
        __bindgen_tmp
    }
}
/// The btDefaultMotionState provides a common implementation to synchronize world transforms with offsets.
#[repr(C)]
#[derive(Debug)]
pub struct btDefaultMotionState {
    pub _base: btMotionState,
    pub m_graphicsWorldTrans: btTransform,
    pub m_centerOfMassOffset: btTransform,
    pub m_startWorldTrans: btTransform,
    pub m_userPointer: *mut ::std::os::raw::c_void,
}
/// The btSimpleDynamicsWorld serves as unit-test and to verify more complicated and optimized dynamics worlds.
/// Please use btDiscreteDynamicsWorld instead
#[repr(C)]
#[derive(Debug)]
pub struct btSimpleDynamicsWorld {
    pub _base: btDynamicsWorld,
    pub m_constraintSolver: *mut btConstraintSolver,
    pub m_ownsConstraintSolver: bool,
    pub m_gravity: btVector3,
}
extern "C" {
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld25predictUnconstraintMotionEf"]
    pub fn btSimpleDynamicsWorld_predictUnconstraintMotion(
        this: *mut btSimpleDynamicsWorld,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld19integrateTransformsEf"]
    pub fn btSimpleDynamicsWorld_integrateTransforms(
        this: *mut btSimpleDynamicsWorld,
        timeStep: btScalar,
    );
}
extern "C" {
    /// this btSimpleDynamicsWorld constructor creates dispatcher, broadphase pairCache and constraintSolver
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorldC1EP12btDispatcherP21btBroadphaseInterfaceP18btConstraintSolverP24btCollisionConfiguration"]
    pub fn btSimpleDynamicsWorld_btSimpleDynamicsWorld(
        this: *mut btSimpleDynamicsWorld,
        dispatcher: *mut btDispatcher,
        pairCache: *mut btBroadphaseInterface,
        constraintSolver: *mut btConstraintSolver,
        collisionConfiguration: *mut btCollisionConfiguration,
    );
}
impl btSimpleDynamicsWorld {
    #[inline]
    pub unsafe fn predictUnconstraintMotion(&mut self, timeStep: btScalar) {
        btSimpleDynamicsWorld_predictUnconstraintMotion(self, timeStep)
    }
    #[inline]
    pub unsafe fn integrateTransforms(&mut self, timeStep: btScalar) {
        btSimpleDynamicsWorld_integrateTransforms(self, timeStep)
    }
    #[inline]
    pub unsafe fn new(
        dispatcher: *mut btDispatcher,
        pairCache: *mut btBroadphaseInterface,
        constraintSolver: *mut btConstraintSolver,
        collisionConfiguration: *mut btCollisionConfiguration,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSimpleDynamicsWorld_btSimpleDynamicsWorld(
            &mut __bindgen_tmp,
            dispatcher,
            pairCache,
            constraintSolver,
            collisionConfiguration,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorldD1Ev"]
    pub fn btSimpleDynamicsWorld_btSimpleDynamicsWorld_destructor(this: *mut btSimpleDynamicsWorld);
}
extern "C" {
    /// maxSubSteps/fixedTimeStep for interpolation is currently ignored for btSimpleDynamicsWorld, use btDiscreteDynamicsWorld instead
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld14stepSimulationEfif"]
    pub fn btSimpleDynamicsWorld_stepSimulation(
        this: *mut ::std::os::raw::c_void,
        timeStep: btScalar,
        maxSubSteps: ::std::os::raw::c_int,
        fixedTimeStep: btScalar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld10setGravityERK9btVector3"]
    pub fn btSimpleDynamicsWorld_setGravity(
        this: *mut ::std::os::raw::c_void,
        gravity: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btSimpleDynamicsWorld10getGravityEv"]
    pub fn btSimpleDynamicsWorld_getGravity(this: *mut ::std::os::raw::c_void) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld12addRigidBodyEP11btRigidBody"]
    pub fn btSimpleDynamicsWorld_addRigidBody(
        this: *mut ::std::os::raw::c_void,
        body: *mut btRigidBody,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld12addRigidBodyEP11btRigidBodyii"]
    pub fn btSimpleDynamicsWorld_addRigidBody1(
        this: *mut ::std::os::raw::c_void,
        body: *mut btRigidBody,
        group: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld15removeRigidBodyEP11btRigidBody"]
    pub fn btSimpleDynamicsWorld_removeRigidBody(
        this: *mut ::std::os::raw::c_void,
        body: *mut btRigidBody,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld14debugDrawWorldEv"]
    pub fn btSimpleDynamicsWorld_debugDrawWorld(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld9addActionEP17btActionInterface"]
    pub fn btSimpleDynamicsWorld_addAction(
        this: *mut ::std::os::raw::c_void,
        action: *mut btActionInterface,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld12removeActionEP17btActionInterface"]
    pub fn btSimpleDynamicsWorld_removeAction(
        this: *mut ::std::os::raw::c_void,
        action: *mut btActionInterface,
    );
}
extern "C" {
    /// removeCollisionObject will first check if it is a rigid body, if so call removeRigidBody otherwise call btCollisionWorld::removeCollisionObject
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld21removeCollisionObjectEP17btCollisionObject"]
    pub fn btSimpleDynamicsWorld_removeCollisionObject(
        this: *mut ::std::os::raw::c_void,
        collisionObject: *mut btCollisionObject,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld11updateAabbsEv"]
    pub fn btSimpleDynamicsWorld_updateAabbs(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld23synchronizeMotionStatesEv"]
    pub fn btSimpleDynamicsWorld_synchronizeMotionStates(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld19setConstraintSolverEP18btConstraintSolver"]
    pub fn btSimpleDynamicsWorld_setConstraintSolver(
        this: *mut ::std::os::raw::c_void,
        solver: *mut btConstraintSolver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld19getConstraintSolverEv"]
    pub fn btSimpleDynamicsWorld_getConstraintSolver(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut btConstraintSolver;
}
extern "C" {
    #[link_name = "\u{1}_ZN21btSimpleDynamicsWorld11clearForcesEv"]
    pub fn btSimpleDynamicsWorld_clearForces(this: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btConstraintSetting {
    pub m_tau: btScalar,
    pub m_damping: btScalar,
    pub m_impulseClamp: btScalar,
}
pub const btPoint2PointFlags_BT_P2P_FLAGS_ERP: btPoint2PointFlags = 1;
pub const btPoint2PointFlags_BT_P2P_FLAGS_CFM: btPoint2PointFlags = 2;
pub type btPoint2PointFlags = u32;
/// point to point constraint between two rigidbodies each with a pivotpoint that descibes the 'ballsocket' location in local space
#[repr(C)]
pub struct btPoint2PointConstraint {
    pub _base: btTypedConstraint,
    pub m_jac: [btJacobianEntry; 3usize],
    pub m_pivotInA: btVector3,
    pub m_pivotInB: btVector3,
    pub m_flags: ::std::os::raw::c_int,
    pub m_erp: btScalar,
    pub m_cfm: btScalar,
    /// for backwards compatibility during the transition to 'getInfo/getInfo2'
    pub m_useSolveConstraintObsolete: bool,
    pub m_setting: btConstraintSetting,
}
extern "C" {
    #[link_name = "\u{1}_ZN23btPoint2PointConstraint18getInfo1NonVirtualEPN17btTypedConstraint17btConstraintInfo1E"]
    pub fn btPoint2PointConstraint_getInfo1NonVirtual(
        this: *mut btPoint2PointConstraint,
        info: *mut btTypedConstraint_btConstraintInfo1,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btPoint2PointConstraint18getInfo2NonVirtualEPN17btTypedConstraint17btConstraintInfo2ERK11btTransformS5_"]
    pub fn btPoint2PointConstraint_getInfo2NonVirtual(
        this: *mut btPoint2PointConstraint,
        info: *mut btTypedConstraint_btConstraintInfo2,
        body0_trans: *const btTransform,
        body1_trans: *const btTransform,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btPoint2PointConstraint9updateRHSEf"]
    pub fn btPoint2PointConstraint_updateRHS(
        this: *mut btPoint2PointConstraint,
        timeStep: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btPoint2PointConstraintC1ER11btRigidBodyS1_RK9btVector3S4_"]
    pub fn btPoint2PointConstraint_btPoint2PointConstraint(
        this: *mut btPoint2PointConstraint,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btPoint2PointConstraintC1ER11btRigidBodyRK9btVector3"]
    pub fn btPoint2PointConstraint_btPoint2PointConstraint1(
        this: *mut btPoint2PointConstraint,
        rbA: *mut btRigidBody,
        pivotInA: *const btVector3,
    );
}
impl btPoint2PointConstraint {
    #[inline]
    pub unsafe fn getInfo1NonVirtual(&mut self, info: *mut btTypedConstraint_btConstraintInfo1) {
        btPoint2PointConstraint_getInfo1NonVirtual(self, info)
    }
    #[inline]
    pub unsafe fn getInfo2NonVirtual(
        &mut self,
        info: *mut btTypedConstraint_btConstraintInfo2,
        body0_trans: *const btTransform,
        body1_trans: *const btTransform,
    ) {
        btPoint2PointConstraint_getInfo2NonVirtual(self, info, body0_trans, body1_trans)
    }
    #[inline]
    pub unsafe fn updateRHS(&mut self, timeStep: btScalar) {
        btPoint2PointConstraint_updateRHS(self, timeStep)
    }
    #[inline]
    pub unsafe fn new(
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btPoint2PointConstraint_btPoint2PointConstraint(
            &mut __bindgen_tmp,
            rbA,
            rbB,
            pivotInA,
            pivotInB,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(rbA: *mut btRigidBody, pivotInA: *const btVector3) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btPoint2PointConstraint_btPoint2PointConstraint1(&mut __bindgen_tmp, rbA, pivotInA);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN23btPoint2PointConstraint13buildJacobianEv"]
    pub fn btPoint2PointConstraint_buildJacobian(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN23btPoint2PointConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E"]
    pub fn btPoint2PointConstraint_getInfo1(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo1,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btPoint2PointConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E"]
    pub fn btPoint2PointConstraint_getInfo2(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo2,
    );
}
extern "C" {
    /// override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
    /// ///If no axis is provided, it uses the default axis for this constraint.
    #[link_name = "\u{1}_ZN23btPoint2PointConstraint8setParamEifi"]
    pub fn btPoint2PointConstraint_setParam(
        this: *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
        value: btScalar,
        axis: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// return the local value of parameter
    #[link_name = "\u{1}_ZNK23btPoint2PointConstraint8getParamEii"]
    pub fn btPoint2PointConstraint_getParam(
        this: *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
        axis: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btPoint2PointConstraint28calculateSerializeBufferSizeEv"]
    pub fn btPoint2PointConstraint_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK23btPoint2PointConstraint9serializeEPvP12btSerializer"]
    pub fn btPoint2PointConstraint_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btPoint2PointConstraintFloatData {
    pub m_typeConstraintData: btTypedConstraintData,
    pub m_pivotInA: btVector3FloatData,
    pub m_pivotInB: btVector3FloatData,
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btPoint2PointConstraintDoubleData2 {
    pub m_typeConstraintData: btTypedConstraintDoubleData,
    pub m_pivotInA: btVector3DoubleData,
    pub m_pivotInB: btVector3DoubleData,
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
/// this structure is not used, except for loading pre-2.82 .bullet files
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btPoint2PointConstraintDoubleData {
    pub m_typeConstraintData: btTypedConstraintData,
    pub m_pivotInA: btVector3DoubleData,
    pub m_pivotInB: btVector3DoubleData,
}
pub const btHingeFlags_BT_HINGE_FLAGS_CFM_STOP: btHingeFlags = 1;
pub const btHingeFlags_BT_HINGE_FLAGS_ERP_STOP: btHingeFlags = 2;
pub const btHingeFlags_BT_HINGE_FLAGS_CFM_NORM: btHingeFlags = 4;
pub const btHingeFlags_BT_HINGE_FLAGS_ERP_NORM: btHingeFlags = 8;
pub type btHingeFlags = u32;
/// hinge constraint between two rigidbodies each with a pivotpoint that descibes the axis location in local space
/// axis defines the orientation of the hinge axis
#[repr(C)]
pub struct btHingeConstraint {
    pub _base: btTypedConstraint,
    pub m_jac: [btJacobianEntry; 3usize],
    pub m_jacAng: [btJacobianEntry; 3usize],
    pub m_rbAFrame: btTransform,
    pub m_rbBFrame: btTransform,
    pub m_motorTargetVelocity: btScalar,
    pub m_maxMotorImpulse: btScalar,
    pub m_limit: btAngularLimit,
    pub m_kHinge: btScalar,
    pub m_accLimitImpulse: btScalar,
    pub m_hingeAngle: btScalar,
    pub m_referenceSign: btScalar,
    pub m_angularOnly: bool,
    pub m_enableAngularMotor: bool,
    pub m_useSolveConstraintObsolete: bool,
    pub m_useOffsetForConstraintFrame: bool,
    pub m_useReferenceFrameA: bool,
    pub m_accMotorImpulse: btScalar,
    pub m_flags: ::std::os::raw::c_int,
    pub m_normalCFM: btScalar,
    pub m_normalERP: btScalar,
    pub m_stopCFM: btScalar,
    pub m_stopERP: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraint18getInfo1NonVirtualEPN17btTypedConstraint17btConstraintInfo1E"]
    pub fn btHingeConstraint_getInfo1NonVirtual(
        this: *mut btHingeConstraint,
        info: *mut btTypedConstraint_btConstraintInfo1,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraint18getInfo2NonVirtualEPN17btTypedConstraint17btConstraintInfo2ERK11btTransformS5_RK9btVector3S8_"]
    pub fn btHingeConstraint_getInfo2NonVirtual(
        this: *mut btHingeConstraint,
        info: *mut btTypedConstraint_btConstraintInfo2,
        transA: *const btTransform,
        transB: *const btTransform,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraint16getInfo2InternalEPN17btTypedConstraint17btConstraintInfo2ERK11btTransformS5_RK9btVector3S8_"]
    pub fn btHingeConstraint_getInfo2Internal(
        this: *mut btHingeConstraint,
        info: *mut btTypedConstraint_btConstraintInfo2,
        transA: *const btTransform,
        transB: *const btTransform,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraint32getInfo2InternalUsingFrameOffsetEPN17btTypedConstraint17btConstraintInfo2ERK11btTransformS5_RK9btVector3S8_"]
    pub fn btHingeConstraint_getInfo2InternalUsingFrameOffset(
        this: *mut btHingeConstraint,
        info: *mut btTypedConstraint_btConstraintInfo2,
        transA: *const btTransform,
        transB: *const btTransform,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraint9updateRHSEf"]
    pub fn btHingeConstraint_updateRHS(this: *mut btHingeConstraint, timeStep: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraint9setFramesERK11btTransformS2_"]
    pub fn btHingeConstraint_setFrames(
        this: *mut btHingeConstraint,
        frameA: *const btTransform,
        frameB: *const btTransform,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraint14setMotorTargetERK12btQuaternionf"]
    pub fn btHingeConstraint_setMotorTarget(
        this: *mut btHingeConstraint,
        qAinB: *const btQuaternion,
        dt: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraint14setMotorTargetEff"]
    pub fn btHingeConstraint_setMotorTarget1(
        this: *mut btHingeConstraint,
        targetAngle: btScalar,
        dt: btScalar,
    );
}
extern "C" {
    /// The getHingeAngle gives the hinge angle in range [-PI,PI]
    #[link_name = "\u{1}_ZN17btHingeConstraint13getHingeAngleEv"]
    pub fn btHingeConstraint_getHingeAngle(this: *mut btHingeConstraint) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraint13getHingeAngleERK11btTransformS2_"]
    pub fn btHingeConstraint_getHingeAngle1(
        this: *mut btHingeConstraint,
        transA: *const btTransform,
        transB: *const btTransform,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraint9testLimitERK11btTransformS2_"]
    pub fn btHingeConstraint_testLimit(
        this: *mut btHingeConstraint,
        transA: *const btTransform,
        transB: *const btTransform,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraintC1ER11btRigidBodyS1_RK9btVector3S4_S4_S4_b"]
    pub fn btHingeConstraint_btHingeConstraint(
        this: *mut btHingeConstraint,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
        axisInA: *const btVector3,
        axisInB: *const btVector3,
        useReferenceFrameA: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraintC1ER11btRigidBodyRK9btVector3S4_b"]
    pub fn btHingeConstraint_btHingeConstraint1(
        this: *mut btHingeConstraint,
        rbA: *mut btRigidBody,
        pivotInA: *const btVector3,
        axisInA: *const btVector3,
        useReferenceFrameA: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraintC1ER11btRigidBodyS1_RK11btTransformS4_b"]
    pub fn btHingeConstraint_btHingeConstraint2(
        this: *mut btHingeConstraint,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        rbAFrame: *const btTransform,
        rbBFrame: *const btTransform,
        useReferenceFrameA: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraintC1ER11btRigidBodyRK11btTransformb"]
    pub fn btHingeConstraint_btHingeConstraint3(
        this: *mut btHingeConstraint,
        rbA: *mut btRigidBody,
        rbAFrame: *const btTransform,
        useReferenceFrameA: bool,
    );
}
impl btHingeConstraint {
    #[inline]
    pub unsafe fn getInfo1NonVirtual(&mut self, info: *mut btTypedConstraint_btConstraintInfo1) {
        btHingeConstraint_getInfo1NonVirtual(self, info)
    }
    #[inline]
    pub unsafe fn getInfo2NonVirtual(
        &mut self,
        info: *mut btTypedConstraint_btConstraintInfo2,
        transA: *const btTransform,
        transB: *const btTransform,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    ) {
        btHingeConstraint_getInfo2NonVirtual(self, info, transA, transB, angVelA, angVelB)
    }
    #[inline]
    pub unsafe fn getInfo2Internal(
        &mut self,
        info: *mut btTypedConstraint_btConstraintInfo2,
        transA: *const btTransform,
        transB: *const btTransform,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    ) {
        btHingeConstraint_getInfo2Internal(self, info, transA, transB, angVelA, angVelB)
    }
    #[inline]
    pub unsafe fn getInfo2InternalUsingFrameOffset(
        &mut self,
        info: *mut btTypedConstraint_btConstraintInfo2,
        transA: *const btTransform,
        transB: *const btTransform,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    ) {
        btHingeConstraint_getInfo2InternalUsingFrameOffset(
            self, info, transA, transB, angVelA, angVelB,
        )
    }
    #[inline]
    pub unsafe fn updateRHS(&mut self, timeStep: btScalar) {
        btHingeConstraint_updateRHS(self, timeStep)
    }
    #[inline]
    pub unsafe fn setFrames(&mut self, frameA: *const btTransform, frameB: *const btTransform) {
        btHingeConstraint_setFrames(self, frameA, frameB)
    }
    #[inline]
    pub unsafe fn setMotorTarget(&mut self, qAinB: *const btQuaternion, dt: btScalar) {
        btHingeConstraint_setMotorTarget(self, qAinB, dt)
    }
    #[inline]
    pub unsafe fn setMotorTarget1(&mut self, targetAngle: btScalar, dt: btScalar) {
        btHingeConstraint_setMotorTarget1(self, targetAngle, dt)
    }
    #[inline]
    pub unsafe fn getHingeAngle(&mut self) -> btScalar {
        btHingeConstraint_getHingeAngle(self)
    }
    #[inline]
    pub unsafe fn getHingeAngle1(
        &mut self,
        transA: *const btTransform,
        transB: *const btTransform,
    ) -> btScalar {
        btHingeConstraint_getHingeAngle1(self, transA, transB)
    }
    #[inline]
    pub unsafe fn testLimit(&mut self, transA: *const btTransform, transB: *const btTransform) {
        btHingeConstraint_testLimit(self, transA, transB)
    }
    #[inline]
    pub unsafe fn new(
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        pivotInA: *const btVector3,
        pivotInB: *const btVector3,
        axisInA: *const btVector3,
        axisInB: *const btVector3,
        useReferenceFrameA: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btHingeConstraint_btHingeConstraint(
            &mut __bindgen_tmp,
            rbA,
            rbB,
            pivotInA,
            pivotInB,
            axisInA,
            axisInB,
            useReferenceFrameA,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        rbA: *mut btRigidBody,
        pivotInA: *const btVector3,
        axisInA: *const btVector3,
        useReferenceFrameA: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btHingeConstraint_btHingeConstraint1(
            &mut __bindgen_tmp,
            rbA,
            pivotInA,
            axisInA,
            useReferenceFrameA,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        rbAFrame: *const btTransform,
        rbBFrame: *const btTransform,
        useReferenceFrameA: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btHingeConstraint_btHingeConstraint2(
            &mut __bindgen_tmp,
            rbA,
            rbB,
            rbAFrame,
            rbBFrame,
            useReferenceFrameA,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new3(
        rbA: *mut btRigidBody,
        rbAFrame: *const btTransform,
        useReferenceFrameA: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btHingeConstraint_btHingeConstraint3(&mut __bindgen_tmp, rbA, rbAFrame, useReferenceFrameA);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraint13buildJacobianEv"]
    pub fn btHingeConstraint_buildJacobian(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E"]
    pub fn btHingeConstraint_getInfo1(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo1,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17btHingeConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E"]
    pub fn btHingeConstraint_getInfo2(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo2,
    );
}
extern "C" {
    /// override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
    /// ///If no axis is provided, it uses the default axis for this constraint.
    #[link_name = "\u{1}_ZN17btHingeConstraint8setParamEifi"]
    pub fn btHingeConstraint_setParam(
        this: *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
        value: btScalar,
        axis: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// return the local value of parameter
    #[link_name = "\u{1}_ZNK17btHingeConstraint8getParamEii"]
    pub fn btHingeConstraint_getParam(
        this: *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
        axis: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17btHingeConstraint28calculateSerializeBufferSizeEv"]
    pub fn btHingeConstraint_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK17btHingeConstraint9serializeEPvP12btSerializer"]
    pub fn btHingeConstraint_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
/// this structure is not used, except for loading pre-2.82 .bullet files
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btHingeConstraintDoubleData {
    pub m_typeConstraintData: btTypedConstraintData,
    pub m_rbAFrame: btTransformDoubleData,
    pub m_rbBFrame: btTransformDoubleData,
    pub m_useReferenceFrameA: ::std::os::raw::c_int,
    pub m_angularOnly: ::std::os::raw::c_int,
    pub m_enableAngularMotor: ::std::os::raw::c_int,
    pub m_motorTargetVelocity: f32,
    pub m_maxMotorImpulse: f32,
    pub m_lowerLimit: f32,
    pub m_upperLimit: f32,
    pub m_limitSoftness: f32,
    pub m_biasFactor: f32,
    pub m_relaxationFactor: f32,
}
/// The getAccumulatedHingeAngle returns the accumulated hinge angle, taking rotation across the -PI/PI boundary into account
#[repr(C)]
pub struct btHingeAccumulatedAngleConstraint {
    pub _base: btHingeConstraint,
    pub m_accumulatedAngle: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZN33btHingeAccumulatedAngleConstraint24getAccumulatedHingeAngleEv"]
    pub fn btHingeAccumulatedAngleConstraint_getAccumulatedHingeAngle(
        this: *mut btHingeAccumulatedAngleConstraint,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN33btHingeAccumulatedAngleConstraint24setAccumulatedHingeAngleEf"]
    pub fn btHingeAccumulatedAngleConstraint_setAccumulatedHingeAngle(
        this: *mut btHingeAccumulatedAngleConstraint,
        accAngle: btScalar,
    );
}
impl btHingeAccumulatedAngleConstraint {
    #[inline]
    pub unsafe fn getAccumulatedHingeAngle(&mut self) -> btScalar {
        btHingeAccumulatedAngleConstraint_getAccumulatedHingeAngle(self)
    }
    #[inline]
    pub unsafe fn setAccumulatedHingeAngle(&mut self, accAngle: btScalar) {
        btHingeAccumulatedAngleConstraint_setAccumulatedHingeAngle(self, accAngle)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN33btHingeAccumulatedAngleConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E"]
    pub fn btHingeAccumulatedAngleConstraint_getInfo1(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo1,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btHingeConstraintFloatData {
    pub m_typeConstraintData: btTypedConstraintData,
    pub m_rbAFrame: btTransformFloatData,
    pub m_rbBFrame: btTransformFloatData,
    pub m_useReferenceFrameA: ::std::os::raw::c_int,
    pub m_angularOnly: ::std::os::raw::c_int,
    pub m_enableAngularMotor: ::std::os::raw::c_int,
    pub m_motorTargetVelocity: f32,
    pub m_maxMotorImpulse: f32,
    pub m_lowerLimit: f32,
    pub m_upperLimit: f32,
    pub m_limitSoftness: f32,
    pub m_biasFactor: f32,
    pub m_relaxationFactor: f32,
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btHingeConstraintDoubleData2 {
    pub m_typeConstraintData: btTypedConstraintDoubleData,
    pub m_rbAFrame: btTransformDoubleData,
    pub m_rbBFrame: btTransformDoubleData,
    pub m_useReferenceFrameA: ::std::os::raw::c_int,
    pub m_angularOnly: ::std::os::raw::c_int,
    pub m_enableAngularMotor: ::std::os::raw::c_int,
    pub m_motorTargetVelocity: f64,
    pub m_maxMotorImpulse: f64,
    pub m_lowerLimit: f64,
    pub m_upperLimit: f64,
    pub m_limitSoftness: f64,
    pub m_biasFactor: f64,
    pub m_relaxationFactor: f64,
    pub m_padding1: [::std::os::raw::c_char; 4usize],
}
pub const btConeTwistFlags_BT_CONETWIST_FLAGS_LIN_CFM: btConeTwistFlags = 1;
pub const btConeTwistFlags_BT_CONETWIST_FLAGS_LIN_ERP: btConeTwistFlags = 2;
pub const btConeTwistFlags_BT_CONETWIST_FLAGS_ANG_CFM: btConeTwistFlags = 4;
pub type btConeTwistFlags = u32;
/// btConeTwistConstraint can be used to simulate ragdoll joints (upper arm, leg etc)
#[repr(C)]
pub struct btConeTwistConstraint {
    pub _base: btTypedConstraint,
    pub m_jac: [btJacobianEntry; 3usize],
    pub m_rbAFrame: btTransform,
    pub m_rbBFrame: btTransform,
    pub m_limitSoftness: btScalar,
    pub m_biasFactor: btScalar,
    pub m_relaxationFactor: btScalar,
    pub m_damping: btScalar,
    pub m_swingSpan1: btScalar,
    pub m_swingSpan2: btScalar,
    pub m_twistSpan: btScalar,
    pub m_fixThresh: btScalar,
    pub m_swingAxis: btVector3,
    pub m_twistAxis: btVector3,
    pub m_kSwing: btScalar,
    pub m_kTwist: btScalar,
    pub m_twistLimitSign: btScalar,
    pub m_swingCorrection: btScalar,
    pub m_twistCorrection: btScalar,
    pub m_twistAngle: btScalar,
    pub m_accSwingLimitImpulse: btScalar,
    pub m_accTwistLimitImpulse: btScalar,
    pub m_angularOnly: bool,
    pub m_solveTwistLimit: bool,
    pub m_solveSwingLimit: bool,
    pub m_useSolveConstraintObsolete: bool,
    pub m_swingLimitRatio: btScalar,
    pub m_twistLimitRatio: btScalar,
    pub m_twistAxisA: btVector3,
    pub m_bMotorEnabled: bool,
    pub m_bNormalizedMotorStrength: bool,
    pub m_qTarget: btQuaternion,
    pub m_maxMotorImpulse: btScalar,
    pub m_accMotorImpulse: btVector3,
    pub m_flags: ::std::os::raw::c_int,
    pub m_linCFM: btScalar,
    pub m_linERP: btScalar,
    pub m_angCFM: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraint4initEv"]
    pub fn btConeTwistConstraint_init(this: *mut btConeTwistConstraint);
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraint20computeConeLimitInfoERK12btQuaternionRfR9btVector3S3_"]
    pub fn btConeTwistConstraint_computeConeLimitInfo(
        this: *mut btConeTwistConstraint,
        qCone: *const btQuaternion,
        swingAngle: *mut btScalar,
        vSwingAxis: *mut btVector3,
        swingLimit: *mut btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraint21computeTwistLimitInfoERK12btQuaternionRfR9btVector3"]
    pub fn btConeTwistConstraint_computeTwistLimitInfo(
        this: *mut btConeTwistConstraint,
        qTwist: *const btQuaternion,
        twistAngle: *mut btScalar,
        vTwistAxis: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btConeTwistConstraint33adjustSwingAxisToUseEllipseNormalER9btVector3"]
    pub fn btConeTwistConstraint_adjustSwingAxisToUseEllipseNormal(
        this: *const btConeTwistConstraint,
        vSwingAxis: *mut btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraint18getInfo1NonVirtualEPN17btTypedConstraint17btConstraintInfo1E"]
    pub fn btConeTwistConstraint_getInfo1NonVirtual(
        this: *mut btConeTwistConstraint,
        info: *mut btTypedConstraint_btConstraintInfo1,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraint18getInfo2NonVirtualEPN17btTypedConstraint17btConstraintInfo2ERK11btTransformS5_RK11btMatrix3x3S8_"]
    pub fn btConeTwistConstraint_getInfo2NonVirtual(
        this: *mut btConeTwistConstraint,
        info: *mut btTypedConstraint_btConstraintInfo2,
        transA: *const btTransform,
        transB: *const btTransform,
        invInertiaWorldA: *const btMatrix3x3,
        invInertiaWorldB: *const btMatrix3x3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraint9updateRHSEf"]
    pub fn btConeTwistConstraint_updateRHS(this: *mut btConeTwistConstraint, timeStep: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraint13calcAngleInfoEv"]
    pub fn btConeTwistConstraint_calcAngleInfo(this: *mut btConeTwistConstraint);
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraint14calcAngleInfo2ERK11btTransformS2_RK11btMatrix3x3S5_"]
    pub fn btConeTwistConstraint_calcAngleInfo2(
        this: *mut btConeTwistConstraint,
        transA: *const btTransform,
        transB: *const btTransform,
        invInertiaWorldA: *const btMatrix3x3,
        invInertiaWorldB: *const btMatrix3x3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraint14setMotorTargetERK12btQuaternion"]
    pub fn btConeTwistConstraint_setMotorTarget(
        this: *mut btConeTwistConstraint,
        q: *const btQuaternion,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraint31setMotorTargetInConstraintSpaceERK12btQuaternion"]
    pub fn btConeTwistConstraint_setMotorTargetInConstraintSpace(
        this: *mut btConeTwistConstraint,
        q: *const btQuaternion,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btConeTwistConstraint16GetPointForAngleEff"]
    pub fn btConeTwistConstraint_GetPointForAngle(
        this: *const btConeTwistConstraint,
        fAngleInRadians: btScalar,
        fLength: btScalar,
    ) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraintC1ER11btRigidBodyS1_RK11btTransformS4_"]
    pub fn btConeTwistConstraint_btConeTwistConstraint(
        this: *mut btConeTwistConstraint,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        rbAFrame: *const btTransform,
        rbBFrame: *const btTransform,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraintC1ER11btRigidBodyRK11btTransform"]
    pub fn btConeTwistConstraint_btConeTwistConstraint1(
        this: *mut btConeTwistConstraint,
        rbA: *mut btRigidBody,
        rbAFrame: *const btTransform,
    );
}
impl btConeTwistConstraint {
    #[inline]
    pub unsafe fn init(&mut self) {
        btConeTwistConstraint_init(self)
    }
    #[inline]
    pub unsafe fn computeConeLimitInfo(
        &mut self,
        qCone: *const btQuaternion,
        swingAngle: *mut btScalar,
        vSwingAxis: *mut btVector3,
        swingLimit: *mut btScalar,
    ) {
        btConeTwistConstraint_computeConeLimitInfo(self, qCone, swingAngle, vSwingAxis, swingLimit)
    }
    #[inline]
    pub unsafe fn computeTwistLimitInfo(
        &mut self,
        qTwist: *const btQuaternion,
        twistAngle: *mut btScalar,
        vTwistAxis: *mut btVector3,
    ) {
        btConeTwistConstraint_computeTwistLimitInfo(self, qTwist, twistAngle, vTwistAxis)
    }
    #[inline]
    pub unsafe fn adjustSwingAxisToUseEllipseNormal(&self, vSwingAxis: *mut btVector3) {
        btConeTwistConstraint_adjustSwingAxisToUseEllipseNormal(self, vSwingAxis)
    }
    #[inline]
    pub unsafe fn getInfo1NonVirtual(&mut self, info: *mut btTypedConstraint_btConstraintInfo1) {
        btConeTwistConstraint_getInfo1NonVirtual(self, info)
    }
    #[inline]
    pub unsafe fn getInfo2NonVirtual(
        &mut self,
        info: *mut btTypedConstraint_btConstraintInfo2,
        transA: *const btTransform,
        transB: *const btTransform,
        invInertiaWorldA: *const btMatrix3x3,
        invInertiaWorldB: *const btMatrix3x3,
    ) {
        btConeTwistConstraint_getInfo2NonVirtual(
            self,
            info,
            transA,
            transB,
            invInertiaWorldA,
            invInertiaWorldB,
        )
    }
    #[inline]
    pub unsafe fn updateRHS(&mut self, timeStep: btScalar) {
        btConeTwistConstraint_updateRHS(self, timeStep)
    }
    #[inline]
    pub unsafe fn calcAngleInfo(&mut self) {
        btConeTwistConstraint_calcAngleInfo(self)
    }
    #[inline]
    pub unsafe fn calcAngleInfo2(
        &mut self,
        transA: *const btTransform,
        transB: *const btTransform,
        invInertiaWorldA: *const btMatrix3x3,
        invInertiaWorldB: *const btMatrix3x3,
    ) {
        btConeTwistConstraint_calcAngleInfo2(
            self,
            transA,
            transB,
            invInertiaWorldA,
            invInertiaWorldB,
        )
    }
    #[inline]
    pub unsafe fn setMotorTarget(&mut self, q: *const btQuaternion) {
        btConeTwistConstraint_setMotorTarget(self, q)
    }
    #[inline]
    pub unsafe fn setMotorTargetInConstraintSpace(&mut self, q: *const btQuaternion) {
        btConeTwistConstraint_setMotorTargetInConstraintSpace(self, q)
    }
    #[inline]
    pub unsafe fn GetPointForAngle(
        &self,
        fAngleInRadians: btScalar,
        fLength: btScalar,
    ) -> btVector3 {
        btConeTwistConstraint_GetPointForAngle(self, fAngleInRadians, fLength)
    }
    #[inline]
    pub unsafe fn new(
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        rbAFrame: *const btTransform,
        rbBFrame: *const btTransform,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConeTwistConstraint_btConeTwistConstraint(
            &mut __bindgen_tmp,
            rbA,
            rbB,
            rbAFrame,
            rbBFrame,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(rbA: *mut btRigidBody, rbAFrame: *const btTransform) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btConeTwistConstraint_btConeTwistConstraint1(&mut __bindgen_tmp, rbA, rbAFrame);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraint13buildJacobianEv"]
    pub fn btConeTwistConstraint_buildJacobian(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E"]
    pub fn btConeTwistConstraint_getInfo1(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo1,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E"]
    pub fn btConeTwistConstraint_getInfo2(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo2,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraint23solveConstraintObsoleteER12btSolverBodyS1_f"]
    pub fn btConeTwistConstraint_solveConstraintObsolete(
        this: *mut ::std::os::raw::c_void,
        bodyA: *mut btSolverBody,
        bodyB: *mut btSolverBody,
        timeStep: btScalar,
    );
}
extern "C" {
    /// override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
    /// ///If no axis is provided, it uses the default axis for this constraint.
    #[link_name = "\u{1}_ZN21btConeTwistConstraint8setParamEifi"]
    pub fn btConeTwistConstraint_setParam(
        this: *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
        value: btScalar,
        axis: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btConeTwistConstraint9setFramesERK11btTransformS2_"]
    pub fn btConeTwistConstraint_setFrames(
        this: *mut ::std::os::raw::c_void,
        frameA: *const btTransform,
        frameB: *const btTransform,
    );
}
extern "C" {
    /// return the local value of parameter
    #[link_name = "\u{1}_ZNK21btConeTwistConstraint8getParamEii"]
    pub fn btConeTwistConstraint_getParam(
        this: *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
        axis: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21btConeTwistConstraint28calculateSerializeBufferSizeEv"]
    pub fn btConeTwistConstraint_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK21btConeTwistConstraint9serializeEPvP12btSerializer"]
    pub fn btConeTwistConstraint_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btConeTwistConstraintDoubleData {
    pub m_typeConstraintData: btTypedConstraintDoubleData,
    pub m_rbAFrame: btTransformDoubleData,
    pub m_rbBFrame: btTransformDoubleData,
    pub m_swingSpan1: f64,
    pub m_swingSpan2: f64,
    pub m_twistSpan: f64,
    pub m_limitSoftness: f64,
    pub m_biasFactor: f64,
    pub m_relaxationFactor: f64,
    pub m_damping: f64,
}
/// this structure is not used, except for loading pre-2.82 .bullet files
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btConeTwistConstraintData {
    pub m_typeConstraintData: btTypedConstraintData,
    pub m_rbAFrame: btTransformFloatData,
    pub m_rbBFrame: btTransformFloatData,
    pub m_swingSpan1: f32,
    pub m_swingSpan2: f32,
    pub m_twistSpan: f32,
    pub m_limitSoftness: f32,
    pub m_biasFactor: f32,
    pub m_relaxationFactor: f32,
    pub m_damping: f32,
    pub m_pad: [::std::os::raw::c_char; 4usize],
}
/// ! Rotation Limit structure for generic joints
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btRotationalLimitMotor {
    /// !< joint limit
    pub m_loLimit: btScalar,
    /// !< joint limit
    pub m_hiLimit: btScalar,
    /// !< target motor velocity
    pub m_targetVelocity: btScalar,
    /// !< max force on motor
    pub m_maxMotorForce: btScalar,
    /// !< max force on limit
    pub m_maxLimitForce: btScalar,
    /// !< Damping.
    pub m_damping: btScalar,
    pub m_limitSoftness: btScalar,
    /// !< Constraint force mixing factor
    pub m_normalCFM: btScalar,
    /// !< Error tolerance factor when joint is at limit
    pub m_stopERP: btScalar,
    /// !< Constraint force mixing factor when joint is at limit
    pub m_stopCFM: btScalar,
    /// !< restitution factor
    pub m_bounce: btScalar,
    pub m_enableMotor: bool,
    /// ! temp_variables
    /// //!@{
    pub m_currentLimitError: btScalar,
    /// !  How much is violated this limit
    pub m_currentPosition: btScalar,
    /// !< 0=free, 1=at lo limit, 2=at hi limit
    pub m_currentLimit: ::std::os::raw::c_int,
    pub m_accumulatedImpulse: btScalar,
}
extern "C" {
    /// ! calculates  error
    /// /*!
    /// calculates m_currentLimit and m_currentLimitError.
    /// */
    #[link_name = "\u{1}_ZN22btRotationalLimitMotor14testLimitValueEf"]
    pub fn btRotationalLimitMotor_testLimitValue(
        this: *mut btRotationalLimitMotor,
        test_value: btScalar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// ! apply the correction impulses for two bodies
    #[link_name = "\u{1}_ZN22btRotationalLimitMotor18solveAngularLimitsEfR9btVector3fP11btRigidBodyS3_"]
    pub fn btRotationalLimitMotor_solveAngularLimits(
        this: *mut btRotationalLimitMotor,
        timeStep: btScalar,
        axis: *mut btVector3,
        jacDiagABInv: btScalar,
        body0: *mut btRigidBody,
        body1: *mut btRigidBody,
    ) -> btScalar;
}
impl btRotationalLimitMotor {
    #[inline]
    pub unsafe fn testLimitValue(&mut self, test_value: btScalar) -> ::std::os::raw::c_int {
        btRotationalLimitMotor_testLimitValue(self, test_value)
    }
    #[inline]
    pub unsafe fn solveAngularLimits(
        &mut self,
        timeStep: btScalar,
        axis: *mut btVector3,
        jacDiagABInv: btScalar,
        body0: *mut btRigidBody,
        body1: *mut btRigidBody,
    ) -> btScalar {
        btRotationalLimitMotor_solveAngularLimits(self, timeStep, axis, jacDiagABInv, body0, body1)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTranslationalLimitMotor {
    /// !< the constraint lower limits
    pub m_lowerLimit: btVector3,
    /// !< the constraint upper limits
    pub m_upperLimit: btVector3,
    pub m_accumulatedImpulse: btVector3,
    /// !< Softness for linear limit
    pub m_limitSoftness: btScalar,
    /// !< Damping for linear limit
    pub m_damping: btScalar,
    pub m_restitution: btScalar,
    /// !< Constraint force mixing factor
    pub m_normalCFM: btVector3,
    /// !< Error tolerance factor when joint is at limit
    pub m_stopERP: btVector3,
    /// !< Constraint force mixing factor when joint is at limit
    pub m_stopCFM: btVector3,
    /// !@}
    pub m_enableMotor: [bool; 3usize],
    /// !< target motor velocity
    pub m_targetVelocity: btVector3,
    /// !< max force on motor
    pub m_maxMotorForce: btVector3,
    pub m_currentLimitError: btVector3,
    /// !  How much is violated this limit
    pub m_currentLinearDiff: btVector3,
    /// !< 0=free, 1=at lower limit, 2=at upper limit
    pub m_currentLimit: [::std::os::raw::c_int; 3usize],
}
extern "C" {
    #[link_name = "\u{1}_ZN25btTranslationalLimitMotor14testLimitValueEif"]
    pub fn btTranslationalLimitMotor_testLimitValue(
        this: *mut btTranslationalLimitMotor,
        limitIndex: ::std::os::raw::c_int,
        test_value: btScalar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN25btTranslationalLimitMotor15solveLinearAxisEffR11btRigidBodyRK9btVector3S1_S4_iS4_S4_"]
    pub fn btTranslationalLimitMotor_solveLinearAxis(
        this: *mut btTranslationalLimitMotor,
        timeStep: btScalar,
        jacDiagABInv: btScalar,
        body1: *mut btRigidBody,
        pointInA: *const btVector3,
        body2: *mut btRigidBody,
        pointInB: *const btVector3,
        limit_index: ::std::os::raw::c_int,
        axis_normal_on_a: *const btVector3,
        anchorPos: *const btVector3,
    ) -> btScalar;
}
impl btTranslationalLimitMotor {
    #[inline]
    pub unsafe fn testLimitValue(
        &mut self,
        limitIndex: ::std::os::raw::c_int,
        test_value: btScalar,
    ) -> ::std::os::raw::c_int {
        btTranslationalLimitMotor_testLimitValue(self, limitIndex, test_value)
    }
    #[inline]
    pub unsafe fn solveLinearAxis(
        &mut self,
        timeStep: btScalar,
        jacDiagABInv: btScalar,
        body1: *mut btRigidBody,
        pointInA: *const btVector3,
        body2: *mut btRigidBody,
        pointInB: *const btVector3,
        limit_index: ::std::os::raw::c_int,
        axis_normal_on_a: *const btVector3,
        anchorPos: *const btVector3,
    ) -> btScalar {
        btTranslationalLimitMotor_solveLinearAxis(
            self,
            timeStep,
            jacDiagABInv,
            body1,
            pointInA,
            body2,
            pointInB,
            limit_index,
            axis_normal_on_a,
            anchorPos,
        )
    }
}
pub const bt6DofFlags_BT_6DOF_FLAGS_CFM_NORM: bt6DofFlags = 1;
pub const bt6DofFlags_BT_6DOF_FLAGS_CFM_STOP: bt6DofFlags = 2;
pub const bt6DofFlags_BT_6DOF_FLAGS_ERP_STOP: bt6DofFlags = 4;
pub type bt6DofFlags = u32;
/// btGeneric6DofConstraint between two rigidbodies each with a pivotpoint that descibes the axis location in local space
/// *!
/// btGeneric6DofConstraint can leave any of the 6 degree of freedom 'free' or 'locked'.
/// currently this limit supports rotational motors<br>
/// <ul>
/// <li> For Linear limits, use btGeneric6DofConstraint.setLinearUpperLimit, btGeneric6DofConstraint.setLinearLowerLimit. You can set the parameters with the btTranslationalLimitMotor structure accsesible through the btGeneric6DofConstraint.getTranslationalLimitMotor method.
/// At this moment translational motors are not supported. May be in the future. </li>
///
/// <li> For Angular limits, use the btRotationalLimitMotor structure for configuring the limit.
/// This is accessible through btGeneric6DofConstraint.getLimitMotor method,
/// This brings support for limit parameters and motors. </li>
///
/// <li> Angulars limits have these possible ranges:
/// <table border=1 >
/// <tr>
/// <td><b>AXIS</b></td>
/// <td><b>MIN ANGLE</b></td>
/// <td><b>MAX ANGLE</b></td>
/// </tr><tr>
/// <td>X</td>
/// <td>-PI</td>
/// <td>PI</td>
/// </tr><tr>
/// <td>Y</td>
/// <td>-PI/2</td>
/// <td>PI/2</td>
/// </tr><tr>
/// <td>Z</td>
/// <td>-PI</td>
/// <td>PI</td>
/// </tr>
/// </table>
/// </li>
/// </ul>
///
/// */
#[repr(C)]
pub struct btGeneric6DofConstraint {
    pub _base: btTypedConstraint,
    /// !< the constraint space w.r.t body A
    pub m_frameInA: btTransform,
    /// !< the constraint space w.r.t body B
    pub m_frameInB: btTransform,
    /// !< 3 orthogonal linear constraints
    pub m_jacLinear: [btJacobianEntry; 3usize],
    /// !< 3 orthogonal angular constraints
    pub m_jacAng: [btJacobianEntry; 3usize],
    /// ! Linear_Limit_parameters
    /// //!@{
    pub m_linearLimits: btTranslationalLimitMotor,
    /// ! hinge_parameters
    /// //!@{
    pub m_angularLimits: [btRotationalLimitMotor; 3usize],
    /// ! temporal variables
    /// //!@{
    pub m_timeStep: btScalar,
    pub m_calculatedTransformA: btTransform,
    pub m_calculatedTransformB: btTransform,
    pub m_calculatedAxisAngleDiff: btVector3,
    pub m_calculatedAxis: [btVector3; 3usize],
    pub m_calculatedLinearDiff: btVector3,
    pub m_factA: btScalar,
    pub m_factB: btScalar,
    pub m_hasStaticBody: bool,
    pub m_AnchorPos: btVector3,
    pub m_useLinearReferenceFrameA: bool,
    pub m_useOffsetForConstraintFrame: bool,
    pub m_flags: ::std::os::raw::c_int,
    /// for backwards compatibility during the transition to 'getInfo/getInfo2'
    pub m_useSolveConstraintObsolete: bool,
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint16setAngularLimitsEPN17btTypedConstraint17btConstraintInfo2EiRK11btTransformS5_RK9btVector3S8_S8_S8_"]
    pub fn btGeneric6DofConstraint_setAngularLimits(
        this: *mut btGeneric6DofConstraint,
        info: *mut btTypedConstraint_btConstraintInfo2,
        row_offset: ::std::os::raw::c_int,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint15setLinearLimitsEPN17btTypedConstraint17btConstraintInfo2EiRK11btTransformS5_RK9btVector3S8_S8_S8_"]
    pub fn btGeneric6DofConstraint_setLinearLimits(
        this: *mut btGeneric6DofConstraint,
        info: *mut btTypedConstraint_btConstraintInfo2,
        row: ::std::os::raw::c_int,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint19buildLinearJacobianER15btJacobianEntryRK9btVector3S4_S4_"]
    pub fn btGeneric6DofConstraint_buildLinearJacobian(
        this: *mut btGeneric6DofConstraint,
        jacLinear: *mut btJacobianEntry,
        normalWorld: *const btVector3,
        pivotAInW: *const btVector3,
        pivotBInW: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint20buildAngularJacobianER15btJacobianEntryRK9btVector3"]
    pub fn btGeneric6DofConstraint_buildAngularJacobian(
        this: *mut btGeneric6DofConstraint,
        jacAngular: *mut btJacobianEntry,
        jointAxisW: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint19calculateLinearInfoEv"]
    pub fn btGeneric6DofConstraint_calculateLinearInfo(this: *mut btGeneric6DofConstraint);
}
extern "C" {
    /// ! calcs the euler angles between the two bodies.
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint18calculateAngleInfoEv"]
    pub fn btGeneric6DofConstraint_calculateAngleInfo(this: *mut btGeneric6DofConstraint);
}
extern "C" {
    /// ! Calcs global transform of the offsets
    /// /*!
    /// Calcs the global transform for the joint offset for body A an B, and also calcs the agle differences between the bodies.
    /// \sa btGeneric6DofConstraint.getCalculatedTransformA , btGeneric6DofConstraint.getCalculatedTransformB, btGeneric6DofConstraint.calculateAngleInfo
    /// */
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint19calculateTransformsERK11btTransformS2_"]
    pub fn btGeneric6DofConstraint_calculateTransforms(
        this: *mut btGeneric6DofConstraint,
        transA: *const btTransform,
        transB: *const btTransform,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint19calculateTransformsEv"]
    pub fn btGeneric6DofConstraint_calculateTransforms1(this: *mut btGeneric6DofConstraint);
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint18getInfo1NonVirtualEPN17btTypedConstraint17btConstraintInfo1E"]
    pub fn btGeneric6DofConstraint_getInfo1NonVirtual(
        this: *mut btGeneric6DofConstraint,
        info: *mut btTypedConstraint_btConstraintInfo1,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint18getInfo2NonVirtualEPN17btTypedConstraint17btConstraintInfo2ERK11btTransformS5_RK9btVector3S8_S8_S8_"]
    pub fn btGeneric6DofConstraint_getInfo2NonVirtual(
        this: *mut btGeneric6DofConstraint,
        info: *mut btTypedConstraint_btConstraintInfo2,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint9updateRHSEf"]
    pub fn btGeneric6DofConstraint_updateRHS(
        this: *mut btGeneric6DofConstraint,
        timeStep: btScalar,
    );
}
extern "C" {
    /// ! Get the rotation axis in global coordinates
    /// /*!
    /// \pre btGeneric6DofConstraint.buildJacobian must be called previously.
    /// */
    #[link_name = "\u{1}_ZNK23btGeneric6DofConstraint7getAxisEi"]
    pub fn btGeneric6DofConstraint_getAxis(
        this: *const btGeneric6DofConstraint,
        axis_index: ::std::os::raw::c_int,
    ) -> btVector3;
}
extern "C" {
    /// ! Get the relative Euler angle
    /// /*!
    /// \pre btGeneric6DofConstraint::calculateTransforms() must be called previously.
    /// */
    #[link_name = "\u{1}_ZNK23btGeneric6DofConstraint8getAngleEi"]
    pub fn btGeneric6DofConstraint_getAngle(
        this: *const btGeneric6DofConstraint,
        axis_index: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    /// ! Get the relative position of the constraint pivot
    /// /*!
    /// \pre btGeneric6DofConstraint::calculateTransforms() must be called previously.
    /// */
    #[link_name = "\u{1}_ZNK23btGeneric6DofConstraint24getRelativePivotPositionEi"]
    pub fn btGeneric6DofConstraint_getRelativePivotPosition(
        this: *const btGeneric6DofConstraint,
        axis_index: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint9setFramesERK11btTransformS2_"]
    pub fn btGeneric6DofConstraint_setFrames(
        this: *mut btGeneric6DofConstraint,
        frameA: *const btTransform,
        frameB: *const btTransform,
    );
}
extern "C" {
    /// ! Test angular limit.
    /// /*!
    /// Calculates angular correction and returns true if limit needs to be corrected.
    /// \pre btGeneric6DofConstraint::calculateTransforms() must be called previously.
    /// */
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint21testAngularLimitMotorEi"]
    pub fn btGeneric6DofConstraint_testAngularLimitMotor(
        this: *mut btGeneric6DofConstraint,
        axis_index: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint21get_limit_motor_info2EP22btRotationalLimitMotorRK11btTransformS4_RK9btVector3S7_S7_S7_PN17btTypedConstraint17btConstraintInfo2EiRS5_ii"]
    pub fn btGeneric6DofConstraint_get_limit_motor_info2(
        this: *mut btGeneric6DofConstraint,
        limot: *mut btRotationalLimitMotor,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
        info: *mut btTypedConstraint_btConstraintInfo2,
        row: ::std::os::raw::c_int,
        ax1: *mut btVector3,
        rotational: ::std::os::raw::c_int,
        rotAllowed: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint7setAxisERK9btVector3S2_"]
    pub fn btGeneric6DofConstraint_setAxis(
        this: *mut btGeneric6DofConstraint,
        axis1: *const btVector3,
        axis2: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraintC1ER11btRigidBodyS1_RK11btTransformS4_b"]
    pub fn btGeneric6DofConstraint_btGeneric6DofConstraint(
        this: *mut btGeneric6DofConstraint,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        frameInA: *const btTransform,
        frameInB: *const btTransform,
        useLinearReferenceFrameA: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraintC1ER11btRigidBodyRK11btTransformb"]
    pub fn btGeneric6DofConstraint_btGeneric6DofConstraint1(
        this: *mut btGeneric6DofConstraint,
        rbB: *mut btRigidBody,
        frameInB: *const btTransform,
        useLinearReferenceFrameB: bool,
    );
}
impl btGeneric6DofConstraint {
    #[inline]
    pub unsafe fn setAngularLimits(
        &mut self,
        info: *mut btTypedConstraint_btConstraintInfo2,
        row_offset: ::std::os::raw::c_int,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    ) -> ::std::os::raw::c_int {
        btGeneric6DofConstraint_setAngularLimits(
            self, info, row_offset, transA, transB, linVelA, linVelB, angVelA, angVelB,
        )
    }
    #[inline]
    pub unsafe fn setLinearLimits(
        &mut self,
        info: *mut btTypedConstraint_btConstraintInfo2,
        row: ::std::os::raw::c_int,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    ) -> ::std::os::raw::c_int {
        btGeneric6DofConstraint_setLinearLimits(
            self, info, row, transA, transB, linVelA, linVelB, angVelA, angVelB,
        )
    }
    #[inline]
    pub unsafe fn buildLinearJacobian(
        &mut self,
        jacLinear: *mut btJacobianEntry,
        normalWorld: *const btVector3,
        pivotAInW: *const btVector3,
        pivotBInW: *const btVector3,
    ) {
        btGeneric6DofConstraint_buildLinearJacobian(
            self,
            jacLinear,
            normalWorld,
            pivotAInW,
            pivotBInW,
        )
    }
    #[inline]
    pub unsafe fn buildAngularJacobian(
        &mut self,
        jacAngular: *mut btJacobianEntry,
        jointAxisW: *const btVector3,
    ) {
        btGeneric6DofConstraint_buildAngularJacobian(self, jacAngular, jointAxisW)
    }
    #[inline]
    pub unsafe fn calculateLinearInfo(&mut self) {
        btGeneric6DofConstraint_calculateLinearInfo(self)
    }
    #[inline]
    pub unsafe fn calculateAngleInfo(&mut self) {
        btGeneric6DofConstraint_calculateAngleInfo(self)
    }
    #[inline]
    pub unsafe fn calculateTransforms(
        &mut self,
        transA: *const btTransform,
        transB: *const btTransform,
    ) {
        btGeneric6DofConstraint_calculateTransforms(self, transA, transB)
    }
    #[inline]
    pub unsafe fn calculateTransforms1(&mut self) {
        btGeneric6DofConstraint_calculateTransforms1(self)
    }
    #[inline]
    pub unsafe fn getInfo1NonVirtual(&mut self, info: *mut btTypedConstraint_btConstraintInfo1) {
        btGeneric6DofConstraint_getInfo1NonVirtual(self, info)
    }
    #[inline]
    pub unsafe fn getInfo2NonVirtual(
        &mut self,
        info: *mut btTypedConstraint_btConstraintInfo2,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    ) {
        btGeneric6DofConstraint_getInfo2NonVirtual(
            self, info, transA, transB, linVelA, linVelB, angVelA, angVelB,
        )
    }
    #[inline]
    pub unsafe fn updateRHS(&mut self, timeStep: btScalar) {
        btGeneric6DofConstraint_updateRHS(self, timeStep)
    }
    #[inline]
    pub unsafe fn getAxis(&self, axis_index: ::std::os::raw::c_int) -> btVector3 {
        btGeneric6DofConstraint_getAxis(self, axis_index)
    }
    #[inline]
    pub unsafe fn getAngle(&self, axis_index: ::std::os::raw::c_int) -> btScalar {
        btGeneric6DofConstraint_getAngle(self, axis_index)
    }
    #[inline]
    pub unsafe fn getRelativePivotPosition(&self, axis_index: ::std::os::raw::c_int) -> btScalar {
        btGeneric6DofConstraint_getRelativePivotPosition(self, axis_index)
    }
    #[inline]
    pub unsafe fn setFrames(&mut self, frameA: *const btTransform, frameB: *const btTransform) {
        btGeneric6DofConstraint_setFrames(self, frameA, frameB)
    }
    #[inline]
    pub unsafe fn testAngularLimitMotor(&mut self, axis_index: ::std::os::raw::c_int) -> bool {
        btGeneric6DofConstraint_testAngularLimitMotor(self, axis_index)
    }
    #[inline]
    pub unsafe fn get_limit_motor_info2(
        &mut self,
        limot: *mut btRotationalLimitMotor,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
        info: *mut btTypedConstraint_btConstraintInfo2,
        row: ::std::os::raw::c_int,
        ax1: *mut btVector3,
        rotational: ::std::os::raw::c_int,
        rotAllowed: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        btGeneric6DofConstraint_get_limit_motor_info2(
            self, limot, transA, transB, linVelA, linVelB, angVelA, angVelB, info, row, ax1,
            rotational, rotAllowed,
        )
    }
    #[inline]
    pub unsafe fn setAxis(&mut self, axis1: *const btVector3, axis2: *const btVector3) {
        btGeneric6DofConstraint_setAxis(self, axis1, axis2)
    }
    #[inline]
    pub unsafe fn new(
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        frameInA: *const btTransform,
        frameInB: *const btTransform,
        useLinearReferenceFrameA: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btGeneric6DofConstraint_btGeneric6DofConstraint(
            &mut __bindgen_tmp,
            rbA,
            rbB,
            frameInA,
            frameInB,
            useLinearReferenceFrameA,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        rbB: *mut btRigidBody,
        frameInB: *const btTransform,
        useLinearReferenceFrameB: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btGeneric6DofConstraint_btGeneric6DofConstraint1(
            &mut __bindgen_tmp,
            rbB,
            frameInB,
            useLinearReferenceFrameB,
        );
        __bindgen_tmp
    }
}
extern "C" {
    /// ! performs Jacobian calculation, and also calculates angle differences and axis
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint13buildJacobianEv"]
    pub fn btGeneric6DofConstraint_buildJacobian(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E"]
    pub fn btGeneric6DofConstraint_getInfo1(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo1,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E"]
    pub fn btGeneric6DofConstraint_getInfo2(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo2,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint13calcAnchorPosEv"]
    pub fn btGeneric6DofConstraint_calcAnchorPos(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    /// override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
    /// ///If no axis is provided, it uses the default axis for this constraint.
    #[link_name = "\u{1}_ZN23btGeneric6DofConstraint8setParamEifi"]
    pub fn btGeneric6DofConstraint_setParam(
        this: *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
        value: btScalar,
        axis: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// return the local value of parameter
    #[link_name = "\u{1}_ZNK23btGeneric6DofConstraint8getParamEii"]
    pub fn btGeneric6DofConstraint_getParam(
        this: *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
        axis: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK23btGeneric6DofConstraint28calculateSerializeBufferSizeEv"]
    pub fn btGeneric6DofConstraint_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK23btGeneric6DofConstraint9serializeEPvP12btSerializer"]
    pub fn btGeneric6DofConstraint_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btGeneric6DofConstraintData {
    pub m_typeConstraintData: btTypedConstraintData,
    pub m_rbAFrame: btTransformFloatData,
    pub m_rbBFrame: btTransformFloatData,
    pub m_linearUpperLimit: btVector3FloatData,
    pub m_linearLowerLimit: btVector3FloatData,
    pub m_angularUpperLimit: btVector3FloatData,
    pub m_angularLowerLimit: btVector3FloatData,
    pub m_useLinearReferenceFrameA: ::std::os::raw::c_int,
    pub m_useOffsetForConstraintFrame: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btGeneric6DofConstraintDoubleData2 {
    pub m_typeConstraintData: btTypedConstraintDoubleData,
    pub m_rbAFrame: btTransformDoubleData,
    pub m_rbBFrame: btTransformDoubleData,
    pub m_linearUpperLimit: btVector3DoubleData,
    pub m_linearLowerLimit: btVector3DoubleData,
    pub m_angularUpperLimit: btVector3DoubleData,
    pub m_angularLowerLimit: btVector3DoubleData,
    pub m_useLinearReferenceFrameA: ::std::os::raw::c_int,
    pub m_useOffsetForConstraintFrame: ::std::os::raw::c_int,
}
pub const btSliderFlags_BT_SLIDER_FLAGS_CFM_DIRLIN: btSliderFlags = 1;
pub const btSliderFlags_BT_SLIDER_FLAGS_ERP_DIRLIN: btSliderFlags = 2;
pub const btSliderFlags_BT_SLIDER_FLAGS_CFM_DIRANG: btSliderFlags = 4;
pub const btSliderFlags_BT_SLIDER_FLAGS_ERP_DIRANG: btSliderFlags = 8;
pub const btSliderFlags_BT_SLIDER_FLAGS_CFM_ORTLIN: btSliderFlags = 16;
pub const btSliderFlags_BT_SLIDER_FLAGS_ERP_ORTLIN: btSliderFlags = 32;
pub const btSliderFlags_BT_SLIDER_FLAGS_CFM_ORTANG: btSliderFlags = 64;
pub const btSliderFlags_BT_SLIDER_FLAGS_ERP_ORTANG: btSliderFlags = 128;
pub const btSliderFlags_BT_SLIDER_FLAGS_CFM_LIMLIN: btSliderFlags = 256;
pub const btSliderFlags_BT_SLIDER_FLAGS_ERP_LIMLIN: btSliderFlags = 512;
pub const btSliderFlags_BT_SLIDER_FLAGS_CFM_LIMANG: btSliderFlags = 1024;
pub const btSliderFlags_BT_SLIDER_FLAGS_ERP_LIMANG: btSliderFlags = 2048;
pub type btSliderFlags = u32;
#[repr(C)]
pub struct btSliderConstraint {
    pub _base: btTypedConstraint,
    /// for backwards compatibility during the transition to 'getInfo/getInfo2'
    pub m_useSolveConstraintObsolete: bool,
    pub m_useOffsetForConstraintFrame: bool,
    pub m_frameInA: btTransform,
    pub m_frameInB: btTransform,
    pub m_useLinearReferenceFrameA: bool,
    pub m_lowerLinLimit: btScalar,
    pub m_upperLinLimit: btScalar,
    pub m_lowerAngLimit: btScalar,
    pub m_upperAngLimit: btScalar,
    pub m_softnessDirLin: btScalar,
    pub m_restitutionDirLin: btScalar,
    pub m_dampingDirLin: btScalar,
    pub m_cfmDirLin: btScalar,
    pub m_softnessDirAng: btScalar,
    pub m_restitutionDirAng: btScalar,
    pub m_dampingDirAng: btScalar,
    pub m_cfmDirAng: btScalar,
    pub m_softnessLimLin: btScalar,
    pub m_restitutionLimLin: btScalar,
    pub m_dampingLimLin: btScalar,
    pub m_cfmLimLin: btScalar,
    pub m_softnessLimAng: btScalar,
    pub m_restitutionLimAng: btScalar,
    pub m_dampingLimAng: btScalar,
    pub m_cfmLimAng: btScalar,
    pub m_softnessOrthoLin: btScalar,
    pub m_restitutionOrthoLin: btScalar,
    pub m_dampingOrthoLin: btScalar,
    pub m_cfmOrthoLin: btScalar,
    pub m_softnessOrthoAng: btScalar,
    pub m_restitutionOrthoAng: btScalar,
    pub m_dampingOrthoAng: btScalar,
    pub m_cfmOrthoAng: btScalar,
    pub m_solveLinLim: bool,
    pub m_solveAngLim: bool,
    pub m_flags: ::std::os::raw::c_int,
    pub m_jacLin: [btJacobianEntry; 3usize],
    pub m_jacLinDiagABInv: [btScalar; 3usize],
    pub m_jacAng: [btJacobianEntry; 3usize],
    pub m_timeStep: btScalar,
    pub m_calculatedTransformA: btTransform,
    pub m_calculatedTransformB: btTransform,
    pub m_sliderAxis: btVector3,
    pub m_realPivotAInW: btVector3,
    pub m_realPivotBInW: btVector3,
    pub m_projPivotInW: btVector3,
    pub m_delta: btVector3,
    pub m_depth: btVector3,
    pub m_relPosA: btVector3,
    pub m_relPosB: btVector3,
    pub m_linPos: btScalar,
    pub m_angPos: btScalar,
    pub m_angDepth: btScalar,
    pub m_kAngle: btScalar,
    pub m_poweredLinMotor: bool,
    pub m_targetLinMotorVelocity: btScalar,
    pub m_maxLinMotorForce: btScalar,
    pub m_accumulatedLinMotorImpulse: btScalar,
    pub m_poweredAngMotor: bool,
    pub m_targetAngMotorVelocity: btScalar,
    pub m_maxAngMotorForce: btScalar,
    pub m_accumulatedAngMotorImpulse: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSliderConstraint10initParamsEv"]
    pub fn btSliderConstraint_initParams(this: *mut btSliderConstraint);
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSliderConstraint18getInfo1NonVirtualEPN17btTypedConstraint17btConstraintInfo1E"]
    pub fn btSliderConstraint_getInfo1NonVirtual(
        this: *mut btSliderConstraint,
        info: *mut btTypedConstraint_btConstraintInfo1,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSliderConstraint18getInfo2NonVirtualEPN17btTypedConstraint17btConstraintInfo2ERK11btTransformS5_RK9btVector3S8_ff"]
    pub fn btSliderConstraint_getInfo2NonVirtual(
        this: *mut btSliderConstraint,
        info: *mut btTypedConstraint_btConstraintInfo2,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        rbAinvMass: btScalar,
        rbBinvMass: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSliderConstraint19calculateTransformsERK11btTransformS2_"]
    pub fn btSliderConstraint_calculateTransforms(
        this: *mut btSliderConstraint,
        transA: *const btTransform,
        transB: *const btTransform,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSliderConstraint13testLinLimitsEv"]
    pub fn btSliderConstraint_testLinLimits(this: *mut btSliderConstraint);
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSliderConstraint13testAngLimitsEv"]
    pub fn btSliderConstraint_testAngLimits(this: *mut btSliderConstraint);
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSliderConstraint11getAncorInAEv"]
    pub fn btSliderConstraint_getAncorInA(this: *mut btSliderConstraint) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSliderConstraint11getAncorInBEv"]
    pub fn btSliderConstraint_getAncorInB(this: *mut btSliderConstraint) -> btVector3;
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSliderConstraintC1ER11btRigidBodyS1_RK11btTransformS4_b"]
    pub fn btSliderConstraint_btSliderConstraint(
        this: *mut btSliderConstraint,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        frameInA: *const btTransform,
        frameInB: *const btTransform,
        useLinearReferenceFrameA: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSliderConstraintC1ER11btRigidBodyRK11btTransformb"]
    pub fn btSliderConstraint_btSliderConstraint1(
        this: *mut btSliderConstraint,
        rbB: *mut btRigidBody,
        frameInB: *const btTransform,
        useLinearReferenceFrameA: bool,
    );
}
impl btSliderConstraint {
    #[inline]
    pub unsafe fn initParams(&mut self) {
        btSliderConstraint_initParams(self)
    }
    #[inline]
    pub unsafe fn getInfo1NonVirtual(&mut self, info: *mut btTypedConstraint_btConstraintInfo1) {
        btSliderConstraint_getInfo1NonVirtual(self, info)
    }
    #[inline]
    pub unsafe fn getInfo2NonVirtual(
        &mut self,
        info: *mut btTypedConstraint_btConstraintInfo2,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        rbAinvMass: btScalar,
        rbBinvMass: btScalar,
    ) {
        btSliderConstraint_getInfo2NonVirtual(
            self, info, transA, transB, linVelA, linVelB, rbAinvMass, rbBinvMass,
        )
    }
    #[inline]
    pub unsafe fn calculateTransforms(
        &mut self,
        transA: *const btTransform,
        transB: *const btTransform,
    ) {
        btSliderConstraint_calculateTransforms(self, transA, transB)
    }
    #[inline]
    pub unsafe fn testLinLimits(&mut self) {
        btSliderConstraint_testLinLimits(self)
    }
    #[inline]
    pub unsafe fn testAngLimits(&mut self) {
        btSliderConstraint_testAngLimits(self)
    }
    #[inline]
    pub unsafe fn getAncorInA(&mut self) -> btVector3 {
        btSliderConstraint_getAncorInA(self)
    }
    #[inline]
    pub unsafe fn getAncorInB(&mut self) -> btVector3 {
        btSliderConstraint_getAncorInB(self)
    }
    #[inline]
    pub unsafe fn new(
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        frameInA: *const btTransform,
        frameInB: *const btTransform,
        useLinearReferenceFrameA: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSliderConstraint_btSliderConstraint(
            &mut __bindgen_tmp,
            rbA,
            rbB,
            frameInA,
            frameInB,
            useLinearReferenceFrameA,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        rbB: *mut btRigidBody,
        frameInB: *const btTransform,
        useLinearReferenceFrameA: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btSliderConstraint_btSliderConstraint1(
            &mut __bindgen_tmp,
            rbB,
            frameInB,
            useLinearReferenceFrameA,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSliderConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E"]
    pub fn btSliderConstraint_getInfo1(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo1,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18btSliderConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E"]
    pub fn btSliderConstraint_getInfo2(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo2,
    );
}
extern "C" {
    /// override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
    /// ///If no axis is provided, it uses the default axis for this constraint.
    #[link_name = "\u{1}_ZN18btSliderConstraint8setParamEifi"]
    pub fn btSliderConstraint_setParam(
        this: *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
        value: btScalar,
        axis: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// return the local value of parameter
    #[link_name = "\u{1}_ZNK18btSliderConstraint8getParamEii"]
    pub fn btSliderConstraint_getParam(
        this: *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
        axis: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZNK18btSliderConstraint28calculateSerializeBufferSizeEv"]
    pub fn btSliderConstraint_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK18btSliderConstraint9serializeEPvP12btSerializer"]
    pub fn btSliderConstraint_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSliderConstraintData {
    pub m_typeConstraintData: btTypedConstraintData,
    pub m_rbAFrame: btTransformFloatData,
    pub m_rbBFrame: btTransformFloatData,
    pub m_linearUpperLimit: f32,
    pub m_linearLowerLimit: f32,
    pub m_angularUpperLimit: f32,
    pub m_angularLowerLimit: f32,
    pub m_useLinearReferenceFrameA: ::std::os::raw::c_int,
    pub m_useOffsetForConstraintFrame: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSliderConstraintDoubleData {
    pub m_typeConstraintData: btTypedConstraintDoubleData,
    pub m_rbAFrame: btTransformDoubleData,
    pub m_rbBFrame: btTransformDoubleData,
    pub m_linearUpperLimit: f64,
    pub m_linearLowerLimit: f64,
    pub m_angularUpperLimit: f64,
    pub m_angularLowerLimit: f64,
    pub m_useLinearReferenceFrameA: ::std::os::raw::c_int,
    pub m_useOffsetForConstraintFrame: ::std::os::raw::c_int,
}
/// DOF index used in enableSpring() and setStiffness() means:
/// 0 : translation X
/// 1 : translation Y
/// 2 : translation Z
/// 3 : rotation X (3rd Euler rotational around new position of X axis, range [-PI+epsilon, PI-epsilon] )
/// 4 : rotation Y (2nd Euler rotational around new position of Y axis, range [-PI/2+epsilon, PI/2-epsilon] )
/// 5 : rotation Z (1st Euler rotational around Z axis, range [-PI+epsilon, PI-epsilon] )
#[repr(C)]
pub struct btGeneric6DofSpringConstraint {
    pub _base: btGeneric6DofConstraint,
    pub m_springEnabled: [bool; 6usize],
    pub m_equilibriumPoint: [btScalar; 6usize],
    pub m_springStiffness: [btScalar; 6usize],
    pub m_springDamping: [btScalar; 6usize],
}
extern "C" {
    #[link_name = "\u{1}_ZN29btGeneric6DofSpringConstraint4initEv"]
    pub fn btGeneric6DofSpringConstraint_init(this: *mut btGeneric6DofSpringConstraint);
}
extern "C" {
    #[link_name = "\u{1}_ZN29btGeneric6DofSpringConstraint21internalUpdateSpringsEPN17btTypedConstraint17btConstraintInfo2E"]
    pub fn btGeneric6DofSpringConstraint_internalUpdateSprings(
        this: *mut btGeneric6DofSpringConstraint,
        info: *mut btTypedConstraint_btConstraintInfo2,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN29btGeneric6DofSpringConstraint12enableSpringEib"]
    pub fn btGeneric6DofSpringConstraint_enableSpring(
        this: *mut btGeneric6DofSpringConstraint,
        index: ::std::os::raw::c_int,
        onOff: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN29btGeneric6DofSpringConstraint12setStiffnessEif"]
    pub fn btGeneric6DofSpringConstraint_setStiffness(
        this: *mut btGeneric6DofSpringConstraint,
        index: ::std::os::raw::c_int,
        stiffness: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN29btGeneric6DofSpringConstraint10setDampingEif"]
    pub fn btGeneric6DofSpringConstraint_setDamping(
        this: *mut btGeneric6DofSpringConstraint,
        index: ::std::os::raw::c_int,
        damping: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN29btGeneric6DofSpringConstraint19setEquilibriumPointEv"]
    pub fn btGeneric6DofSpringConstraint_setEquilibriumPoint(
        this: *mut btGeneric6DofSpringConstraint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN29btGeneric6DofSpringConstraint19setEquilibriumPointEi"]
    pub fn btGeneric6DofSpringConstraint_setEquilibriumPoint1(
        this: *mut btGeneric6DofSpringConstraint,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN29btGeneric6DofSpringConstraint19setEquilibriumPointEif"]
    pub fn btGeneric6DofSpringConstraint_setEquilibriumPoint2(
        this: *mut btGeneric6DofSpringConstraint,
        index: ::std::os::raw::c_int,
        val: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN29btGeneric6DofSpringConstraintC1ER11btRigidBodyS1_RK11btTransformS4_b"]
    pub fn btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint(
        this: *mut btGeneric6DofSpringConstraint,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        frameInA: *const btTransform,
        frameInB: *const btTransform,
        useLinearReferenceFrameA: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN29btGeneric6DofSpringConstraintC1ER11btRigidBodyRK11btTransformb"]
    pub fn btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint1(
        this: *mut btGeneric6DofSpringConstraint,
        rbB: *mut btRigidBody,
        frameInB: *const btTransform,
        useLinearReferenceFrameB: bool,
    );
}
impl btGeneric6DofSpringConstraint {
    #[inline]
    pub unsafe fn init(&mut self) {
        btGeneric6DofSpringConstraint_init(self)
    }
    #[inline]
    pub unsafe fn internalUpdateSprings(&mut self, info: *mut btTypedConstraint_btConstraintInfo2) {
        btGeneric6DofSpringConstraint_internalUpdateSprings(self, info)
    }
    #[inline]
    pub unsafe fn enableSpring(&mut self, index: ::std::os::raw::c_int, onOff: bool) {
        btGeneric6DofSpringConstraint_enableSpring(self, index, onOff)
    }
    #[inline]
    pub unsafe fn setStiffness(&mut self, index: ::std::os::raw::c_int, stiffness: btScalar) {
        btGeneric6DofSpringConstraint_setStiffness(self, index, stiffness)
    }
    #[inline]
    pub unsafe fn setDamping(&mut self, index: ::std::os::raw::c_int, damping: btScalar) {
        btGeneric6DofSpringConstraint_setDamping(self, index, damping)
    }
    #[inline]
    pub unsafe fn setEquilibriumPoint(&mut self) {
        btGeneric6DofSpringConstraint_setEquilibriumPoint(self)
    }
    #[inline]
    pub unsafe fn setEquilibriumPoint1(&mut self, index: ::std::os::raw::c_int) {
        btGeneric6DofSpringConstraint_setEquilibriumPoint1(self, index)
    }
    #[inline]
    pub unsafe fn setEquilibriumPoint2(&mut self, index: ::std::os::raw::c_int, val: btScalar) {
        btGeneric6DofSpringConstraint_setEquilibriumPoint2(self, index, val)
    }
    #[inline]
    pub unsafe fn new(
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        frameInA: *const btTransform,
        frameInB: *const btTransform,
        useLinearReferenceFrameA: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint(
            &mut __bindgen_tmp,
            rbA,
            rbB,
            frameInA,
            frameInB,
            useLinearReferenceFrameA,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        rbB: *mut btRigidBody,
        frameInB: *const btTransform,
        useLinearReferenceFrameB: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint1(
            &mut __bindgen_tmp,
            rbB,
            frameInB,
            useLinearReferenceFrameB,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN29btGeneric6DofSpringConstraint7setAxisERK9btVector3S2_"]
    pub fn btGeneric6DofSpringConstraint_setAxis(
        this: *mut ::std::os::raw::c_void,
        axis1: *const btVector3,
        axis2: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN29btGeneric6DofSpringConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E"]
    pub fn btGeneric6DofSpringConstraint_getInfo2(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo2,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK29btGeneric6DofSpringConstraint28calculateSerializeBufferSizeEv"]
    pub fn btGeneric6DofSpringConstraint_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK29btGeneric6DofSpringConstraint9serializeEPvP12btSerializer"]
    pub fn btGeneric6DofSpringConstraint_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btGeneric6DofSpringConstraintData {
    pub m_6dofData: btGeneric6DofConstraintData,
    pub m_springEnabled: [::std::os::raw::c_int; 6usize],
    pub m_equilibriumPoint: [f32; 6usize],
    pub m_springStiffness: [f32; 6usize],
    pub m_springDamping: [f32; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btGeneric6DofSpringConstraintDoubleData2 {
    pub m_6dofData: btGeneric6DofConstraintDoubleData2,
    pub m_springEnabled: [::std::os::raw::c_int; 6usize],
    pub m_equilibriumPoint: [f64; 6usize],
    pub m_springStiffness: [f64; 6usize],
    pub m_springDamping: [f64; 6usize],
}
/// Constraint similar to ODE Universal Joint
/// has 2 rotatioonal degrees of freedom, similar to Euler rotations around Z (axis 1)
/// and Y (axis 2)
/// Description from ODE manual :
/// "Given axis 1 on body 1, and axis 2 on body 2 that is perpendicular to axis 1, it keeps them perpendicular.
/// In other words, rotation of the two bodies about the direction perpendicular to the two axes will be equal."
#[repr(C)]
pub struct btUniversalConstraint {
    pub _base: btGeneric6DofConstraint,
    pub m_anchor: btVector3,
    pub m_axis1: btVector3,
    pub m_axis2: btVector3,
}
extern "C" {
    #[link_name = "\u{1}_ZN21btUniversalConstraint7setAxisERK9btVector3S2_"]
    pub fn btUniversalConstraint_setAxis(
        this: *mut btUniversalConstraint,
        axis1: *const btVector3,
        axis2: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21btUniversalConstraintC1ER11btRigidBodyS1_RK9btVector3S4_S4_"]
    pub fn btUniversalConstraint_btUniversalConstraint(
        this: *mut btUniversalConstraint,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        anchor: *const btVector3,
        axis1: *const btVector3,
        axis2: *const btVector3,
    );
}
impl btUniversalConstraint {
    #[inline]
    pub unsafe fn setAxis(&mut self, axis1: *const btVector3, axis2: *const btVector3) {
        btUniversalConstraint_setAxis(self, axis1, axis2)
    }
    #[inline]
    pub unsafe fn new(
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        anchor: *const btVector3,
        axis1: *const btVector3,
        axis2: *const btVector3,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btUniversalConstraint_btUniversalConstraint(
            &mut __bindgen_tmp,
            rbA,
            rbB,
            anchor,
            axis1,
            axis2,
        );
        __bindgen_tmp
    }
}
pub const RotateOrder_RO_XYZ: RotateOrder = 0;
pub const RotateOrder_RO_XZY: RotateOrder = 1;
pub const RotateOrder_RO_YXZ: RotateOrder = 2;
pub const RotateOrder_RO_YZX: RotateOrder = 3;
pub const RotateOrder_RO_ZXY: RotateOrder = 4;
pub const RotateOrder_RO_ZYX: RotateOrder = 5;
pub type RotateOrder = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btRotationalLimitMotor2 {
    pub m_loLimit: btScalar,
    pub m_hiLimit: btScalar,
    pub m_bounce: btScalar,
    pub m_stopERP: btScalar,
    pub m_stopCFM: btScalar,
    pub m_motorERP: btScalar,
    pub m_motorCFM: btScalar,
    pub m_enableMotor: bool,
    pub m_targetVelocity: btScalar,
    pub m_maxMotorForce: btScalar,
    pub m_servoMotor: bool,
    pub m_servoTarget: btScalar,
    pub m_enableSpring: bool,
    pub m_springStiffness: btScalar,
    pub m_springStiffnessLimited: bool,
    pub m_springDamping: btScalar,
    pub m_springDampingLimited: bool,
    pub m_equilibriumPoint: btScalar,
    pub m_currentLimitError: btScalar,
    pub m_currentLimitErrorHi: btScalar,
    pub m_currentPosition: btScalar,
    pub m_currentLimit: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN23btRotationalLimitMotor214testLimitValueEf"]
    pub fn btRotationalLimitMotor2_testLimitValue(
        this: *mut btRotationalLimitMotor2,
        test_value: btScalar,
    );
}
impl btRotationalLimitMotor2 {
    #[inline]
    pub unsafe fn testLimitValue(&mut self, test_value: btScalar) {
        btRotationalLimitMotor2_testLimitValue(self, test_value)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btTranslationalLimitMotor2 {
    pub m_lowerLimit: btVector3,
    pub m_upperLimit: btVector3,
    pub m_bounce: btVector3,
    pub m_stopERP: btVector3,
    pub m_stopCFM: btVector3,
    pub m_motorERP: btVector3,
    pub m_motorCFM: btVector3,
    pub m_enableMotor: [bool; 3usize],
    pub m_servoMotor: [bool; 3usize],
    pub m_enableSpring: [bool; 3usize],
    pub m_servoTarget: btVector3,
    pub m_springStiffness: btVector3,
    pub m_springStiffnessLimited: [bool; 3usize],
    pub m_springDamping: btVector3,
    pub m_springDampingLimited: [bool; 3usize],
    pub m_equilibriumPoint: btVector3,
    pub m_targetVelocity: btVector3,
    pub m_maxMotorForce: btVector3,
    pub m_currentLimitError: btVector3,
    pub m_currentLimitErrorHi: btVector3,
    pub m_currentLinearDiff: btVector3,
    pub m_currentLimit: [::std::os::raw::c_int; 3usize],
}
extern "C" {
    #[link_name = "\u{1}_ZN26btTranslationalLimitMotor214testLimitValueEif"]
    pub fn btTranslationalLimitMotor2_testLimitValue(
        this: *mut btTranslationalLimitMotor2,
        limitIndex: ::std::os::raw::c_int,
        test_value: btScalar,
    );
}
impl btTranslationalLimitMotor2 {
    #[inline]
    pub unsafe fn testLimitValue(
        &mut self,
        limitIndex: ::std::os::raw::c_int,
        test_value: btScalar,
    ) {
        btTranslationalLimitMotor2_testLimitValue(self, limitIndex, test_value)
    }
}
pub const bt6DofFlags2_BT_6DOF_FLAGS_CFM_STOP2: bt6DofFlags2 = 1;
pub const bt6DofFlags2_BT_6DOF_FLAGS_ERP_STOP2: bt6DofFlags2 = 2;
pub const bt6DofFlags2_BT_6DOF_FLAGS_CFM_MOTO2: bt6DofFlags2 = 4;
pub const bt6DofFlags2_BT_6DOF_FLAGS_ERP_MOTO2: bt6DofFlags2 = 8;
pub type bt6DofFlags2 = u32;
#[repr(C)]
pub struct btGeneric6DofSpring2Constraint {
    pub _base: btTypedConstraint,
    pub m_frameInA: btTransform,
    pub m_frameInB: btTransform,
    pub m_jacLinear: [btJacobianEntry; 3usize],
    pub m_jacAng: [btJacobianEntry; 3usize],
    pub m_linearLimits: btTranslationalLimitMotor2,
    pub m_angularLimits: [btRotationalLimitMotor2; 3usize],
    pub m_rotateOrder: RotateOrder,
    pub m_calculatedTransformA: btTransform,
    pub m_calculatedTransformB: btTransform,
    pub m_calculatedAxisAngleDiff: btVector3,
    pub m_calculatedAxis: [btVector3; 3usize],
    pub m_calculatedLinearDiff: btVector3,
    pub m_factA: btScalar,
    pub m_factB: btScalar,
    pub m_hasStaticBody: bool,
    pub m_flags: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint16setAngularLimitsEPN17btTypedConstraint17btConstraintInfo2EiRK11btTransformS5_RK9btVector3S8_S8_S8_"]
    pub fn btGeneric6DofSpring2Constraint_setAngularLimits(
        this: *mut btGeneric6DofSpring2Constraint,
        info: *mut btTypedConstraint_btConstraintInfo2,
        row_offset: ::std::os::raw::c_int,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint15setLinearLimitsEPN17btTypedConstraint17btConstraintInfo2EiRK11btTransformS5_RK9btVector3S8_S8_S8_"]
    pub fn btGeneric6DofSpring2Constraint_setLinearLimits(
        this: *mut btGeneric6DofSpring2Constraint,
        info: *mut btTypedConstraint_btConstraintInfo2,
        row: ::std::os::raw::c_int,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint19calculateLinearInfoEv"]
    pub fn btGeneric6DofSpring2Constraint_calculateLinearInfo(
        this: *mut btGeneric6DofSpring2Constraint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint18calculateAngleInfoEv"]
    pub fn btGeneric6DofSpring2Constraint_calculateAngleInfo(
        this: *mut btGeneric6DofSpring2Constraint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint21testAngularLimitMotorEi"]
    pub fn btGeneric6DofSpring2Constraint_testAngularLimitMotor(
        this: *mut btGeneric6DofSpring2Constraint,
        axis_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint15calculateJacobiEP23btRotationalLimitMotor2RK11btTransformS4_PN17btTypedConstraint17btConstraintInfo2EiR9btVector3ii"]
    pub fn btGeneric6DofSpring2Constraint_calculateJacobi(
        this: *mut btGeneric6DofSpring2Constraint,
        limot: *mut btRotationalLimitMotor2,
        transA: *const btTransform,
        transB: *const btTransform,
        info: *mut btTypedConstraint_btConstraintInfo2,
        srow: ::std::os::raw::c_int,
        ax1: *mut btVector3,
        rotational: ::std::os::raw::c_int,
        rotAllowed: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint21get_limit_motor_info2EP23btRotationalLimitMotor2RK11btTransformS4_RK9btVector3S7_S7_S7_PN17btTypedConstraint17btConstraintInfo2EiRS5_ii"]
    pub fn btGeneric6DofSpring2Constraint_get_limit_motor_info2(
        this: *mut btGeneric6DofSpring2Constraint,
        limot: *mut btRotationalLimitMotor2,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
        info: *mut btTypedConstraint_btConstraintInfo2,
        row: ::std::os::raw::c_int,
        ax1: *mut btVector3,
        rotational: ::std::os::raw::c_int,
        rotAllowed: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint19calculateTransformsERK11btTransformS2_"]
    pub fn btGeneric6DofSpring2Constraint_calculateTransforms(
        this: *mut btGeneric6DofSpring2Constraint,
        transA: *const btTransform,
        transB: *const btTransform,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint19calculateTransformsEv"]
    pub fn btGeneric6DofSpring2Constraint_calculateTransforms1(
        this: *mut btGeneric6DofSpring2Constraint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint9setFramesERK11btTransformS2_"]
    pub fn btGeneric6DofSpring2Constraint_setFrames(
        this: *mut btGeneric6DofSpring2Constraint,
        frameA: *const btTransform,
        frameB: *const btTransform,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint7setAxisERK9btVector3S2_"]
    pub fn btGeneric6DofSpring2Constraint_setAxis(
        this: *mut btGeneric6DofSpring2Constraint,
        axis1: *const btVector3,
        axis2: *const btVector3,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint9setBounceEif"]
    pub fn btGeneric6DofSpring2Constraint_setBounce(
        this: *mut btGeneric6DofSpring2Constraint,
        index: ::std::os::raw::c_int,
        bounce: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint11enableMotorEib"]
    pub fn btGeneric6DofSpring2Constraint_enableMotor(
        this: *mut btGeneric6DofSpring2Constraint,
        index: ::std::os::raw::c_int,
        onOff: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint8setServoEib"]
    pub fn btGeneric6DofSpring2Constraint_setServo(
        this: *mut btGeneric6DofSpring2Constraint,
        index: ::std::os::raw::c_int,
        onOff: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint17setTargetVelocityEif"]
    pub fn btGeneric6DofSpring2Constraint_setTargetVelocity(
        this: *mut btGeneric6DofSpring2Constraint,
        index: ::std::os::raw::c_int,
        velocity: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint14setServoTargetEif"]
    pub fn btGeneric6DofSpring2Constraint_setServoTarget(
        this: *mut btGeneric6DofSpring2Constraint,
        index: ::std::os::raw::c_int,
        target: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint16setMaxMotorForceEif"]
    pub fn btGeneric6DofSpring2Constraint_setMaxMotorForce(
        this: *mut btGeneric6DofSpring2Constraint,
        index: ::std::os::raw::c_int,
        force: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint12enableSpringEib"]
    pub fn btGeneric6DofSpring2Constraint_enableSpring(
        this: *mut btGeneric6DofSpring2Constraint,
        index: ::std::os::raw::c_int,
        onOff: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint12setStiffnessEifb"]
    pub fn btGeneric6DofSpring2Constraint_setStiffness(
        this: *mut btGeneric6DofSpring2Constraint,
        index: ::std::os::raw::c_int,
        stiffness: btScalar,
        limitIfNeeded: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint10setDampingEifb"]
    pub fn btGeneric6DofSpring2Constraint_setDamping(
        this: *mut btGeneric6DofSpring2Constraint,
        index: ::std::os::raw::c_int,
        damping: btScalar,
        limitIfNeeded: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint19setEquilibriumPointEv"]
    pub fn btGeneric6DofSpring2Constraint_setEquilibriumPoint(
        this: *mut btGeneric6DofSpring2Constraint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint19setEquilibriumPointEi"]
    pub fn btGeneric6DofSpring2Constraint_setEquilibriumPoint1(
        this: *mut btGeneric6DofSpring2Constraint,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint19setEquilibriumPointEif"]
    pub fn btGeneric6DofSpring2Constraint_setEquilibriumPoint2(
        this: *mut btGeneric6DofSpring2Constraint,
        index: ::std::os::raw::c_int,
        val: btScalar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint15btGetMatrixElemERK11btMatrix3x3i"]
    pub fn btGeneric6DofSpring2Constraint_btGetMatrixElem(
        mat: *const btMatrix3x3,
        index: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint16matrixToEulerXYZERK11btMatrix3x3R9btVector3"]
    pub fn btGeneric6DofSpring2Constraint_matrixToEulerXYZ(
        mat: *const btMatrix3x3,
        xyz: *mut btVector3,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint16matrixToEulerXZYERK11btMatrix3x3R9btVector3"]
    pub fn btGeneric6DofSpring2Constraint_matrixToEulerXZY(
        mat: *const btMatrix3x3,
        xyz: *mut btVector3,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint16matrixToEulerYXZERK11btMatrix3x3R9btVector3"]
    pub fn btGeneric6DofSpring2Constraint_matrixToEulerYXZ(
        mat: *const btMatrix3x3,
        xyz: *mut btVector3,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint16matrixToEulerYZXERK11btMatrix3x3R9btVector3"]
    pub fn btGeneric6DofSpring2Constraint_matrixToEulerYZX(
        mat: *const btMatrix3x3,
        xyz: *mut btVector3,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint16matrixToEulerZXYERK11btMatrix3x3R9btVector3"]
    pub fn btGeneric6DofSpring2Constraint_matrixToEulerZXY(
        mat: *const btMatrix3x3,
        xyz: *mut btVector3,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint16matrixToEulerZYXERK11btMatrix3x3R9btVector3"]
    pub fn btGeneric6DofSpring2Constraint_matrixToEulerZYX(
        mat: *const btMatrix3x3,
        xyz: *mut btVector3,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2ConstraintC1ER11btRigidBodyS1_RK11btTransformS4_11RotateOrder"]
    pub fn btGeneric6DofSpring2Constraint_btGeneric6DofSpring2Constraint(
        this: *mut btGeneric6DofSpring2Constraint,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        frameInA: *const btTransform,
        frameInB: *const btTransform,
        rotOrder: RotateOrder,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2ConstraintC1ER11btRigidBodyRK11btTransform11RotateOrder"]
    pub fn btGeneric6DofSpring2Constraint_btGeneric6DofSpring2Constraint1(
        this: *mut btGeneric6DofSpring2Constraint,
        rbB: *mut btRigidBody,
        frameInB: *const btTransform,
        rotOrder: RotateOrder,
    );
}
impl btGeneric6DofSpring2Constraint {
    #[inline]
    pub unsafe fn setAngularLimits(
        &mut self,
        info: *mut btTypedConstraint_btConstraintInfo2,
        row_offset: ::std::os::raw::c_int,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    ) -> ::std::os::raw::c_int {
        btGeneric6DofSpring2Constraint_setAngularLimits(
            self, info, row_offset, transA, transB, linVelA, linVelB, angVelA, angVelB,
        )
    }
    #[inline]
    pub unsafe fn setLinearLimits(
        &mut self,
        info: *mut btTypedConstraint_btConstraintInfo2,
        row: ::std::os::raw::c_int,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
    ) -> ::std::os::raw::c_int {
        btGeneric6DofSpring2Constraint_setLinearLimits(
            self, info, row, transA, transB, linVelA, linVelB, angVelA, angVelB,
        )
    }
    #[inline]
    pub unsafe fn calculateLinearInfo(&mut self) {
        btGeneric6DofSpring2Constraint_calculateLinearInfo(self)
    }
    #[inline]
    pub unsafe fn calculateAngleInfo(&mut self) {
        btGeneric6DofSpring2Constraint_calculateAngleInfo(self)
    }
    #[inline]
    pub unsafe fn testAngularLimitMotor(&mut self, axis_index: ::std::os::raw::c_int) {
        btGeneric6DofSpring2Constraint_testAngularLimitMotor(self, axis_index)
    }
    #[inline]
    pub unsafe fn calculateJacobi(
        &mut self,
        limot: *mut btRotationalLimitMotor2,
        transA: *const btTransform,
        transB: *const btTransform,
        info: *mut btTypedConstraint_btConstraintInfo2,
        srow: ::std::os::raw::c_int,
        ax1: *mut btVector3,
        rotational: ::std::os::raw::c_int,
        rotAllowed: ::std::os::raw::c_int,
    ) {
        btGeneric6DofSpring2Constraint_calculateJacobi(
            self, limot, transA, transB, info, srow, ax1, rotational, rotAllowed,
        )
    }
    #[inline]
    pub unsafe fn get_limit_motor_info2(
        &mut self,
        limot: *mut btRotationalLimitMotor2,
        transA: *const btTransform,
        transB: *const btTransform,
        linVelA: *const btVector3,
        linVelB: *const btVector3,
        angVelA: *const btVector3,
        angVelB: *const btVector3,
        info: *mut btTypedConstraint_btConstraintInfo2,
        row: ::std::os::raw::c_int,
        ax1: *mut btVector3,
        rotational: ::std::os::raw::c_int,
        rotAllowed: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        btGeneric6DofSpring2Constraint_get_limit_motor_info2(
            self, limot, transA, transB, linVelA, linVelB, angVelA, angVelB, info, row, ax1,
            rotational, rotAllowed,
        )
    }
    #[inline]
    pub unsafe fn calculateTransforms(
        &mut self,
        transA: *const btTransform,
        transB: *const btTransform,
    ) {
        btGeneric6DofSpring2Constraint_calculateTransforms(self, transA, transB)
    }
    #[inline]
    pub unsafe fn calculateTransforms1(&mut self) {
        btGeneric6DofSpring2Constraint_calculateTransforms1(self)
    }
    #[inline]
    pub unsafe fn setFrames(&mut self, frameA: *const btTransform, frameB: *const btTransform) {
        btGeneric6DofSpring2Constraint_setFrames(self, frameA, frameB)
    }
    #[inline]
    pub unsafe fn setAxis(&mut self, axis1: *const btVector3, axis2: *const btVector3) {
        btGeneric6DofSpring2Constraint_setAxis(self, axis1, axis2)
    }
    #[inline]
    pub unsafe fn setBounce(&mut self, index: ::std::os::raw::c_int, bounce: btScalar) {
        btGeneric6DofSpring2Constraint_setBounce(self, index, bounce)
    }
    #[inline]
    pub unsafe fn enableMotor(&mut self, index: ::std::os::raw::c_int, onOff: bool) {
        btGeneric6DofSpring2Constraint_enableMotor(self, index, onOff)
    }
    #[inline]
    pub unsafe fn setServo(&mut self, index: ::std::os::raw::c_int, onOff: bool) {
        btGeneric6DofSpring2Constraint_setServo(self, index, onOff)
    }
    #[inline]
    pub unsafe fn setTargetVelocity(&mut self, index: ::std::os::raw::c_int, velocity: btScalar) {
        btGeneric6DofSpring2Constraint_setTargetVelocity(self, index, velocity)
    }
    #[inline]
    pub unsafe fn setServoTarget(&mut self, index: ::std::os::raw::c_int, target: btScalar) {
        btGeneric6DofSpring2Constraint_setServoTarget(self, index, target)
    }
    #[inline]
    pub unsafe fn setMaxMotorForce(&mut self, index: ::std::os::raw::c_int, force: btScalar) {
        btGeneric6DofSpring2Constraint_setMaxMotorForce(self, index, force)
    }
    #[inline]
    pub unsafe fn enableSpring(&mut self, index: ::std::os::raw::c_int, onOff: bool) {
        btGeneric6DofSpring2Constraint_enableSpring(self, index, onOff)
    }
    #[inline]
    pub unsafe fn setStiffness(
        &mut self,
        index: ::std::os::raw::c_int,
        stiffness: btScalar,
        limitIfNeeded: bool,
    ) {
        btGeneric6DofSpring2Constraint_setStiffness(self, index, stiffness, limitIfNeeded)
    }
    #[inline]
    pub unsafe fn setDamping(
        &mut self,
        index: ::std::os::raw::c_int,
        damping: btScalar,
        limitIfNeeded: bool,
    ) {
        btGeneric6DofSpring2Constraint_setDamping(self, index, damping, limitIfNeeded)
    }
    #[inline]
    pub unsafe fn setEquilibriumPoint(&mut self) {
        btGeneric6DofSpring2Constraint_setEquilibriumPoint(self)
    }
    #[inline]
    pub unsafe fn setEquilibriumPoint1(&mut self, index: ::std::os::raw::c_int) {
        btGeneric6DofSpring2Constraint_setEquilibriumPoint1(self, index)
    }
    #[inline]
    pub unsafe fn setEquilibriumPoint2(&mut self, index: ::std::os::raw::c_int, val: btScalar) {
        btGeneric6DofSpring2Constraint_setEquilibriumPoint2(self, index, val)
    }
    #[inline]
    pub unsafe fn btGetMatrixElem(
        mat: *const btMatrix3x3,
        index: ::std::os::raw::c_int,
    ) -> btScalar {
        btGeneric6DofSpring2Constraint_btGetMatrixElem(mat, index)
    }
    #[inline]
    pub unsafe fn matrixToEulerXYZ(mat: *const btMatrix3x3, xyz: *mut btVector3) -> bool {
        btGeneric6DofSpring2Constraint_matrixToEulerXYZ(mat, xyz)
    }
    #[inline]
    pub unsafe fn matrixToEulerXZY(mat: *const btMatrix3x3, xyz: *mut btVector3) -> bool {
        btGeneric6DofSpring2Constraint_matrixToEulerXZY(mat, xyz)
    }
    #[inline]
    pub unsafe fn matrixToEulerYXZ(mat: *const btMatrix3x3, xyz: *mut btVector3) -> bool {
        btGeneric6DofSpring2Constraint_matrixToEulerYXZ(mat, xyz)
    }
    #[inline]
    pub unsafe fn matrixToEulerYZX(mat: *const btMatrix3x3, xyz: *mut btVector3) -> bool {
        btGeneric6DofSpring2Constraint_matrixToEulerYZX(mat, xyz)
    }
    #[inline]
    pub unsafe fn matrixToEulerZXY(mat: *const btMatrix3x3, xyz: *mut btVector3) -> bool {
        btGeneric6DofSpring2Constraint_matrixToEulerZXY(mat, xyz)
    }
    #[inline]
    pub unsafe fn matrixToEulerZYX(mat: *const btMatrix3x3, xyz: *mut btVector3) -> bool {
        btGeneric6DofSpring2Constraint_matrixToEulerZYX(mat, xyz)
    }
    #[inline]
    pub unsafe fn new(
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        frameInA: *const btTransform,
        frameInB: *const btTransform,
        rotOrder: RotateOrder,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btGeneric6DofSpring2Constraint_btGeneric6DofSpring2Constraint(
            &mut __bindgen_tmp,
            rbA,
            rbB,
            frameInA,
            frameInB,
            rotOrder,
        );
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(
        rbB: *mut btRigidBody,
        frameInB: *const btTransform,
        rotOrder: RotateOrder,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btGeneric6DofSpring2Constraint_btGeneric6DofSpring2Constraint1(
            &mut __bindgen_tmp,
            rbB,
            frameInB,
            rotOrder,
        );
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E"]
    pub fn btGeneric6DofSpring2Constraint_getInfo1(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo1,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E"]
    pub fn btGeneric6DofSpring2Constraint_getInfo2(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo2,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK30btGeneric6DofSpring2Constraint28calculateSerializeBufferSizeEv"]
    pub fn btGeneric6DofSpring2Constraint_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK30btGeneric6DofSpring2Constraint9serializeEPvP12btSerializer"]
    pub fn btGeneric6DofSpring2Constraint_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN30btGeneric6DofSpring2Constraint8setParamEifi"]
    pub fn btGeneric6DofSpring2Constraint_setParam(
        this: *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
        value: btScalar,
        axis: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK30btGeneric6DofSpring2Constraint8getParamEii"]
    pub fn btGeneric6DofSpring2Constraint_getParam(
        this: *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_int,
        axis: ::std::os::raw::c_int,
    ) -> btScalar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btGeneric6DofSpring2ConstraintData {
    pub m_typeConstraintData: btTypedConstraintData,
    pub m_rbAFrame: btTransformFloatData,
    pub m_rbBFrame: btTransformFloatData,
    pub m_linearUpperLimit: btVector3FloatData,
    pub m_linearLowerLimit: btVector3FloatData,
    pub m_linearBounce: btVector3FloatData,
    pub m_linearStopERP: btVector3FloatData,
    pub m_linearStopCFM: btVector3FloatData,
    pub m_linearMotorERP: btVector3FloatData,
    pub m_linearMotorCFM: btVector3FloatData,
    pub m_linearTargetVelocity: btVector3FloatData,
    pub m_linearMaxMotorForce: btVector3FloatData,
    pub m_linearServoTarget: btVector3FloatData,
    pub m_linearSpringStiffness: btVector3FloatData,
    pub m_linearSpringDamping: btVector3FloatData,
    pub m_linearEquilibriumPoint: btVector3FloatData,
    pub m_linearEnableMotor: [::std::os::raw::c_char; 4usize],
    pub m_linearServoMotor: [::std::os::raw::c_char; 4usize],
    pub m_linearEnableSpring: [::std::os::raw::c_char; 4usize],
    pub m_linearSpringStiffnessLimited: [::std::os::raw::c_char; 4usize],
    pub m_linearSpringDampingLimited: [::std::os::raw::c_char; 4usize],
    pub m_padding1: [::std::os::raw::c_char; 4usize],
    pub m_angularUpperLimit: btVector3FloatData,
    pub m_angularLowerLimit: btVector3FloatData,
    pub m_angularBounce: btVector3FloatData,
    pub m_angularStopERP: btVector3FloatData,
    pub m_angularStopCFM: btVector3FloatData,
    pub m_angularMotorERP: btVector3FloatData,
    pub m_angularMotorCFM: btVector3FloatData,
    pub m_angularTargetVelocity: btVector3FloatData,
    pub m_angularMaxMotorForce: btVector3FloatData,
    pub m_angularServoTarget: btVector3FloatData,
    pub m_angularSpringStiffness: btVector3FloatData,
    pub m_angularSpringDamping: btVector3FloatData,
    pub m_angularEquilibriumPoint: btVector3FloatData,
    pub m_angularEnableMotor: [::std::os::raw::c_char; 4usize],
    pub m_angularServoMotor: [::std::os::raw::c_char; 4usize],
    pub m_angularEnableSpring: [::std::os::raw::c_char; 4usize],
    pub m_angularSpringStiffnessLimited: [::std::os::raw::c_char; 4usize],
    pub m_angularSpringDampingLimited: [::std::os::raw::c_char; 4usize],
    pub m_rotateOrder: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btGeneric6DofSpring2ConstraintDoubleData2 {
    pub m_typeConstraintData: btTypedConstraintDoubleData,
    pub m_rbAFrame: btTransformDoubleData,
    pub m_rbBFrame: btTransformDoubleData,
    pub m_linearUpperLimit: btVector3DoubleData,
    pub m_linearLowerLimit: btVector3DoubleData,
    pub m_linearBounce: btVector3DoubleData,
    pub m_linearStopERP: btVector3DoubleData,
    pub m_linearStopCFM: btVector3DoubleData,
    pub m_linearMotorERP: btVector3DoubleData,
    pub m_linearMotorCFM: btVector3DoubleData,
    pub m_linearTargetVelocity: btVector3DoubleData,
    pub m_linearMaxMotorForce: btVector3DoubleData,
    pub m_linearServoTarget: btVector3DoubleData,
    pub m_linearSpringStiffness: btVector3DoubleData,
    pub m_linearSpringDamping: btVector3DoubleData,
    pub m_linearEquilibriumPoint: btVector3DoubleData,
    pub m_linearEnableMotor: [::std::os::raw::c_char; 4usize],
    pub m_linearServoMotor: [::std::os::raw::c_char; 4usize],
    pub m_linearEnableSpring: [::std::os::raw::c_char; 4usize],
    pub m_linearSpringStiffnessLimited: [::std::os::raw::c_char; 4usize],
    pub m_linearSpringDampingLimited: [::std::os::raw::c_char; 4usize],
    pub m_padding1: [::std::os::raw::c_char; 4usize],
    pub m_angularUpperLimit: btVector3DoubleData,
    pub m_angularLowerLimit: btVector3DoubleData,
    pub m_angularBounce: btVector3DoubleData,
    pub m_angularStopERP: btVector3DoubleData,
    pub m_angularStopCFM: btVector3DoubleData,
    pub m_angularMotorERP: btVector3DoubleData,
    pub m_angularMotorCFM: btVector3DoubleData,
    pub m_angularTargetVelocity: btVector3DoubleData,
    pub m_angularMaxMotorForce: btVector3DoubleData,
    pub m_angularServoTarget: btVector3DoubleData,
    pub m_angularSpringStiffness: btVector3DoubleData,
    pub m_angularSpringDamping: btVector3DoubleData,
    pub m_angularEquilibriumPoint: btVector3DoubleData,
    pub m_angularEnableMotor: [::std::os::raw::c_char; 4usize],
    pub m_angularServoMotor: [::std::os::raw::c_char; 4usize],
    pub m_angularEnableSpring: [::std::os::raw::c_char; 4usize],
    pub m_angularSpringStiffnessLimited: [::std::os::raw::c_char; 4usize],
    pub m_angularSpringDampingLimited: [::std::os::raw::c_char; 4usize],
    pub m_rotateOrder: ::std::os::raw::c_int,
}
#[repr(C)]
pub struct btHinge2Constraint {
    pub _base: btGeneric6DofSpring2Constraint,
    pub m_anchor: btVector3,
    pub m_axis1: btVector3,
    pub m_axis2: btVector3,
}
extern "C" {
    #[link_name = "\u{1}_ZN18btHinge2ConstraintC1ER11btRigidBodyS1_R9btVector3S3_S3_"]
    pub fn btHinge2Constraint_btHinge2Constraint(
        this: *mut btHinge2Constraint,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        anchor: *mut btVector3,
        axis1: *mut btVector3,
        axis2: *mut btVector3,
    );
}
impl btHinge2Constraint {
    #[inline]
    pub unsafe fn new(
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        anchor: *mut btVector3,
        axis1: *mut btVector3,
        axis2: *mut btVector3,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btHinge2Constraint_btHinge2Constraint(&mut __bindgen_tmp, rbA, rbB, anchor, axis1, axis2);
        __bindgen_tmp
    }
}
/// The btGeatConstraint will couple the angular velocity for two bodies around given local axis and ratio.
/// See Bullet/Demos/ConstraintDemo for an example use.
#[repr(C)]
pub struct btGearConstraint {
    pub _base: btTypedConstraint,
    pub m_axisInA: btVector3,
    pub m_axisInB: btVector3,
    pub m_useFrameA: bool,
    pub m_ratio: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZN16btGearConstraintC1ER11btRigidBodyS1_RK9btVector3S4_f"]
    pub fn btGearConstraint_btGearConstraint(
        this: *mut btGearConstraint,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        axisInA: *const btVector3,
        axisInB: *const btVector3,
        ratio: btScalar,
    );
}
impl btGearConstraint {
    #[inline]
    pub unsafe fn new(
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        axisInA: *const btVector3,
        axisInB: *const btVector3,
        ratio: btScalar,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btGearConstraint_btGearConstraint(&mut __bindgen_tmp, rbA, rbB, axisInA, axisInB, ratio);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN16btGearConstraintD1Ev"]
    pub fn btGearConstraint_btGearConstraint_destructor(this: *mut btGearConstraint);
}
extern "C" {
    /// internal method used by the constraint solver, don't use them directly
    #[link_name = "\u{1}_ZN16btGearConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E"]
    pub fn btGearConstraint_getInfo1(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo1,
    );
}
extern "C" {
    /// internal method used by the constraint solver, don't use them directly
    #[link_name = "\u{1}_ZN16btGearConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E"]
    pub fn btGearConstraint_getInfo2(
        this: *mut ::std::os::raw::c_void,
        info: *mut btTypedConstraint_btConstraintInfo2,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btGearConstraint28calculateSerializeBufferSizeEv"]
    pub fn btGearConstraint_calculateSerializeBufferSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// fills the dataBuffer and returns the struct name (and 0 on failure)
    #[link_name = "\u{1}_ZNK16btGearConstraint9serializeEPvP12btSerializer"]
    pub fn btGearConstraint_serialize(
        this: *mut ::std::os::raw::c_void,
        dataBuffer: *mut ::std::os::raw::c_void,
        serializer: *mut btSerializer,
    ) -> *const ::std::os::raw::c_char;
}
/// do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btGearConstraintFloatData {
    pub m_typeConstraintData: btTypedConstraintFloatData,
    pub m_axisInA: btVector3FloatData,
    pub m_axisInB: btVector3FloatData,
    pub m_ratio: f32,
    pub m_padding: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btGearConstraintDoubleData {
    pub m_typeConstraintData: btTypedConstraintDoubleData,
    pub m_axisInA: btVector3DoubleData,
    pub m_axisInB: btVector3DoubleData,
    pub m_ratio: f64,
}
#[repr(C)]
pub struct btFixedConstraint {
    pub _base: btGeneric6DofSpring2Constraint,
}
extern "C" {
    #[link_name = "\u{1}_ZN17btFixedConstraintC1ER11btRigidBodyS1_RK11btTransformS4_"]
    pub fn btFixedConstraint_btFixedConstraint(
        this: *mut btFixedConstraint,
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        frameInA: *const btTransform,
        frameInB: *const btTransform,
    );
}
impl btFixedConstraint {
    #[inline]
    pub unsafe fn new(
        rbA: *mut btRigidBody,
        rbB: *mut btRigidBody,
        frameInA: *const btTransform,
        frameInB: *const btTransform,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btFixedConstraint_btFixedConstraint(&mut __bindgen_tmp, rbA, rbB, frameInA, frameInB);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN17btFixedConstraintD1Ev"]
    pub fn btFixedConstraint_btFixedConstraint_destructor(this: *mut btFixedConstraint);
}
#[repr(C)]
pub struct btVehicleRaycaster__bindgen_vtable(::std::os::raw::c_void);
/// btVehicleRaycaster is provides interface for between vehicle simulation and raycasting
#[repr(C)]
#[derive(Debug)]
pub struct btVehicleRaycaster {
    pub vtable_: *const btVehicleRaycaster__bindgen_vtable,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btVehicleRaycaster_btVehicleRaycasterResult {
    pub m_hitPointInWorld: btVector3,
    pub m_hitNormalInWorld: btVector3,
    pub m_distFraction: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btWheelInfoConstructionInfo {
    pub m_chassisConnectionCS: btVector3,
    pub m_wheelDirectionCS: btVector3,
    pub m_wheelAxleCS: btVector3,
    pub m_suspensionRestLength: btScalar,
    pub m_maxSuspensionTravelCm: btScalar,
    pub m_wheelRadius: btScalar,
    pub m_suspensionStiffness: btScalar,
    pub m_wheelsDampingCompression: btScalar,
    pub m_wheelsDampingRelaxation: btScalar,
    pub m_frictionSlip: btScalar,
    pub m_maxSuspensionForce: btScalar,
    pub m_bIsFrontWheel: bool,
}
/// btWheelInfo contains information per wheel about friction and suspension.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btWheelInfo {
    pub m_raycastInfo: btWheelInfo_RaycastInfo,
    pub m_worldTransform: btTransform,
    pub m_chassisConnectionPointCS: btVector3,
    pub m_wheelDirectionCS: btVector3,
    pub m_wheelAxleCS: btVector3,
    pub m_suspensionRestLength1: btScalar,
    pub m_maxSuspensionTravelCm: btScalar,
    pub m_wheelsRadius: btScalar,
    pub m_suspensionStiffness: btScalar,
    pub m_wheelsDampingCompression: btScalar,
    pub m_wheelsDampingRelaxation: btScalar,
    pub m_frictionSlip: btScalar,
    pub m_steering: btScalar,
    pub m_rotation: btScalar,
    pub m_deltaRotation: btScalar,
    pub m_rollInfluence: btScalar,
    pub m_maxSuspensionForce: btScalar,
    pub m_engineForce: btScalar,
    pub m_brake: btScalar,
    pub m_bIsFrontWheel: bool,
    pub m_clientInfo: *mut ::std::os::raw::c_void,
    pub m_clippedInvContactDotSuspension: btScalar,
    pub m_suspensionRelativeVelocity: btScalar,
    pub m_wheelsSuspensionForce: btScalar,
    pub m_skidInfo: btScalar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btWheelInfo_RaycastInfo {
    pub m_contactNormalWS: btVector3,
    pub m_contactPointWS: btVector3,
    pub m_suspensionLength: btScalar,
    pub m_hardPointWS: btVector3,
    pub m_wheelDirectionWS: btVector3,
    pub m_wheelAxleWS: btVector3,
    pub m_isInContact: bool,
    pub m_groundObject: *mut ::std::os::raw::c_void,
}
extern "C" {
    #[link_name = "\u{1}_ZNK11btWheelInfo23getSuspensionRestLengthEv"]
    pub fn btWheelInfo_getSuspensionRestLength(this: *const btWheelInfo) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN11btWheelInfo11updateWheelERK11btRigidBodyRNS_11RaycastInfoE"]
    pub fn btWheelInfo_updateWheel(
        this: *mut btWheelInfo,
        chassis: *const btRigidBody,
        raycastInfo: *mut btWheelInfo_RaycastInfo,
    );
}
impl btWheelInfo {
    #[inline]
    pub unsafe fn getSuspensionRestLength(&self) -> btScalar {
        btWheelInfo_getSuspensionRestLength(self)
    }
    #[inline]
    pub unsafe fn updateWheel(
        &mut self,
        chassis: *const btRigidBody,
        raycastInfo: *mut btWheelInfo_RaycastInfo,
    ) {
        btWheelInfo_updateWheel(self, chassis, raycastInfo)
    }
}
/// rayCast vehicle, very special constraint that turn a rigidbody into a vehicle.
#[repr(C)]
#[derive(Debug)]
pub struct btRaycastVehicle {
    pub _base: btActionInterface,
    pub m_forwardWS: btAlignedObjectArray<btVector3>,
    pub m_axle: btAlignedObjectArray<btVector3>,
    pub m_forwardImpulse: btAlignedObjectArray<btScalar>,
    pub m_sideImpulse: btAlignedObjectArray<btScalar>,
    /// backwards compatibility
    pub m_userConstraintType: ::std::os::raw::c_int,
    pub m_userConstraintId: ::std::os::raw::c_int,
    pub m_vehicleRaycaster: *mut btVehicleRaycaster,
    pub m_pitchControl: btScalar,
    pub m_steeringValue: btScalar,
    pub m_currentVehicleSpeedKmHour: btScalar,
    pub m_chassisBody: *mut btRigidBody,
    pub m_indexRightAxis: ::std::os::raw::c_int,
    pub m_indexUpAxis: ::std::os::raw::c_int,
    pub m_indexForwardAxis: ::std::os::raw::c_int,
    pub m_wheelInfo: btAlignedObjectArray<btWheelInfo>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btRaycastVehicle_btVehicleTuning {
    pub m_suspensionStiffness: btScalar,
    pub m_suspensionCompression: btScalar,
    pub m_suspensionDamping: btScalar,
    pub m_maxSuspensionTravelCm: btScalar,
    pub m_frictionSlip: btScalar,
    pub m_maxSuspensionForce: btScalar,
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btRaycastVehicle24getChassisWorldTransformEv"]
    pub fn btRaycastVehicle_getChassisWorldTransform(
        this: *const btRaycastVehicle,
    ) -> *const btTransform;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btRaycastVehicle7rayCastER11btWheelInfo"]
    pub fn btRaycastVehicle_rayCast(
        this: *mut btRaycastVehicle,
        wheel: *mut btWheelInfo,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btRaycastVehicle15resetSuspensionEv"]
    pub fn btRaycastVehicle_resetSuspension(this: *mut btRaycastVehicle);
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btRaycastVehicle16getSteeringValueEi"]
    pub fn btRaycastVehicle_getSteeringValue(
        this: *const btRaycastVehicle,
        wheel: ::std::os::raw::c_int,
    ) -> btScalar;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btRaycastVehicle16setSteeringValueEfi"]
    pub fn btRaycastVehicle_setSteeringValue(
        this: *mut btRaycastVehicle,
        steering: btScalar,
        wheel: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btRaycastVehicle16applyEngineForceEfi"]
    pub fn btRaycastVehicle_applyEngineForce(
        this: *mut btRaycastVehicle,
        force: btScalar,
        wheel: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btRaycastVehicle19getWheelTransformWSEi"]
    pub fn btRaycastVehicle_getWheelTransformWS(
        this: *const btRaycastVehicle,
        wheelIndex: ::std::os::raw::c_int,
    ) -> *const btTransform;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btRaycastVehicle20updateWheelTransformEib"]
    pub fn btRaycastVehicle_updateWheelTransform(
        this: *mut btRaycastVehicle,
        wheelIndex: ::std::os::raw::c_int,
        interpolatedTransform: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btRaycastVehicle8addWheelERK9btVector3S2_S2_ffRKNS_15btVehicleTuningEb"]
    pub fn btRaycastVehicle_addWheel(
        this: *mut btRaycastVehicle,
        connectionPointCS0: *const btVector3,
        wheelDirectionCS0: *const btVector3,
        wheelAxleCS: *const btVector3,
        suspensionRestLength: btScalar,
        wheelRadius: btScalar,
        tuning: *const btRaycastVehicle_btVehicleTuning,
        isFrontWheel: bool,
    ) -> *mut btWheelInfo;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16btRaycastVehicle12getWheelInfoEi"]
    pub fn btRaycastVehicle_getWheelInfo(
        this: *const btRaycastVehicle,
        index: ::std::os::raw::c_int,
    ) -> *const btWheelInfo;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btRaycastVehicle12getWheelInfoEi"]
    pub fn btRaycastVehicle_getWheelInfo1(
        this: *mut btRaycastVehicle,
        index: ::std::os::raw::c_int,
    ) -> *mut btWheelInfo;
}
extern "C" {
    #[link_name = "\u{1}_ZN16btRaycastVehicle23updateWheelTransformsWSER11btWheelInfob"]
    pub fn btRaycastVehicle_updateWheelTransformsWS(
        this: *mut btRaycastVehicle,
        wheel: *mut btWheelInfo,
        interpolatedTransform: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btRaycastVehicle8setBrakeEfi"]
    pub fn btRaycastVehicle_setBrake(
        this: *mut btRaycastVehicle,
        brake: btScalar,
        wheelIndex: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btRaycastVehicle16updateSuspensionEf"]
    pub fn btRaycastVehicle_updateSuspension(this: *mut btRaycastVehicle, deltaTime: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN16btRaycastVehicleC1ERKNS_15btVehicleTuningEP11btRigidBodyP18btVehicleRaycaster"]
    pub fn btRaycastVehicle_btRaycastVehicle(
        this: *mut btRaycastVehicle,
        tuning: *const btRaycastVehicle_btVehicleTuning,
        chassis: *mut btRigidBody,
        raycaster: *mut btVehicleRaycaster,
    );
}
impl btRaycastVehicle {
    #[inline]
    pub unsafe fn getChassisWorldTransform(&self) -> *const btTransform {
        btRaycastVehicle_getChassisWorldTransform(self)
    }
    #[inline]
    pub unsafe fn rayCast(&mut self, wheel: *mut btWheelInfo) -> btScalar {
        btRaycastVehicle_rayCast(self, wheel)
    }
    #[inline]
    pub unsafe fn resetSuspension(&mut self) {
        btRaycastVehicle_resetSuspension(self)
    }
    #[inline]
    pub unsafe fn getSteeringValue(&self, wheel: ::std::os::raw::c_int) -> btScalar {
        btRaycastVehicle_getSteeringValue(self, wheel)
    }
    #[inline]
    pub unsafe fn setSteeringValue(&mut self, steering: btScalar, wheel: ::std::os::raw::c_int) {
        btRaycastVehicle_setSteeringValue(self, steering, wheel)
    }
    #[inline]
    pub unsafe fn applyEngineForce(&mut self, force: btScalar, wheel: ::std::os::raw::c_int) {
        btRaycastVehicle_applyEngineForce(self, force, wheel)
    }
    #[inline]
    pub unsafe fn getWheelTransformWS(
        &self,
        wheelIndex: ::std::os::raw::c_int,
    ) -> *const btTransform {
        btRaycastVehicle_getWheelTransformWS(self, wheelIndex)
    }
    #[inline]
    pub unsafe fn updateWheelTransform(
        &mut self,
        wheelIndex: ::std::os::raw::c_int,
        interpolatedTransform: bool,
    ) {
        btRaycastVehicle_updateWheelTransform(self, wheelIndex, interpolatedTransform)
    }
    #[inline]
    pub unsafe fn addWheel(
        &mut self,
        connectionPointCS0: *const btVector3,
        wheelDirectionCS0: *const btVector3,
        wheelAxleCS: *const btVector3,
        suspensionRestLength: btScalar,
        wheelRadius: btScalar,
        tuning: *const btRaycastVehicle_btVehicleTuning,
        isFrontWheel: bool,
    ) -> *mut btWheelInfo {
        btRaycastVehicle_addWheel(
            self,
            connectionPointCS0,
            wheelDirectionCS0,
            wheelAxleCS,
            suspensionRestLength,
            wheelRadius,
            tuning,
            isFrontWheel,
        )
    }
    #[inline]
    pub unsafe fn getWheelInfo(&self, index: ::std::os::raw::c_int) -> *const btWheelInfo {
        btRaycastVehicle_getWheelInfo(self, index)
    }
    #[inline]
    pub unsafe fn getWheelInfo1(&mut self, index: ::std::os::raw::c_int) -> *mut btWheelInfo {
        btRaycastVehicle_getWheelInfo1(self, index)
    }
    #[inline]
    pub unsafe fn updateWheelTransformsWS(
        &mut self,
        wheel: *mut btWheelInfo,
        interpolatedTransform: bool,
    ) {
        btRaycastVehicle_updateWheelTransformsWS(self, wheel, interpolatedTransform)
    }
    #[inline]
    pub unsafe fn setBrake(&mut self, brake: btScalar, wheelIndex: ::std::os::raw::c_int) {
        btRaycastVehicle_setBrake(self, brake, wheelIndex)
    }
    #[inline]
    pub unsafe fn updateSuspension(&mut self, deltaTime: btScalar) {
        btRaycastVehicle_updateSuspension(self, deltaTime)
    }
    #[inline]
    pub unsafe fn new(
        tuning: *const btRaycastVehicle_btVehicleTuning,
        chassis: *mut btRigidBody,
        raycaster: *mut btVehicleRaycaster,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        btRaycastVehicle_btRaycastVehicle(&mut __bindgen_tmp, tuning, chassis, raycaster);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN16btRaycastVehicleD1Ev"]
    pub fn btRaycastVehicle_btRaycastVehicle_destructor(this: *mut btRaycastVehicle);
}
extern "C" {
    /// btActionInterface interface
    #[link_name = "\u{1}_ZN16btRaycastVehicle9debugDrawEP12btIDebugDraw"]
    pub fn btRaycastVehicle_debugDraw(
        this: *mut ::std::os::raw::c_void,
        debugDrawer: *mut btIDebugDraw,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16btRaycastVehicle13updateVehicleEf"]
    pub fn btRaycastVehicle_updateVehicle(this: *mut ::std::os::raw::c_void, step: btScalar);
}
extern "C" {
    #[link_name = "\u{1}_ZN16btRaycastVehicle14updateFrictionEf"]
    pub fn btRaycastVehicle_updateFriction(this: *mut ::std::os::raw::c_void, timeStep: btScalar);
}
#[repr(C)]
#[derive(Debug)]
pub struct btDefaultVehicleRaycaster {
    pub _base: btVehicleRaycaster,
    pub m_dynamicsWorld: *mut btDynamicsWorld,
}
extern "C" {
    #[link_name = "\u{1}_ZN25btDefaultVehicleRaycaster7castRayERK9btVector3S2_RN18btVehicleRaycaster24btVehicleRaycasterResultE"]
    pub fn btDefaultVehicleRaycaster_castRay(
        this: *mut ::std::os::raw::c_void,
        from: *const btVector3,
        to: *const btVector3,
        result: *mut btVehicleRaycaster_btVehicleRaycasterResult,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSoftBodyDoubleData {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btSdfCollisionShapeInternalData {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btClockData {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btHullTriangle {
    pub _address: u8,
}
